
GYRO_T2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008578  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  08008758  08008758  00018758  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b74  08008b74  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08008b74  08008b74  00018b74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b7c  08008b7c  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b7c  08008b7c  00018b7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008b80  08008b80  00018b80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08008b84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000934  200001d4  08008d58  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b08  08008d58  00020b08  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   000127ff  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a1a  00000000  00000000  00032a46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f78  00000000  00000000  00035460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bee  00000000  00000000  000363d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023757  00000000  00000000  00036fc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000143e6  00000000  00000000  0005a71d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d71b8  00000000  00000000  0006eb03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000051a8  00000000  00000000  00145cbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  0014ae64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d4 	.word	0x200001d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	08008740 	.word	0x08008740

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d8 	.word	0x200001d8
 800021c:	08008740 	.word	0x08008740

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b970 	b.w	8000ef0 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9e08      	ldr	r6, [sp, #32]
 8000c2e:	460d      	mov	r5, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	460f      	mov	r7, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4694      	mov	ip, r2
 8000c3c:	d965      	bls.n	8000d0a <__udivmoddi4+0xe2>
 8000c3e:	fab2 f382 	clz	r3, r2
 8000c42:	b143      	cbz	r3, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c48:	f1c3 0220 	rsb	r2, r3, #32
 8000c4c:	409f      	lsls	r7, r3
 8000c4e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c52:	4317      	orrs	r7, r2
 8000c54:	409c      	lsls	r4, r3
 8000c56:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c5a:	fa1f f58c 	uxth.w	r5, ip
 8000c5e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c62:	0c22      	lsrs	r2, r4, #16
 8000c64:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c68:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c6c:	fb01 f005 	mul.w	r0, r1, r5
 8000c70:	4290      	cmp	r0, r2
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c74:	eb1c 0202 	adds.w	r2, ip, r2
 8000c78:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c7c:	f080 811c 	bcs.w	8000eb8 <__udivmoddi4+0x290>
 8000c80:	4290      	cmp	r0, r2
 8000c82:	f240 8119 	bls.w	8000eb8 <__udivmoddi4+0x290>
 8000c86:	3902      	subs	r1, #2
 8000c88:	4462      	add	r2, ip
 8000c8a:	1a12      	subs	r2, r2, r0
 8000c8c:	b2a4      	uxth	r4, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c9a:	fb00 f505 	mul.w	r5, r0, r5
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	d90a      	bls.n	8000cb8 <__udivmoddi4+0x90>
 8000ca2:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000caa:	f080 8107 	bcs.w	8000ebc <__udivmoddi4+0x294>
 8000cae:	42a5      	cmp	r5, r4
 8000cb0:	f240 8104 	bls.w	8000ebc <__udivmoddi4+0x294>
 8000cb4:	4464      	add	r4, ip
 8000cb6:	3802      	subs	r0, #2
 8000cb8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cbc:	1b64      	subs	r4, r4, r5
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11e      	cbz	r6, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40dc      	lsrs	r4, r3
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0xbc>
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	f000 80ed 	beq.w	8000eb2 <__udivmoddi4+0x28a>
 8000cd8:	2100      	movs	r1, #0
 8000cda:	e9c6 0500 	strd	r0, r5, [r6]
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce4:	fab3 f183 	clz	r1, r3
 8000ce8:	2900      	cmp	r1, #0
 8000cea:	d149      	bne.n	8000d80 <__udivmoddi4+0x158>
 8000cec:	42ab      	cmp	r3, r5
 8000cee:	d302      	bcc.n	8000cf6 <__udivmoddi4+0xce>
 8000cf0:	4282      	cmp	r2, r0
 8000cf2:	f200 80f8 	bhi.w	8000ee6 <__udivmoddi4+0x2be>
 8000cf6:	1a84      	subs	r4, r0, r2
 8000cf8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	4617      	mov	r7, r2
 8000d00:	2e00      	cmp	r6, #0
 8000d02:	d0e2      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	e9c6 4700 	strd	r4, r7, [r6]
 8000d08:	e7df      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d0a:	b902      	cbnz	r2, 8000d0e <__udivmoddi4+0xe6>
 8000d0c:	deff      	udf	#255	; 0xff
 8000d0e:	fab2 f382 	clz	r3, r2
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f040 8090 	bne.w	8000e38 <__udivmoddi4+0x210>
 8000d18:	1a8a      	subs	r2, r1, r2
 8000d1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1e:	fa1f fe8c 	uxth.w	lr, ip
 8000d22:	2101      	movs	r1, #1
 8000d24:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d28:	fb07 2015 	mls	r0, r7, r5, r2
 8000d2c:	0c22      	lsrs	r2, r4, #16
 8000d2e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d32:	fb0e f005 	mul.w	r0, lr, r5
 8000d36:	4290      	cmp	r0, r2
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x124>
 8000d3a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d3e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x122>
 8000d44:	4290      	cmp	r0, r2
 8000d46:	f200 80cb 	bhi.w	8000ee0 <__udivmoddi4+0x2b8>
 8000d4a:	4645      	mov	r5, r8
 8000d4c:	1a12      	subs	r2, r2, r0
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d54:	fb07 2210 	mls	r2, r7, r0, r2
 8000d58:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d5c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d60:	45a6      	cmp	lr, r4
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x14e>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d6c:	d202      	bcs.n	8000d74 <__udivmoddi4+0x14c>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f200 80bb 	bhi.w	8000eea <__udivmoddi4+0x2c2>
 8000d74:	4610      	mov	r0, r2
 8000d76:	eba4 040e 	sub.w	r4, r4, lr
 8000d7a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d7e:	e79f      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d80:	f1c1 0720 	rsb	r7, r1, #32
 8000d84:	408b      	lsls	r3, r1
 8000d86:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d8a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d8e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d92:	fa20 f307 	lsr.w	r3, r0, r7
 8000d96:	40fd      	lsrs	r5, r7
 8000d98:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d9c:	4323      	orrs	r3, r4
 8000d9e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000da2:	fa1f fe8c 	uxth.w	lr, ip
 8000da6:	fb09 5518 	mls	r5, r9, r8, r5
 8000daa:	0c1c      	lsrs	r4, r3, #16
 8000dac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000db0:	fb08 f50e 	mul.w	r5, r8, lr
 8000db4:	42a5      	cmp	r5, r4
 8000db6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dba:	fa00 f001 	lsl.w	r0, r0, r1
 8000dbe:	d90b      	bls.n	8000dd8 <__udivmoddi4+0x1b0>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc8:	f080 8088 	bcs.w	8000edc <__udivmoddi4+0x2b4>
 8000dcc:	42a5      	cmp	r5, r4
 8000dce:	f240 8085 	bls.w	8000edc <__udivmoddi4+0x2b4>
 8000dd2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dd6:	4464      	add	r4, ip
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	b29d      	uxth	r5, r3
 8000ddc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000de0:	fb09 4413 	mls	r4, r9, r3, r4
 8000de4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000de8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dec:	45a6      	cmp	lr, r4
 8000dee:	d908      	bls.n	8000e02 <__udivmoddi4+0x1da>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000df8:	d26c      	bcs.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfa:	45a6      	cmp	lr, r4
 8000dfc:	d96a      	bls.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfe:	3b02      	subs	r3, #2
 8000e00:	4464      	add	r4, ip
 8000e02:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e06:	fba3 9502 	umull	r9, r5, r3, r2
 8000e0a:	eba4 040e 	sub.w	r4, r4, lr
 8000e0e:	42ac      	cmp	r4, r5
 8000e10:	46c8      	mov	r8, r9
 8000e12:	46ae      	mov	lr, r5
 8000e14:	d356      	bcc.n	8000ec4 <__udivmoddi4+0x29c>
 8000e16:	d053      	beq.n	8000ec0 <__udivmoddi4+0x298>
 8000e18:	b156      	cbz	r6, 8000e30 <__udivmoddi4+0x208>
 8000e1a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e1e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e22:	fa04 f707 	lsl.w	r7, r4, r7
 8000e26:	40ca      	lsrs	r2, r1
 8000e28:	40cc      	lsrs	r4, r1
 8000e2a:	4317      	orrs	r7, r2
 8000e2c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e30:	4618      	mov	r0, r3
 8000e32:	2100      	movs	r1, #0
 8000e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e38:	f1c3 0120 	rsb	r1, r3, #32
 8000e3c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e40:	fa20 f201 	lsr.w	r2, r0, r1
 8000e44:	fa25 f101 	lsr.w	r1, r5, r1
 8000e48:	409d      	lsls	r5, r3
 8000e4a:	432a      	orrs	r2, r5
 8000e4c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1510 	mls	r5, r7, r0, r1
 8000e5c:	0c11      	lsrs	r1, r2, #16
 8000e5e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e62:	fb00 f50e 	mul.w	r5, r0, lr
 8000e66:	428d      	cmp	r5, r1
 8000e68:	fa04 f403 	lsl.w	r4, r4, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x258>
 8000e6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e72:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e76:	d22f      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e78:	428d      	cmp	r5, r1
 8000e7a:	d92d      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1b49      	subs	r1, r1, r5
 8000e82:	b292      	uxth	r2, r2
 8000e84:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e88:	fb07 1115 	mls	r1, r7, r5, r1
 8000e8c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e90:	fb05 f10e 	mul.w	r1, r5, lr
 8000e94:	4291      	cmp	r1, r2
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x282>
 8000e98:	eb1c 0202 	adds.w	r2, ip, r2
 8000e9c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ea0:	d216      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea2:	4291      	cmp	r1, r2
 8000ea4:	d914      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea6:	3d02      	subs	r5, #2
 8000ea8:	4462      	add	r2, ip
 8000eaa:	1a52      	subs	r2, r2, r1
 8000eac:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000eb0:	e738      	b.n	8000d24 <__udivmoddi4+0xfc>
 8000eb2:	4631      	mov	r1, r6
 8000eb4:	4630      	mov	r0, r6
 8000eb6:	e708      	b.n	8000cca <__udivmoddi4+0xa2>
 8000eb8:	4639      	mov	r1, r7
 8000eba:	e6e6      	b.n	8000c8a <__udivmoddi4+0x62>
 8000ebc:	4610      	mov	r0, r2
 8000ebe:	e6fb      	b.n	8000cb8 <__udivmoddi4+0x90>
 8000ec0:	4548      	cmp	r0, r9
 8000ec2:	d2a9      	bcs.n	8000e18 <__udivmoddi4+0x1f0>
 8000ec4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	e7a3      	b.n	8000e18 <__udivmoddi4+0x1f0>
 8000ed0:	4645      	mov	r5, r8
 8000ed2:	e7ea      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ed4:	462b      	mov	r3, r5
 8000ed6:	e794      	b.n	8000e02 <__udivmoddi4+0x1da>
 8000ed8:	4640      	mov	r0, r8
 8000eda:	e7d1      	b.n	8000e80 <__udivmoddi4+0x258>
 8000edc:	46d0      	mov	r8, sl
 8000ede:	e77b      	b.n	8000dd8 <__udivmoddi4+0x1b0>
 8000ee0:	3d02      	subs	r5, #2
 8000ee2:	4462      	add	r2, ip
 8000ee4:	e732      	b.n	8000d4c <__udivmoddi4+0x124>
 8000ee6:	4608      	mov	r0, r1
 8000ee8:	e70a      	b.n	8000d00 <__udivmoddi4+0xd8>
 8000eea:	4464      	add	r4, ip
 8000eec:	3802      	subs	r0, #2
 8000eee:	e742      	b.n	8000d76 <__udivmoddi4+0x14e>

08000ef0 <__aeabi_idiv0>:
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop

08000ef4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ef4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000ef8:	b09a      	sub	sp, #104	; 0x68
 8000efa:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000efc:	f000 ff99 	bl	8001e32 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f00:	f000 f99c 	bl	800123c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f04:	f000 fb1e 	bl	8001544 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f08:	f000 fae6 	bl	80014d8 <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000f0c:	f000 fab4 	bl	8001478 <MX_USB_OTG_FS_PCD_Init>
  MX_USART3_UART_Init();
 8000f10:	f000 fa82 	bl	8001418 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8000f14:	f000 fa00 	bl	8001318 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000f18:	f000 fa3e 	bl	8001398 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  HAL_StatusTypeDef ret_val = HAL_ERROR;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

  HAL_I2C_Mem_Read( &hi2c2, MPU6050_ADDR, WHO_AM_I_REG, 1, i2c_dat, 1, 1000 );
 8000f22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f26:	9302      	str	r3, [sp, #8]
 8000f28:	2301      	movs	r3, #1
 8000f2a:	9301      	str	r3, [sp, #4]
 8000f2c:	4bb9      	ldr	r3, [pc, #740]	; (8001214 <main+0x320>)
 8000f2e:	9300      	str	r3, [sp, #0]
 8000f30:	2301      	movs	r3, #1
 8000f32:	2275      	movs	r2, #117	; 0x75
 8000f34:	21d0      	movs	r1, #208	; 0xd0
 8000f36:	48b8      	ldr	r0, [pc, #736]	; (8001218 <main+0x324>)
 8000f38:	f001 ff6c 	bl	8002e14 <HAL_I2C_Mem_Read>

  if( i2c_dat[0] == 104 ){
 8000f3c:	4bb5      	ldr	r3, [pc, #724]	; (8001214 <main+0x320>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	2b68      	cmp	r3, #104	; 0x68
 8000f42:	d15a      	bne.n	8000ffa <main+0x106>
	  ret_val = HAL_OK;
 8000f44:	2300      	movs	r3, #0
 8000f46:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	  i2c_dat[0] = 0x00;
 8000f4a:	4bb2      	ldr	r3, [pc, #712]	; (8001214 <main+0x320>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	701a      	strb	r2, [r3, #0]
	  if( HAL_I2C_Mem_Write( &hi2c2, MPU6050_ADDR, PWR_MGMT_1_REG, 1, i2c_dat, 1, 1000 ) != HAL_OK ) ret_val = HAL_ERROR;
 8000f50:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f54:	9302      	str	r3, [sp, #8]
 8000f56:	2301      	movs	r3, #1
 8000f58:	9301      	str	r3, [sp, #4]
 8000f5a:	4bae      	ldr	r3, [pc, #696]	; (8001214 <main+0x320>)
 8000f5c:	9300      	str	r3, [sp, #0]
 8000f5e:	2301      	movs	r3, #1
 8000f60:	226b      	movs	r2, #107	; 0x6b
 8000f62:	21d0      	movs	r1, #208	; 0xd0
 8000f64:	48ac      	ldr	r0, [pc, #688]	; (8001218 <main+0x324>)
 8000f66:	f001 fe41 	bl	8002bec <HAL_I2C_Mem_Write>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d002      	beq.n	8000f76 <main+0x82>
 8000f70:	2301      	movs	r3, #1
 8000f72:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	  // set data rate of 1kHz
	  i2c_dat[0] = 0x07;
 8000f76:	4ba7      	ldr	r3, [pc, #668]	; (8001214 <main+0x320>)
 8000f78:	2207      	movs	r2, #7
 8000f7a:	701a      	strb	r2, [r3, #0]
	  if( HAL_I2C_Mem_Write( &hi2c2, MPU6050_ADDR, SMPLRT_DIV_REG, 1, i2c_dat, 1, 1000 ) != HAL_OK ) ret_val = HAL_ERROR;
 8000f7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f80:	9302      	str	r3, [sp, #8]
 8000f82:	2301      	movs	r3, #1
 8000f84:	9301      	str	r3, [sp, #4]
 8000f86:	4ba3      	ldr	r3, [pc, #652]	; (8001214 <main+0x320>)
 8000f88:	9300      	str	r3, [sp, #0]
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	2219      	movs	r2, #25
 8000f8e:	21d0      	movs	r1, #208	; 0xd0
 8000f90:	48a1      	ldr	r0, [pc, #644]	; (8001218 <main+0x324>)
 8000f92:	f001 fe2b 	bl	8002bec <HAL_I2C_Mem_Write>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d002      	beq.n	8000fa2 <main+0xae>
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	  // set accel config
	  // XA_ST = 0, YA_ST = 0, ZA_ST = 0, FS_SEL = 0 -> +- 2g
	  i2c_dat[0] = 0x00;
 8000fa2:	4b9c      	ldr	r3, [pc, #624]	; (8001214 <main+0x320>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	701a      	strb	r2, [r3, #0]
	  if( HAL_I2C_Mem_Write( &hi2c2, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, i2c_dat, 1, 1000 ) != HAL_OK ) ret_val = HAL_ERROR;
 8000fa8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fac:	9302      	str	r3, [sp, #8]
 8000fae:	2301      	movs	r3, #1
 8000fb0:	9301      	str	r3, [sp, #4]
 8000fb2:	4b98      	ldr	r3, [pc, #608]	; (8001214 <main+0x320>)
 8000fb4:	9300      	str	r3, [sp, #0]
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	221c      	movs	r2, #28
 8000fba:	21d0      	movs	r1, #208	; 0xd0
 8000fbc:	4896      	ldr	r0, [pc, #600]	; (8001218 <main+0x324>)
 8000fbe:	f001 fe15 	bl	8002bec <HAL_I2C_Mem_Write>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d002      	beq.n	8000fce <main+0xda>
 8000fc8:	2301      	movs	r3, #1
 8000fca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	  // set gyro config
	  // XG_ST = 0; YG_ST = 0; ZG_ST = 0; FS_SEL = 0 -> +- 250 o/s
	  i2c_dat[0] = 0x00;
 8000fce:	4b91      	ldr	r3, [pc, #580]	; (8001214 <main+0x320>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	701a      	strb	r2, [r3, #0]
	  if( HAL_I2C_Mem_Write( &hi2c2, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, i2c_dat, 1, 1000 ) != HAL_OK ) ret_val = HAL_ERROR;
 8000fd4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fd8:	9302      	str	r3, [sp, #8]
 8000fda:	2301      	movs	r3, #1
 8000fdc:	9301      	str	r3, [sp, #4]
 8000fde:	4b8d      	ldr	r3, [pc, #564]	; (8001214 <main+0x320>)
 8000fe0:	9300      	str	r3, [sp, #0]
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	2243      	movs	r2, #67	; 0x43
 8000fe6:	21d0      	movs	r1, #208	; 0xd0
 8000fe8:	488b      	ldr	r0, [pc, #556]	; (8001218 <main+0x324>)
 8000fea:	f001 fdff 	bl	8002bec <HAL_I2C_Mem_Write>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d002      	beq.n	8000ffa <main+0x106>
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  }

  char _str[50];
  uint8_t _str_len;
  if( ret_val != HAL_OK ) _str_len = sprintf(_str, "\r\nFail to init MPY6050.\r\n" );
 8000ffa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d008      	beq.n	8001014 <main+0x120>
 8001002:	1d3b      	adds	r3, r7, #4
 8001004:	4985      	ldr	r1, [pc, #532]	; (800121c <main+0x328>)
 8001006:	4618      	mov	r0, r3
 8001008:	f005 fa3e 	bl	8006488 <siprintf>
 800100c:	4603      	mov	r3, r0
 800100e:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 8001012:	e007      	b.n	8001024 <main+0x130>
  else _str_len = sprintf(_str, "\r\nSuccess to init MPY6050.\r\n" );
 8001014:	1d3b      	adds	r3, r7, #4
 8001016:	4982      	ldr	r1, [pc, #520]	; (8001220 <main+0x32c>)
 8001018:	4618      	mov	r0, r3
 800101a:	f005 fa35 	bl	8006488 <siprintf>
 800101e:	4603      	mov	r3, r0
 8001020:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
  HAL_UART_Transmit( &huart3, (uint8_t *)_str, _str_len, 100 );
 8001024:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001028:	b29a      	uxth	r2, r3
 800102a:	1d39      	adds	r1, r7, #4
 800102c:	2364      	movs	r3, #100	; 0x64
 800102e:	487d      	ldr	r0, [pc, #500]	; (8001224 <main+0x330>)
 8001030:	f003 fd46 	bl	8004ac0 <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_I2C_Mem_Read( &hi2c2, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, i2c_dat, 6, 1000 );
 8001034:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001038:	9302      	str	r3, [sp, #8]
 800103a:	2306      	movs	r3, #6
 800103c:	9301      	str	r3, [sp, #4]
 800103e:	4b75      	ldr	r3, [pc, #468]	; (8001214 <main+0x320>)
 8001040:	9300      	str	r3, [sp, #0]
 8001042:	2301      	movs	r3, #1
 8001044:	223b      	movs	r2, #59	; 0x3b
 8001046:	21d0      	movs	r1, #208	; 0xd0
 8001048:	4873      	ldr	r0, [pc, #460]	; (8001218 <main+0x324>)
 800104a:	f001 fee3 	bl	8002e14 <HAL_I2C_Mem_Read>

	  int16_t raw_x = (int16_t)( i2c_dat[0] << 8 | i2c_dat[1] );
 800104e:	4b71      	ldr	r3, [pc, #452]	; (8001214 <main+0x320>)
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	021b      	lsls	r3, r3, #8
 8001054:	b21a      	sxth	r2, r3
 8001056:	4b6f      	ldr	r3, [pc, #444]	; (8001214 <main+0x320>)
 8001058:	785b      	ldrb	r3, [r3, #1]
 800105a:	b21b      	sxth	r3, r3
 800105c:	4313      	orrs	r3, r2
 800105e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	  int16_t raw_y = (int16_t)( i2c_dat[2] << 8 | i2c_dat[3] );
 8001062:	4b6c      	ldr	r3, [pc, #432]	; (8001214 <main+0x320>)
 8001064:	789b      	ldrb	r3, [r3, #2]
 8001066:	021b      	lsls	r3, r3, #8
 8001068:	b21a      	sxth	r2, r3
 800106a:	4b6a      	ldr	r3, [pc, #424]	; (8001214 <main+0x320>)
 800106c:	78db      	ldrb	r3, [r3, #3]
 800106e:	b21b      	sxth	r3, r3
 8001070:	4313      	orrs	r3, r2
 8001072:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	  int16_t raw_z = (int16_t)( i2c_dat[4] << 8 | i2c_dat[5] );
 8001076:	4b67      	ldr	r3, [pc, #412]	; (8001214 <main+0x320>)
 8001078:	791b      	ldrb	r3, [r3, #4]
 800107a:	021b      	lsls	r3, r3, #8
 800107c:	b21a      	sxth	r2, r3
 800107e:	4b65      	ldr	r3, [pc, #404]	; (8001214 <main+0x320>)
 8001080:	795b      	ldrb	r3, [r3, #5]
 8001082:	b21b      	sxth	r3, r3
 8001084:	4313      	orrs	r3, r2
 8001086:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

	  float ax = (float)raw_x/16384.0;
 800108a:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 800108e:	ee07 3a90 	vmov	s15, r3
 8001092:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001096:	eddf 6a64 	vldr	s13, [pc, #400]	; 8001228 <main+0x334>
 800109a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800109e:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	  float ay = (float)raw_y/16384.0;
 80010a2:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80010a6:	ee07 3a90 	vmov	s15, r3
 80010aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010ae:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8001228 <main+0x334>
 80010b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010b6:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	  float az = (float)raw_z/16384.0;
 80010ba:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 80010be:	ee07 3a90 	vmov	s15, r3
 80010c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010c6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8001228 <main+0x334>
 80010ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010ce:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44

	  _str_len = sprintf(_str, "Accel: ax:%.3f  ay:%.3f  az:%.3f     ", ax, ay, az );
 80010d2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80010d4:	f7ff fa60 	bl	8000598 <__aeabi_f2d>
 80010d8:	4680      	mov	r8, r0
 80010da:	4689      	mov	r9, r1
 80010dc:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80010de:	f7ff fa5b 	bl	8000598 <__aeabi_f2d>
 80010e2:	4604      	mov	r4, r0
 80010e4:	460d      	mov	r5, r1
 80010e6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80010e8:	f7ff fa56 	bl	8000598 <__aeabi_f2d>
 80010ec:	4602      	mov	r2, r0
 80010ee:	460b      	mov	r3, r1
 80010f0:	1d38      	adds	r0, r7, #4
 80010f2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80010f6:	e9cd 4500 	strd	r4, r5, [sp]
 80010fa:	4642      	mov	r2, r8
 80010fc:	464b      	mov	r3, r9
 80010fe:	494b      	ldr	r1, [pc, #300]	; (800122c <main+0x338>)
 8001100:	f005 f9c2 	bl	8006488 <siprintf>
 8001104:	4603      	mov	r3, r0
 8001106:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	  HAL_UART_Transmit( &huart3, (uint8_t *)_str, _str_len, 100 );
 800110a:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 800110e:	b29a      	uxth	r2, r3
 8001110:	1d39      	adds	r1, r7, #4
 8001112:	2364      	movs	r3, #100	; 0x64
 8001114:	4843      	ldr	r0, [pc, #268]	; (8001224 <main+0x330>)
 8001116:	f003 fcd3 	bl	8004ac0 <HAL_UART_Transmit>

	  HAL_I2C_Mem_Read( &hi2c2, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, i2c_dat, 6, 1000 );
 800111a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800111e:	9302      	str	r3, [sp, #8]
 8001120:	2306      	movs	r3, #6
 8001122:	9301      	str	r3, [sp, #4]
 8001124:	4b3b      	ldr	r3, [pc, #236]	; (8001214 <main+0x320>)
 8001126:	9300      	str	r3, [sp, #0]
 8001128:	2301      	movs	r3, #1
 800112a:	2243      	movs	r2, #67	; 0x43
 800112c:	21d0      	movs	r1, #208	; 0xd0
 800112e:	483a      	ldr	r0, [pc, #232]	; (8001218 <main+0x324>)
 8001130:	f001 fe70 	bl	8002e14 <HAL_I2C_Mem_Read>

	  raw_x = (int16_t)( i2c_dat[0] << 8 | i2c_dat[1] );
 8001134:	4b37      	ldr	r3, [pc, #220]	; (8001214 <main+0x320>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	021b      	lsls	r3, r3, #8
 800113a:	b21a      	sxth	r2, r3
 800113c:	4b35      	ldr	r3, [pc, #212]	; (8001214 <main+0x320>)
 800113e:	785b      	ldrb	r3, [r3, #1]
 8001140:	b21b      	sxth	r3, r3
 8001142:	4313      	orrs	r3, r2
 8001144:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	  raw_y = (int16_t)( i2c_dat[2] << 8 | i2c_dat[3] );
 8001148:	4b32      	ldr	r3, [pc, #200]	; (8001214 <main+0x320>)
 800114a:	789b      	ldrb	r3, [r3, #2]
 800114c:	021b      	lsls	r3, r3, #8
 800114e:	b21a      	sxth	r2, r3
 8001150:	4b30      	ldr	r3, [pc, #192]	; (8001214 <main+0x320>)
 8001152:	78db      	ldrb	r3, [r3, #3]
 8001154:	b21b      	sxth	r3, r3
 8001156:	4313      	orrs	r3, r2
 8001158:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	  raw_z = (int16_t)( i2c_dat[4] << 8 | i2c_dat[5] );
 800115c:	4b2d      	ldr	r3, [pc, #180]	; (8001214 <main+0x320>)
 800115e:	791b      	ldrb	r3, [r3, #4]
 8001160:	021b      	lsls	r3, r3, #8
 8001162:	b21a      	sxth	r2, r3
 8001164:	4b2b      	ldr	r3, [pc, #172]	; (8001214 <main+0x320>)
 8001166:	795b      	ldrb	r3, [r3, #5]
 8001168:	b21b      	sxth	r3, r3
 800116a:	4313      	orrs	r3, r2
 800116c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

	  float gx = (float)raw_x/131.0;
 8001170:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 8001174:	ee07 3a90 	vmov	s15, r3
 8001178:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800117c:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8001230 <main+0x33c>
 8001180:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001184:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	  float gy = (float)raw_y/131.0;
 8001188:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800118c:	ee07 3a90 	vmov	s15, r3
 8001190:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001194:	eddf 6a26 	vldr	s13, [pc, #152]	; 8001230 <main+0x33c>
 8001198:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800119c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	  float gz = (float)raw_z/131.0;
 80011a0:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 80011a4:	ee07 3a90 	vmov	s15, r3
 80011a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011ac:	eddf 6a20 	vldr	s13, [pc, #128]	; 8001230 <main+0x33c>
 80011b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011b4:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

	  _str_len = sprintf(_str, "Gyro: gx:%.3f  gy:%.3f  gz:%.3f  ", gx, gy, gz );
 80011b8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80011ba:	f7ff f9ed 	bl	8000598 <__aeabi_f2d>
 80011be:	4680      	mov	r8, r0
 80011c0:	4689      	mov	r9, r1
 80011c2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80011c4:	f7ff f9e8 	bl	8000598 <__aeabi_f2d>
 80011c8:	4604      	mov	r4, r0
 80011ca:	460d      	mov	r5, r1
 80011cc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80011ce:	f7ff f9e3 	bl	8000598 <__aeabi_f2d>
 80011d2:	4602      	mov	r2, r0
 80011d4:	460b      	mov	r3, r1
 80011d6:	1d38      	adds	r0, r7, #4
 80011d8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80011dc:	e9cd 4500 	strd	r4, r5, [sp]
 80011e0:	4642      	mov	r2, r8
 80011e2:	464b      	mov	r3, r9
 80011e4:	4913      	ldr	r1, [pc, #76]	; (8001234 <main+0x340>)
 80011e6:	f005 f94f 	bl	8006488 <siprintf>
 80011ea:	4603      	mov	r3, r0
 80011ec:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	  HAL_UART_Transmit( &huart3, (uint8_t *)_str, _str_len, 100 );
 80011f0:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80011f4:	b29a      	uxth	r2, r3
 80011f6:	1d39      	adds	r1, r7, #4
 80011f8:	2364      	movs	r3, #100	; 0x64
 80011fa:	480a      	ldr	r0, [pc, #40]	; (8001224 <main+0x330>)
 80011fc:	f003 fc60 	bl	8004ac0 <HAL_UART_Transmit>

	  HAL_GPIO_TogglePin( GPIOB, LD3_Pin );
 8001200:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001204:	480c      	ldr	r0, [pc, #48]	; (8001238 <main+0x344>)
 8001206:	f001 fc46 	bl	8002a96 <HAL_GPIO_TogglePin>
	  HAL_Delay( 100 );
 800120a:	2064      	movs	r0, #100	; 0x64
 800120c:	f000 fe6e 	bl	8001eec <HAL_Delay>
  {
 8001210:	e710      	b.n	8001034 <main+0x140>
 8001212:	bf00      	nop
 8001214:	200009a8 	.word	0x200009a8
 8001218:	20000244 	.word	0x20000244
 800121c:	08008758 	.word	0x08008758
 8001220:	08008774 	.word	0x08008774
 8001224:	20000418 	.word	0x20000418
 8001228:	46800000 	.word	0x46800000
 800122c:	08008794 	.word	0x08008794
 8001230:	43030000 	.word	0x43030000
 8001234:	080087bc 	.word	0x080087bc
 8001238:	40020400 	.word	0x40020400

0800123c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b094      	sub	sp, #80	; 0x50
 8001240:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001242:	f107 0320 	add.w	r3, r7, #32
 8001246:	2230      	movs	r2, #48	; 0x30
 8001248:	2100      	movs	r1, #0
 800124a:	4618      	mov	r0, r3
 800124c:	f005 f97f 	bl	800654e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001250:	f107 030c 	add.w	r3, r7, #12
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]
 800125e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001260:	f002 fb6c 	bl	800393c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001264:	4b2a      	ldr	r3, [pc, #168]	; (8001310 <SystemClock_Config+0xd4>)
 8001266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001268:	4a29      	ldr	r2, [pc, #164]	; (8001310 <SystemClock_Config+0xd4>)
 800126a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800126e:	6413      	str	r3, [r2, #64]	; 0x40
 8001270:	4b27      	ldr	r3, [pc, #156]	; (8001310 <SystemClock_Config+0xd4>)
 8001272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001274:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001278:	60bb      	str	r3, [r7, #8]
 800127a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800127c:	4b25      	ldr	r3, [pc, #148]	; (8001314 <SystemClock_Config+0xd8>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a24      	ldr	r2, [pc, #144]	; (8001314 <SystemClock_Config+0xd8>)
 8001282:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001286:	6013      	str	r3, [r2, #0]
 8001288:	4b22      	ldr	r3, [pc, #136]	; (8001314 <SystemClock_Config+0xd8>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001290:	607b      	str	r3, [r7, #4]
 8001292:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001294:	2301      	movs	r3, #1
 8001296:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001298:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800129c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800129e:	2302      	movs	r3, #2
 80012a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80012a8:	2304      	movs	r3, #4
 80012aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 80012ac:	23d8      	movs	r3, #216	; 0xd8
 80012ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012b0:	2302      	movs	r3, #2
 80012b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80012b4:	2309      	movs	r3, #9
 80012b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012b8:	f107 0320 	add.w	r3, r7, #32
 80012bc:	4618      	mov	r0, r3
 80012be:	f002 fb9d 	bl	80039fc <HAL_RCC_OscConfig>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <SystemClock_Config+0x90>
  {
    Error_Handler();
 80012c8:	f000 f9ea 	bl	80016a0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80012cc:	f002 fb46 	bl	800395c <HAL_PWREx_EnableOverDrive>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80012d6:	f000 f9e3 	bl	80016a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012da:	230f      	movs	r3, #15
 80012dc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012de:	2302      	movs	r3, #2
 80012e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012e2:	2300      	movs	r3, #0
 80012e4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012e6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80012ea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012f0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80012f2:	f107 030c 	add.w	r3, r7, #12
 80012f6:	2107      	movs	r1, #7
 80012f8:	4618      	mov	r0, r3
 80012fa:	f002 fe23 	bl	8003f44 <HAL_RCC_ClockConfig>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8001304:	f000 f9cc 	bl	80016a0 <Error_Handler>
  }
}
 8001308:	bf00      	nop
 800130a:	3750      	adds	r7, #80	; 0x50
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	40023800 	.word	0x40023800
 8001314:	40007000 	.word	0x40007000

08001318 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800131c:	4b1b      	ldr	r3, [pc, #108]	; (800138c <MX_I2C1_Init+0x74>)
 800131e:	4a1c      	ldr	r2, [pc, #112]	; (8001390 <MX_I2C1_Init+0x78>)
 8001320:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8001322:	4b1a      	ldr	r3, [pc, #104]	; (800138c <MX_I2C1_Init+0x74>)
 8001324:	4a1b      	ldr	r2, [pc, #108]	; (8001394 <MX_I2C1_Init+0x7c>)
 8001326:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001328:	4b18      	ldr	r3, [pc, #96]	; (800138c <MX_I2C1_Init+0x74>)
 800132a:	2200      	movs	r2, #0
 800132c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800132e:	4b17      	ldr	r3, [pc, #92]	; (800138c <MX_I2C1_Init+0x74>)
 8001330:	2201      	movs	r2, #1
 8001332:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001334:	4b15      	ldr	r3, [pc, #84]	; (800138c <MX_I2C1_Init+0x74>)
 8001336:	2200      	movs	r2, #0
 8001338:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800133a:	4b14      	ldr	r3, [pc, #80]	; (800138c <MX_I2C1_Init+0x74>)
 800133c:	2200      	movs	r2, #0
 800133e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001340:	4b12      	ldr	r3, [pc, #72]	; (800138c <MX_I2C1_Init+0x74>)
 8001342:	2200      	movs	r2, #0
 8001344:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001346:	4b11      	ldr	r3, [pc, #68]	; (800138c <MX_I2C1_Init+0x74>)
 8001348:	2200      	movs	r2, #0
 800134a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800134c:	4b0f      	ldr	r3, [pc, #60]	; (800138c <MX_I2C1_Init+0x74>)
 800134e:	2200      	movs	r2, #0
 8001350:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001352:	480e      	ldr	r0, [pc, #56]	; (800138c <MX_I2C1_Init+0x74>)
 8001354:	f001 fbba 	bl	8002acc <HAL_I2C_Init>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800135e:	f000 f99f 	bl	80016a0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001362:	2100      	movs	r1, #0
 8001364:	4809      	ldr	r0, [pc, #36]	; (800138c <MX_I2C1_Init+0x74>)
 8001366:	f002 f909 	bl	800357c <HAL_I2CEx_ConfigAnalogFilter>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001370:	f000 f996 	bl	80016a0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001374:	2100      	movs	r1, #0
 8001376:	4805      	ldr	r0, [pc, #20]	; (800138c <MX_I2C1_Init+0x74>)
 8001378:	f002 f94b 	bl	8003612 <HAL_I2CEx_ConfigDigitalFilter>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001382:	f000 f98d 	bl	80016a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	200001f0 	.word	0x200001f0
 8001390:	40005400 	.word	0x40005400
 8001394:	20404768 	.word	0x20404768

08001398 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800139c:	4b1b      	ldr	r3, [pc, #108]	; (800140c <MX_I2C2_Init+0x74>)
 800139e:	4a1c      	ldr	r2, [pc, #112]	; (8001410 <MX_I2C2_Init+0x78>)
 80013a0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20404768;
 80013a2:	4b1a      	ldr	r3, [pc, #104]	; (800140c <MX_I2C2_Init+0x74>)
 80013a4:	4a1b      	ldr	r2, [pc, #108]	; (8001414 <MX_I2C2_Init+0x7c>)
 80013a6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80013a8:	4b18      	ldr	r3, [pc, #96]	; (800140c <MX_I2C2_Init+0x74>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013ae:	4b17      	ldr	r3, [pc, #92]	; (800140c <MX_I2C2_Init+0x74>)
 80013b0:	2201      	movs	r2, #1
 80013b2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013b4:	4b15      	ldr	r3, [pc, #84]	; (800140c <MX_I2C2_Init+0x74>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80013ba:	4b14      	ldr	r3, [pc, #80]	; (800140c <MX_I2C2_Init+0x74>)
 80013bc:	2200      	movs	r2, #0
 80013be:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80013c0:	4b12      	ldr	r3, [pc, #72]	; (800140c <MX_I2C2_Init+0x74>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013c6:	4b11      	ldr	r3, [pc, #68]	; (800140c <MX_I2C2_Init+0x74>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013cc:	4b0f      	ldr	r3, [pc, #60]	; (800140c <MX_I2C2_Init+0x74>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80013d2:	480e      	ldr	r0, [pc, #56]	; (800140c <MX_I2C2_Init+0x74>)
 80013d4:	f001 fb7a 	bl	8002acc <HAL_I2C_Init>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80013de:	f000 f95f 	bl	80016a0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80013e2:	2100      	movs	r1, #0
 80013e4:	4809      	ldr	r0, [pc, #36]	; (800140c <MX_I2C2_Init+0x74>)
 80013e6:	f002 f8c9 	bl	800357c <HAL_I2CEx_ConfigAnalogFilter>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80013f0:	f000 f956 	bl	80016a0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80013f4:	2100      	movs	r1, #0
 80013f6:	4805      	ldr	r0, [pc, #20]	; (800140c <MX_I2C2_Init+0x74>)
 80013f8:	f002 f90b 	bl	8003612 <HAL_I2CEx_ConfigDigitalFilter>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001402:	f000 f94d 	bl	80016a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	20000244 	.word	0x20000244
 8001410:	40005800 	.word	0x40005800
 8001414:	20404768 	.word	0x20404768

08001418 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800141c:	4b14      	ldr	r3, [pc, #80]	; (8001470 <MX_USART3_UART_Init+0x58>)
 800141e:	4a15      	ldr	r2, [pc, #84]	; (8001474 <MX_USART3_UART_Init+0x5c>)
 8001420:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001422:	4b13      	ldr	r3, [pc, #76]	; (8001470 <MX_USART3_UART_Init+0x58>)
 8001424:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001428:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800142a:	4b11      	ldr	r3, [pc, #68]	; (8001470 <MX_USART3_UART_Init+0x58>)
 800142c:	2200      	movs	r2, #0
 800142e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001430:	4b0f      	ldr	r3, [pc, #60]	; (8001470 <MX_USART3_UART_Init+0x58>)
 8001432:	2200      	movs	r2, #0
 8001434:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001436:	4b0e      	ldr	r3, [pc, #56]	; (8001470 <MX_USART3_UART_Init+0x58>)
 8001438:	2200      	movs	r2, #0
 800143a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800143c:	4b0c      	ldr	r3, [pc, #48]	; (8001470 <MX_USART3_UART_Init+0x58>)
 800143e:	220c      	movs	r2, #12
 8001440:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001442:	4b0b      	ldr	r3, [pc, #44]	; (8001470 <MX_USART3_UART_Init+0x58>)
 8001444:	2200      	movs	r2, #0
 8001446:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001448:	4b09      	ldr	r3, [pc, #36]	; (8001470 <MX_USART3_UART_Init+0x58>)
 800144a:	2200      	movs	r2, #0
 800144c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800144e:	4b08      	ldr	r3, [pc, #32]	; (8001470 <MX_USART3_UART_Init+0x58>)
 8001450:	2200      	movs	r2, #0
 8001452:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001454:	4b06      	ldr	r3, [pc, #24]	; (8001470 <MX_USART3_UART_Init+0x58>)
 8001456:	2200      	movs	r2, #0
 8001458:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800145a:	4805      	ldr	r0, [pc, #20]	; (8001470 <MX_USART3_UART_Init+0x58>)
 800145c:	f003 fae2 	bl	8004a24 <HAL_UART_Init>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001466:	f000 f91b 	bl	80016a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	20000418 	.word	0x20000418
 8001474:	40004800 	.word	0x40004800

08001478 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800147c:	4b15      	ldr	r3, [pc, #84]	; (80014d4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800147e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001482:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001484:	4b13      	ldr	r3, [pc, #76]	; (80014d4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001486:	2206      	movs	r2, #6
 8001488:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800148a:	4b12      	ldr	r3, [pc, #72]	; (80014d4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800148c:	2202      	movs	r2, #2
 800148e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001490:	4b10      	ldr	r3, [pc, #64]	; (80014d4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001492:	2200      	movs	r2, #0
 8001494:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001496:	4b0f      	ldr	r3, [pc, #60]	; (80014d4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001498:	2202      	movs	r2, #2
 800149a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800149c:	4b0d      	ldr	r3, [pc, #52]	; (80014d4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800149e:	2201      	movs	r2, #1
 80014a0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80014a2:	4b0c      	ldr	r3, [pc, #48]	; (80014d4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80014a8:	4b0a      	ldr	r3, [pc, #40]	; (80014d4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80014ae:	4b09      	ldr	r3, [pc, #36]	; (80014d4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80014b0:	2201      	movs	r2, #1
 80014b2:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80014b4:	4b07      	ldr	r3, [pc, #28]	; (80014d4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80014b6:	2201      	movs	r2, #1
 80014b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80014ba:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80014bc:	2200      	movs	r2, #0
 80014be:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80014c0:	4804      	ldr	r0, [pc, #16]	; (80014d4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80014c2:	f002 f8f2 	bl	80036aa <HAL_PCD_Init>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_USB_OTG_FS_PCD_Init+0x58>
  {
    Error_Handler();
 80014cc:	f000 f8e8 	bl	80016a0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80014d0:	bf00      	nop
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	200004a0 	.word	0x200004a0

080014d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014de:	4b18      	ldr	r3, [pc, #96]	; (8001540 <MX_DMA_Init+0x68>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	4a17      	ldr	r2, [pc, #92]	; (8001540 <MX_DMA_Init+0x68>)
 80014e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014e8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ea:	4b15      	ldr	r3, [pc, #84]	; (8001540 <MX_DMA_Init+0x68>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014f2:	607b      	str	r3, [r7, #4]
 80014f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80014f6:	2200      	movs	r2, #0
 80014f8:	2100      	movs	r1, #0
 80014fa:	200b      	movs	r0, #11
 80014fc:	f000 fdf5 	bl	80020ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001500:	200b      	movs	r0, #11
 8001502:	f000 fe0e 	bl	8002122 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001506:	2200      	movs	r2, #0
 8001508:	2100      	movs	r1, #0
 800150a:	200d      	movs	r0, #13
 800150c:	f000 fded 	bl	80020ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001510:	200d      	movs	r0, #13
 8001512:	f000 fe06 	bl	8002122 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001516:	2200      	movs	r2, #0
 8001518:	2100      	movs	r1, #0
 800151a:	2011      	movs	r0, #17
 800151c:	f000 fde5 	bl	80020ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001520:	2011      	movs	r0, #17
 8001522:	f000 fdfe 	bl	8002122 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8001526:	2200      	movs	r2, #0
 8001528:	2100      	movs	r1, #0
 800152a:	202f      	movs	r0, #47	; 0x2f
 800152c:	f000 fddd 	bl	80020ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8001530:	202f      	movs	r0, #47	; 0x2f
 8001532:	f000 fdf6 	bl	8002122 <HAL_NVIC_EnableIRQ>

}
 8001536:	bf00      	nop
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40023800 	.word	0x40023800

08001544 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b08c      	sub	sp, #48	; 0x30
 8001548:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800154a:	f107 031c 	add.w	r3, r7, #28
 800154e:	2200      	movs	r2, #0
 8001550:	601a      	str	r2, [r3, #0]
 8001552:	605a      	str	r2, [r3, #4]
 8001554:	609a      	str	r2, [r3, #8]
 8001556:	60da      	str	r2, [r3, #12]
 8001558:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800155a:	4b4d      	ldr	r3, [pc, #308]	; (8001690 <MX_GPIO_Init+0x14c>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	4a4c      	ldr	r2, [pc, #304]	; (8001690 <MX_GPIO_Init+0x14c>)
 8001560:	f043 0304 	orr.w	r3, r3, #4
 8001564:	6313      	str	r3, [r2, #48]	; 0x30
 8001566:	4b4a      	ldr	r3, [pc, #296]	; (8001690 <MX_GPIO_Init+0x14c>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	f003 0304 	and.w	r3, r3, #4
 800156e:	61bb      	str	r3, [r7, #24]
 8001570:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001572:	4b47      	ldr	r3, [pc, #284]	; (8001690 <MX_GPIO_Init+0x14c>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	4a46      	ldr	r2, [pc, #280]	; (8001690 <MX_GPIO_Init+0x14c>)
 8001578:	f043 0320 	orr.w	r3, r3, #32
 800157c:	6313      	str	r3, [r2, #48]	; 0x30
 800157e:	4b44      	ldr	r3, [pc, #272]	; (8001690 <MX_GPIO_Init+0x14c>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	f003 0320 	and.w	r3, r3, #32
 8001586:	617b      	str	r3, [r7, #20]
 8001588:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800158a:	4b41      	ldr	r3, [pc, #260]	; (8001690 <MX_GPIO_Init+0x14c>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	4a40      	ldr	r2, [pc, #256]	; (8001690 <MX_GPIO_Init+0x14c>)
 8001590:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001594:	6313      	str	r3, [r2, #48]	; 0x30
 8001596:	4b3e      	ldr	r3, [pc, #248]	; (8001690 <MX_GPIO_Init+0x14c>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800159e:	613b      	str	r3, [r7, #16]
 80015a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015a2:	4b3b      	ldr	r3, [pc, #236]	; (8001690 <MX_GPIO_Init+0x14c>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	4a3a      	ldr	r2, [pc, #232]	; (8001690 <MX_GPIO_Init+0x14c>)
 80015a8:	f043 0302 	orr.w	r3, r3, #2
 80015ac:	6313      	str	r3, [r2, #48]	; 0x30
 80015ae:	4b38      	ldr	r3, [pc, #224]	; (8001690 <MX_GPIO_Init+0x14c>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015ba:	4b35      	ldr	r3, [pc, #212]	; (8001690 <MX_GPIO_Init+0x14c>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	4a34      	ldr	r2, [pc, #208]	; (8001690 <MX_GPIO_Init+0x14c>)
 80015c0:	f043 0308 	orr.w	r3, r3, #8
 80015c4:	6313      	str	r3, [r2, #48]	; 0x30
 80015c6:	4b32      	ldr	r3, [pc, #200]	; (8001690 <MX_GPIO_Init+0x14c>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ca:	f003 0308 	and.w	r3, r3, #8
 80015ce:	60bb      	str	r3, [r7, #8]
 80015d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80015d2:	4b2f      	ldr	r3, [pc, #188]	; (8001690 <MX_GPIO_Init+0x14c>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d6:	4a2e      	ldr	r2, [pc, #184]	; (8001690 <MX_GPIO_Init+0x14c>)
 80015d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015dc:	6313      	str	r3, [r2, #48]	; 0x30
 80015de:	4b2c      	ldr	r3, [pc, #176]	; (8001690 <MX_GPIO_Init+0x14c>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015e6:	607b      	str	r3, [r7, #4]
 80015e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ea:	4b29      	ldr	r3, [pc, #164]	; (8001690 <MX_GPIO_Init+0x14c>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	4a28      	ldr	r2, [pc, #160]	; (8001690 <MX_GPIO_Init+0x14c>)
 80015f0:	f043 0301 	orr.w	r3, r3, #1
 80015f4:	6313      	str	r3, [r2, #48]	; 0x30
 80015f6:	4b26      	ldr	r3, [pc, #152]	; (8001690 <MX_GPIO_Init+0x14c>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	603b      	str	r3, [r7, #0]
 8001600:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001602:	2200      	movs	r2, #0
 8001604:	f244 0181 	movw	r1, #16513	; 0x4081
 8001608:	4822      	ldr	r0, [pc, #136]	; (8001694 <MX_GPIO_Init+0x150>)
 800160a:	f001 fa2b 	bl	8002a64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800160e:	2200      	movs	r2, #0
 8001610:	2140      	movs	r1, #64	; 0x40
 8001612:	4821      	ldr	r0, [pc, #132]	; (8001698 <MX_GPIO_Init+0x154>)
 8001614:	f001 fa26 	bl	8002a64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001618:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800161c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800161e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001622:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001624:	2300      	movs	r3, #0
 8001626:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001628:	f107 031c 	add.w	r3, r7, #28
 800162c:	4619      	mov	r1, r3
 800162e:	481b      	ldr	r0, [pc, #108]	; (800169c <MX_GPIO_Init+0x158>)
 8001630:	f001 f87c 	bl	800272c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001634:	f244 0381 	movw	r3, #16513	; 0x4081
 8001638:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800163a:	2301      	movs	r3, #1
 800163c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163e:	2300      	movs	r3, #0
 8001640:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001642:	2300      	movs	r3, #0
 8001644:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001646:	f107 031c 	add.w	r3, r7, #28
 800164a:	4619      	mov	r1, r3
 800164c:	4811      	ldr	r0, [pc, #68]	; (8001694 <MX_GPIO_Init+0x150>)
 800164e:	f001 f86d 	bl	800272c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001652:	2340      	movs	r3, #64	; 0x40
 8001654:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001656:	2301      	movs	r3, #1
 8001658:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165a:	2300      	movs	r3, #0
 800165c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165e:	2300      	movs	r3, #0
 8001660:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001662:	f107 031c 	add.w	r3, r7, #28
 8001666:	4619      	mov	r1, r3
 8001668:	480b      	ldr	r0, [pc, #44]	; (8001698 <MX_GPIO_Init+0x154>)
 800166a:	f001 f85f 	bl	800272c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800166e:	2380      	movs	r3, #128	; 0x80
 8001670:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001672:	2300      	movs	r3, #0
 8001674:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001676:	2300      	movs	r3, #0
 8001678:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800167a:	f107 031c 	add.w	r3, r7, #28
 800167e:	4619      	mov	r1, r3
 8001680:	4805      	ldr	r0, [pc, #20]	; (8001698 <MX_GPIO_Init+0x154>)
 8001682:	f001 f853 	bl	800272c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001686:	bf00      	nop
 8001688:	3730      	adds	r7, #48	; 0x30
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	40023800 	.word	0x40023800
 8001694:	40020400 	.word	0x40020400
 8001698:	40021800 	.word	0x40021800
 800169c:	40020800 	.word	0x40020800

080016a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016a4:	b672      	cpsid	i
}
 80016a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016a8:	e7fe      	b.n	80016a8 <Error_Handler+0x8>
	...

080016ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80016b2:	4b0f      	ldr	r3, [pc, #60]	; (80016f0 <HAL_MspInit+0x44>)
 80016b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b6:	4a0e      	ldr	r2, [pc, #56]	; (80016f0 <HAL_MspInit+0x44>)
 80016b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016bc:	6413      	str	r3, [r2, #64]	; 0x40
 80016be:	4b0c      	ldr	r3, [pc, #48]	; (80016f0 <HAL_MspInit+0x44>)
 80016c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c6:	607b      	str	r3, [r7, #4]
 80016c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ca:	4b09      	ldr	r3, [pc, #36]	; (80016f0 <HAL_MspInit+0x44>)
 80016cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ce:	4a08      	ldr	r2, [pc, #32]	; (80016f0 <HAL_MspInit+0x44>)
 80016d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016d4:	6453      	str	r3, [r2, #68]	; 0x44
 80016d6:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <HAL_MspInit+0x44>)
 80016d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016de:	603b      	str	r3, [r7, #0]
 80016e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016e2:	bf00      	nop
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	40023800 	.word	0x40023800

080016f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b0ac      	sub	sp, #176	; 0xb0
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016fc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	605a      	str	r2, [r3, #4]
 8001706:	609a      	str	r2, [r3, #8]
 8001708:	60da      	str	r2, [r3, #12]
 800170a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800170c:	f107 031c 	add.w	r3, r7, #28
 8001710:	2280      	movs	r2, #128	; 0x80
 8001712:	2100      	movs	r1, #0
 8001714:	4618      	mov	r0, r3
 8001716:	f004 ff1a 	bl	800654e <memset>
  if(hi2c->Instance==I2C1)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4aa1      	ldr	r2, [pc, #644]	; (80019a4 <HAL_I2C_MspInit+0x2b0>)
 8001720:	4293      	cmp	r3, r2
 8001722:	f040 809a 	bne.w	800185a <HAL_I2C_MspInit+0x166>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001726:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800172a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800172c:	2300      	movs	r3, #0
 800172e:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001730:	f107 031c 	add.w	r3, r7, #28
 8001734:	4618      	mov	r0, r3
 8001736:	f002 fe2b 	bl	8004390 <HAL_RCCEx_PeriphCLKConfig>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001740:	f7ff ffae 	bl	80016a0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001744:	4b98      	ldr	r3, [pc, #608]	; (80019a8 <HAL_I2C_MspInit+0x2b4>)
 8001746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001748:	4a97      	ldr	r2, [pc, #604]	; (80019a8 <HAL_I2C_MspInit+0x2b4>)
 800174a:	f043 0302 	orr.w	r3, r3, #2
 800174e:	6313      	str	r3, [r2, #48]	; 0x30
 8001750:	4b95      	ldr	r3, [pc, #596]	; (80019a8 <HAL_I2C_MspInit+0x2b4>)
 8001752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001754:	f003 0302 	and.w	r3, r3, #2
 8001758:	61bb      	str	r3, [r7, #24]
 800175a:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800175c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001760:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001764:	2312      	movs	r3, #18
 8001766:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176a:	2300      	movs	r3, #0
 800176c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001770:	2303      	movs	r3, #3
 8001772:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001776:	2304      	movs	r3, #4
 8001778:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800177c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001780:	4619      	mov	r1, r3
 8001782:	488a      	ldr	r0, [pc, #552]	; (80019ac <HAL_I2C_MspInit+0x2b8>)
 8001784:	f000 ffd2 	bl	800272c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001788:	4b87      	ldr	r3, [pc, #540]	; (80019a8 <HAL_I2C_MspInit+0x2b4>)
 800178a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178c:	4a86      	ldr	r2, [pc, #536]	; (80019a8 <HAL_I2C_MspInit+0x2b4>)
 800178e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001792:	6413      	str	r3, [r2, #64]	; 0x40
 8001794:	4b84      	ldr	r3, [pc, #528]	; (80019a8 <HAL_I2C_MspInit+0x2b4>)
 8001796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001798:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800179c:	617b      	str	r3, [r7, #20]
 800179e:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80017a0:	4b83      	ldr	r3, [pc, #524]	; (80019b0 <HAL_I2C_MspInit+0x2bc>)
 80017a2:	4a84      	ldr	r2, [pc, #528]	; (80019b4 <HAL_I2C_MspInit+0x2c0>)
 80017a4:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80017a6:	4b82      	ldr	r3, [pc, #520]	; (80019b0 <HAL_I2C_MspInit+0x2bc>)
 80017a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017ac:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017ae:	4b80      	ldr	r3, [pc, #512]	; (80019b0 <HAL_I2C_MspInit+0x2bc>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017b4:	4b7e      	ldr	r3, [pc, #504]	; (80019b0 <HAL_I2C_MspInit+0x2bc>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_DISABLE;
 80017ba:	4b7d      	ldr	r3, [pc, #500]	; (80019b0 <HAL_I2C_MspInit+0x2bc>)
 80017bc:	2200      	movs	r2, #0
 80017be:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017c0:	4b7b      	ldr	r3, [pc, #492]	; (80019b0 <HAL_I2C_MspInit+0x2bc>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017c6:	4b7a      	ldr	r3, [pc, #488]	; (80019b0 <HAL_I2C_MspInit+0x2bc>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_CIRCULAR;
 80017cc:	4b78      	ldr	r3, [pc, #480]	; (80019b0 <HAL_I2C_MspInit+0x2bc>)
 80017ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017d2:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80017d4:	4b76      	ldr	r3, [pc, #472]	; (80019b0 <HAL_I2C_MspInit+0x2bc>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017da:	4b75      	ldr	r3, [pc, #468]	; (80019b0 <HAL_I2C_MspInit+0x2bc>)
 80017dc:	2200      	movs	r2, #0
 80017de:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80017e0:	4873      	ldr	r0, [pc, #460]	; (80019b0 <HAL_I2C_MspInit+0x2bc>)
 80017e2:	f000 fcb9 	bl	8002158 <HAL_DMA_Init>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <HAL_I2C_MspInit+0xfc>
    {
      Error_Handler();
 80017ec:	f7ff ff58 	bl	80016a0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	4a6f      	ldr	r2, [pc, #444]	; (80019b0 <HAL_I2C_MspInit+0x2bc>)
 80017f4:	63da      	str	r2, [r3, #60]	; 0x3c
 80017f6:	4a6e      	ldr	r2, [pc, #440]	; (80019b0 <HAL_I2C_MspInit+0x2bc>)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 80017fc:	4b6e      	ldr	r3, [pc, #440]	; (80019b8 <HAL_I2C_MspInit+0x2c4>)
 80017fe:	4a6f      	ldr	r2, [pc, #444]	; (80019bc <HAL_I2C_MspInit+0x2c8>)
 8001800:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8001802:	4b6d      	ldr	r3, [pc, #436]	; (80019b8 <HAL_I2C_MspInit+0x2c4>)
 8001804:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001808:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800180a:	4b6b      	ldr	r3, [pc, #428]	; (80019b8 <HAL_I2C_MspInit+0x2c4>)
 800180c:	2240      	movs	r2, #64	; 0x40
 800180e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001810:	4b69      	ldr	r3, [pc, #420]	; (80019b8 <HAL_I2C_MspInit+0x2c4>)
 8001812:	2200      	movs	r2, #0
 8001814:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_DISABLE;
 8001816:	4b68      	ldr	r3, [pc, #416]	; (80019b8 <HAL_I2C_MspInit+0x2c4>)
 8001818:	2200      	movs	r2, #0
 800181a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800181c:	4b66      	ldr	r3, [pc, #408]	; (80019b8 <HAL_I2C_MspInit+0x2c4>)
 800181e:	2200      	movs	r2, #0
 8001820:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001822:	4b65      	ldr	r3, [pc, #404]	; (80019b8 <HAL_I2C_MspInit+0x2c4>)
 8001824:	2200      	movs	r2, #0
 8001826:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_CIRCULAR;
 8001828:	4b63      	ldr	r3, [pc, #396]	; (80019b8 <HAL_I2C_MspInit+0x2c4>)
 800182a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800182e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001830:	4b61      	ldr	r3, [pc, #388]	; (80019b8 <HAL_I2C_MspInit+0x2c4>)
 8001832:	2200      	movs	r2, #0
 8001834:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001836:	4b60      	ldr	r3, [pc, #384]	; (80019b8 <HAL_I2C_MspInit+0x2c4>)
 8001838:	2200      	movs	r2, #0
 800183a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800183c:	485e      	ldr	r0, [pc, #376]	; (80019b8 <HAL_I2C_MspInit+0x2c4>)
 800183e:	f000 fc8b 	bl	8002158 <HAL_DMA_Init>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <HAL_I2C_MspInit+0x158>
    {
      Error_Handler();
 8001848:	f7ff ff2a 	bl	80016a0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	4a5a      	ldr	r2, [pc, #360]	; (80019b8 <HAL_I2C_MspInit+0x2c4>)
 8001850:	639a      	str	r2, [r3, #56]	; 0x38
 8001852:	4a59      	ldr	r2, [pc, #356]	; (80019b8 <HAL_I2C_MspInit+0x2c4>)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001858:	e09f      	b.n	800199a <HAL_I2C_MspInit+0x2a6>
  else if(hi2c->Instance==I2C2)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a58      	ldr	r2, [pc, #352]	; (80019c0 <HAL_I2C_MspInit+0x2cc>)
 8001860:	4293      	cmp	r3, r2
 8001862:	f040 809a 	bne.w	800199a <HAL_I2C_MspInit+0x2a6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001866:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800186a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800186c:	2300      	movs	r3, #0
 800186e:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001870:	f107 031c 	add.w	r3, r7, #28
 8001874:	4618      	mov	r0, r3
 8001876:	f002 fd8b 	bl	8004390 <HAL_RCCEx_PeriphCLKConfig>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <HAL_I2C_MspInit+0x190>
      Error_Handler();
 8001880:	f7ff ff0e 	bl	80016a0 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001884:	4b48      	ldr	r3, [pc, #288]	; (80019a8 <HAL_I2C_MspInit+0x2b4>)
 8001886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001888:	4a47      	ldr	r2, [pc, #284]	; (80019a8 <HAL_I2C_MspInit+0x2b4>)
 800188a:	f043 0320 	orr.w	r3, r3, #32
 800188e:	6313      	str	r3, [r2, #48]	; 0x30
 8001890:	4b45      	ldr	r3, [pc, #276]	; (80019a8 <HAL_I2C_MspInit+0x2b4>)
 8001892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001894:	f003 0320 	and.w	r3, r3, #32
 8001898:	613b      	str	r3, [r7, #16]
 800189a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800189c:	2303      	movs	r3, #3
 800189e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018a2:	2312      	movs	r3, #18
 80018a4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a8:	2300      	movs	r3, #0
 80018aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ae:	2303      	movs	r3, #3
 80018b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80018b4:	2304      	movs	r3, #4
 80018b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80018ba:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80018be:	4619      	mov	r1, r3
 80018c0:	4840      	ldr	r0, [pc, #256]	; (80019c4 <HAL_I2C_MspInit+0x2d0>)
 80018c2:	f000 ff33 	bl	800272c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80018c6:	4b38      	ldr	r3, [pc, #224]	; (80019a8 <HAL_I2C_MspInit+0x2b4>)
 80018c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ca:	4a37      	ldr	r2, [pc, #220]	; (80019a8 <HAL_I2C_MspInit+0x2b4>)
 80018cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80018d0:	6413      	str	r3, [r2, #64]	; 0x40
 80018d2:	4b35      	ldr	r3, [pc, #212]	; (80019a8 <HAL_I2C_MspInit+0x2b4>)
 80018d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	68fb      	ldr	r3, [r7, #12]
    hdma_i2c2_rx.Instance = DMA1_Stream2;
 80018de:	4b3a      	ldr	r3, [pc, #232]	; (80019c8 <HAL_I2C_MspInit+0x2d4>)
 80018e0:	4a3a      	ldr	r2, [pc, #232]	; (80019cc <HAL_I2C_MspInit+0x2d8>)
 80018e2:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 80018e4:	4b38      	ldr	r3, [pc, #224]	; (80019c8 <HAL_I2C_MspInit+0x2d4>)
 80018e6:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80018ea:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018ec:	4b36      	ldr	r3, [pc, #216]	; (80019c8 <HAL_I2C_MspInit+0x2d4>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018f2:	4b35      	ldr	r3, [pc, #212]	; (80019c8 <HAL_I2C_MspInit+0x2d4>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80018f8:	4b33      	ldr	r3, [pc, #204]	; (80019c8 <HAL_I2C_MspInit+0x2d4>)
 80018fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018fe:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001900:	4b31      	ldr	r3, [pc, #196]	; (80019c8 <HAL_I2C_MspInit+0x2d4>)
 8001902:	2200      	movs	r2, #0
 8001904:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001906:	4b30      	ldr	r3, [pc, #192]	; (80019c8 <HAL_I2C_MspInit+0x2d4>)
 8001908:	2200      	movs	r2, #0
 800190a:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_CIRCULAR;
 800190c:	4b2e      	ldr	r3, [pc, #184]	; (80019c8 <HAL_I2C_MspInit+0x2d4>)
 800190e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001912:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001914:	4b2c      	ldr	r3, [pc, #176]	; (80019c8 <HAL_I2C_MspInit+0x2d4>)
 8001916:	2200      	movs	r2, #0
 8001918:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800191a:	4b2b      	ldr	r3, [pc, #172]	; (80019c8 <HAL_I2C_MspInit+0x2d4>)
 800191c:	2200      	movs	r2, #0
 800191e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8001920:	4829      	ldr	r0, [pc, #164]	; (80019c8 <HAL_I2C_MspInit+0x2d4>)
 8001922:	f000 fc19 	bl	8002158 <HAL_DMA_Init>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <HAL_I2C_MspInit+0x23c>
      Error_Handler();
 800192c:	f7ff feb8 	bl	80016a0 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	4a25      	ldr	r2, [pc, #148]	; (80019c8 <HAL_I2C_MspInit+0x2d4>)
 8001934:	63da      	str	r2, [r3, #60]	; 0x3c
 8001936:	4a24      	ldr	r2, [pc, #144]	; (80019c8 <HAL_I2C_MspInit+0x2d4>)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 800193c:	4b24      	ldr	r3, [pc, #144]	; (80019d0 <HAL_I2C_MspInit+0x2dc>)
 800193e:	4a25      	ldr	r2, [pc, #148]	; (80019d4 <HAL_I2C_MspInit+0x2e0>)
 8001940:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 8001942:	4b23      	ldr	r3, [pc, #140]	; (80019d0 <HAL_I2C_MspInit+0x2dc>)
 8001944:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001948:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800194a:	4b21      	ldr	r3, [pc, #132]	; (80019d0 <HAL_I2C_MspInit+0x2dc>)
 800194c:	2240      	movs	r2, #64	; 0x40
 800194e:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001950:	4b1f      	ldr	r3, [pc, #124]	; (80019d0 <HAL_I2C_MspInit+0x2dc>)
 8001952:	2200      	movs	r2, #0
 8001954:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001956:	4b1e      	ldr	r3, [pc, #120]	; (80019d0 <HAL_I2C_MspInit+0x2dc>)
 8001958:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800195c:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800195e:	4b1c      	ldr	r3, [pc, #112]	; (80019d0 <HAL_I2C_MspInit+0x2dc>)
 8001960:	2200      	movs	r2, #0
 8001962:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001964:	4b1a      	ldr	r3, [pc, #104]	; (80019d0 <HAL_I2C_MspInit+0x2dc>)
 8001966:	2200      	movs	r2, #0
 8001968:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_CIRCULAR;
 800196a:	4b19      	ldr	r3, [pc, #100]	; (80019d0 <HAL_I2C_MspInit+0x2dc>)
 800196c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001970:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001972:	4b17      	ldr	r3, [pc, #92]	; (80019d0 <HAL_I2C_MspInit+0x2dc>)
 8001974:	2200      	movs	r2, #0
 8001976:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001978:	4b15      	ldr	r3, [pc, #84]	; (80019d0 <HAL_I2C_MspInit+0x2dc>)
 800197a:	2200      	movs	r2, #0
 800197c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 800197e:	4814      	ldr	r0, [pc, #80]	; (80019d0 <HAL_I2C_MspInit+0x2dc>)
 8001980:	f000 fbea 	bl	8002158 <HAL_DMA_Init>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <HAL_I2C_MspInit+0x29a>
      Error_Handler();
 800198a:	f7ff fe89 	bl	80016a0 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4a0f      	ldr	r2, [pc, #60]	; (80019d0 <HAL_I2C_MspInit+0x2dc>)
 8001992:	639a      	str	r2, [r3, #56]	; 0x38
 8001994:	4a0e      	ldr	r2, [pc, #56]	; (80019d0 <HAL_I2C_MspInit+0x2dc>)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6393      	str	r3, [r2, #56]	; 0x38
}
 800199a:	bf00      	nop
 800199c:	37b0      	adds	r7, #176	; 0xb0
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	40005400 	.word	0x40005400
 80019a8:	40023800 	.word	0x40023800
 80019ac:	40020400 	.word	0x40020400
 80019b0:	20000298 	.word	0x20000298
 80019b4:	40026010 	.word	0x40026010
 80019b8:	200002f8 	.word	0x200002f8
 80019bc:	400260a0 	.word	0x400260a0
 80019c0:	40005800 	.word	0x40005800
 80019c4:	40021400 	.word	0x40021400
 80019c8:	20000358 	.word	0x20000358
 80019cc:	40026040 	.word	0x40026040
 80019d0:	200003b8 	.word	0x200003b8
 80019d4:	400260b8 	.word	0x400260b8

080019d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b0aa      	sub	sp, #168	; 0xa8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]
 80019e8:	605a      	str	r2, [r3, #4]
 80019ea:	609a      	str	r2, [r3, #8]
 80019ec:	60da      	str	r2, [r3, #12]
 80019ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019f0:	f107 0314 	add.w	r3, r7, #20
 80019f4:	2280      	movs	r2, #128	; 0x80
 80019f6:	2100      	movs	r1, #0
 80019f8:	4618      	mov	r0, r3
 80019fa:	f004 fda8 	bl	800654e <memset>
  if(huart->Instance==USART3)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a22      	ldr	r2, [pc, #136]	; (8001a8c <HAL_UART_MspInit+0xb4>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d13c      	bne.n	8001a82 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001a08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a0c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a12:	f107 0314 	add.w	r3, r7, #20
 8001a16:	4618      	mov	r0, r3
 8001a18:	f002 fcba 	bl	8004390 <HAL_RCCEx_PeriphCLKConfig>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001a22:	f7ff fe3d 	bl	80016a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a26:	4b1a      	ldr	r3, [pc, #104]	; (8001a90 <HAL_UART_MspInit+0xb8>)
 8001a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2a:	4a19      	ldr	r2, [pc, #100]	; (8001a90 <HAL_UART_MspInit+0xb8>)
 8001a2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a30:	6413      	str	r3, [r2, #64]	; 0x40
 8001a32:	4b17      	ldr	r3, [pc, #92]	; (8001a90 <HAL_UART_MspInit+0xb8>)
 8001a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a3a:	613b      	str	r3, [r7, #16]
 8001a3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a3e:	4b14      	ldr	r3, [pc, #80]	; (8001a90 <HAL_UART_MspInit+0xb8>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a42:	4a13      	ldr	r2, [pc, #76]	; (8001a90 <HAL_UART_MspInit+0xb8>)
 8001a44:	f043 0308 	orr.w	r3, r3, #8
 8001a48:	6313      	str	r3, [r2, #48]	; 0x30
 8001a4a:	4b11      	ldr	r3, [pc, #68]	; (8001a90 <HAL_UART_MspInit+0xb8>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4e:	f003 0308 	and.w	r3, r3, #8
 8001a52:	60fb      	str	r3, [r7, #12]
 8001a54:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001a56:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a5a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a5e:	2302      	movs	r3, #2
 8001a60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a64:	2300      	movs	r3, #0
 8001a66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a70:	2307      	movs	r3, #7
 8001a72:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a76:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	4805      	ldr	r0, [pc, #20]	; (8001a94 <HAL_UART_MspInit+0xbc>)
 8001a7e:	f000 fe55 	bl	800272c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001a82:	bf00      	nop
 8001a84:	37a8      	adds	r7, #168	; 0xa8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	40004800 	.word	0x40004800
 8001a90:	40023800 	.word	0x40023800
 8001a94:	40020c00 	.word	0x40020c00

08001a98 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b0aa      	sub	sp, #168	; 0xa8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	605a      	str	r2, [r3, #4]
 8001aaa:	609a      	str	r2, [r3, #8]
 8001aac:	60da      	str	r2, [r3, #12]
 8001aae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ab0:	f107 0314 	add.w	r3, r7, #20
 8001ab4:	2280      	movs	r2, #128	; 0x80
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f004 fd48 	bl	800654e <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ac6:	d159      	bne.n	8001b7c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001ac8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001acc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ad4:	f107 0314 	add.w	r3, r7, #20
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f002 fc59 	bl	8004390 <HAL_RCCEx_PeriphCLKConfig>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001ae4:	f7ff fddc 	bl	80016a0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ae8:	4b26      	ldr	r3, [pc, #152]	; (8001b84 <HAL_PCD_MspInit+0xec>)
 8001aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aec:	4a25      	ldr	r2, [pc, #148]	; (8001b84 <HAL_PCD_MspInit+0xec>)
 8001aee:	f043 0301 	orr.w	r3, r3, #1
 8001af2:	6313      	str	r3, [r2, #48]	; 0x30
 8001af4:	4b23      	ldr	r3, [pc, #140]	; (8001b84 <HAL_PCD_MspInit+0xec>)
 8001af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af8:	f003 0301 	and.w	r3, r3, #1
 8001afc:	613b      	str	r3, [r7, #16]
 8001afe:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001b00:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001b04:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b08:	2302      	movs	r3, #2
 8001b0a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b14:	2303      	movs	r3, #3
 8001b16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001b1a:	230a      	movs	r3, #10
 8001b1c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b20:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001b24:	4619      	mov	r1, r3
 8001b26:	4818      	ldr	r0, [pc, #96]	; (8001b88 <HAL_PCD_MspInit+0xf0>)
 8001b28:	f000 fe00 	bl	800272c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001b2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b30:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b34:	2300      	movs	r3, #0
 8001b36:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001b40:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001b44:	4619      	mov	r1, r3
 8001b46:	4810      	ldr	r0, [pc, #64]	; (8001b88 <HAL_PCD_MspInit+0xf0>)
 8001b48:	f000 fdf0 	bl	800272c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001b4c:	4b0d      	ldr	r3, [pc, #52]	; (8001b84 <HAL_PCD_MspInit+0xec>)
 8001b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b50:	4a0c      	ldr	r2, [pc, #48]	; (8001b84 <HAL_PCD_MspInit+0xec>)
 8001b52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b56:	6353      	str	r3, [r2, #52]	; 0x34
 8001b58:	4b0a      	ldr	r3, [pc, #40]	; (8001b84 <HAL_PCD_MspInit+0xec>)
 8001b5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b60:	60fb      	str	r3, [r7, #12]
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	4b07      	ldr	r3, [pc, #28]	; (8001b84 <HAL_PCD_MspInit+0xec>)
 8001b66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b68:	4a06      	ldr	r2, [pc, #24]	; (8001b84 <HAL_PCD_MspInit+0xec>)
 8001b6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b6e:	6453      	str	r3, [r2, #68]	; 0x44
 8001b70:	4b04      	ldr	r3, [pc, #16]	; (8001b84 <HAL_PCD_MspInit+0xec>)
 8001b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b78:	60bb      	str	r3, [r7, #8]
 8001b7a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001b7c:	bf00      	nop
 8001b7e:	37a8      	adds	r7, #168	; 0xa8
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	40023800 	.word	0x40023800
 8001b88:	40020000 	.word	0x40020000

08001b8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b90:	e7fe      	b.n	8001b90 <NMI_Handler+0x4>

08001b92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b92:	b480      	push	{r7}
 8001b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b96:	e7fe      	b.n	8001b96 <HardFault_Handler+0x4>

08001b98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b9c:	e7fe      	b.n	8001b9c <MemManage_Handler+0x4>

08001b9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ba2:	e7fe      	b.n	8001ba2 <BusFault_Handler+0x4>

08001ba4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ba8:	e7fe      	b.n	8001ba8 <UsageFault_Handler+0x4>

08001baa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001baa:	b480      	push	{r7}
 8001bac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bae:	bf00      	nop
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bbc:	bf00      	nop
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr

08001bc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bca:	bf00      	nop
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr

08001bd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bd8:	f000 f968 	bl	8001eac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bdc:	bf00      	nop
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001be4:	4802      	ldr	r0, [pc, #8]	; (8001bf0 <DMA1_Stream0_IRQHandler+0x10>)
 8001be6:	f000 fb65 	bl	80022b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001bea:	bf00      	nop
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	20000298 	.word	0x20000298

08001bf4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8001bf8:	4802      	ldr	r0, [pc, #8]	; (8001c04 <DMA1_Stream2_IRQHandler+0x10>)
 8001bfa:	f000 fb5b 	bl	80022b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001bfe:	bf00      	nop
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	20000358 	.word	0x20000358

08001c08 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001c0c:	4802      	ldr	r0, [pc, #8]	; (8001c18 <DMA1_Stream6_IRQHandler+0x10>)
 8001c0e:	f000 fb51 	bl	80022b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001c12:	bf00      	nop
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	200002f8 	.word	0x200002f8

08001c1c <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8001c20:	4802      	ldr	r0, [pc, #8]	; (8001c2c <DMA1_Stream7_IRQHandler+0x10>)
 8001c22:	f000 fb47 	bl	80022b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8001c26:	bf00      	nop
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	200003b8 	.word	0x200003b8

08001c30 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  return 1;
 8001c34:	2301      	movs	r3, #1
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr

08001c40 <_kill>:

int _kill(int pid, int sig)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c4a:	f004 fcd3 	bl	80065f4 <__errno>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2216      	movs	r2, #22
 8001c52:	601a      	str	r2, [r3, #0]
  return -1;
 8001c54:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3708      	adds	r7, #8
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <_exit>:

void _exit (int status)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c68:	f04f 31ff 	mov.w	r1, #4294967295
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f7ff ffe7 	bl	8001c40 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c72:	e7fe      	b.n	8001c72 <_exit+0x12>

08001c74 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b086      	sub	sp, #24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	60f8      	str	r0, [r7, #12]
 8001c7c:	60b9      	str	r1, [r7, #8]
 8001c7e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c80:	2300      	movs	r3, #0
 8001c82:	617b      	str	r3, [r7, #20]
 8001c84:	e00a      	b.n	8001c9c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c86:	f3af 8000 	nop.w
 8001c8a:	4601      	mov	r1, r0
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	1c5a      	adds	r2, r3, #1
 8001c90:	60ba      	str	r2, [r7, #8]
 8001c92:	b2ca      	uxtb	r2, r1
 8001c94:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	3301      	adds	r3, #1
 8001c9a:	617b      	str	r3, [r7, #20]
 8001c9c:	697a      	ldr	r2, [r7, #20]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	dbf0      	blt.n	8001c86 <_read+0x12>
  }

  return len;
 8001ca4:	687b      	ldr	r3, [r7, #4]
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3718      	adds	r7, #24
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b086      	sub	sp, #24
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	60f8      	str	r0, [r7, #12]
 8001cb6:	60b9      	str	r1, [r7, #8]
 8001cb8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cba:	2300      	movs	r3, #0
 8001cbc:	617b      	str	r3, [r7, #20]
 8001cbe:	e009      	b.n	8001cd4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	1c5a      	adds	r2, r3, #1
 8001cc4:	60ba      	str	r2, [r7, #8]
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	617b      	str	r3, [r7, #20]
 8001cd4:	697a      	ldr	r2, [r7, #20]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	dbf1      	blt.n	8001cc0 <_write+0x12>
  }
  return len;
 8001cdc:	687b      	ldr	r3, [r7, #4]
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3718      	adds	r7, #24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <_close>:

int _close(int file)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	b083      	sub	sp, #12
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001cee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	370c      	adds	r7, #12
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr

08001cfe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cfe:	b480      	push	{r7}
 8001d00:	b083      	sub	sp, #12
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
 8001d06:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d0e:	605a      	str	r2, [r3, #4]
  return 0;
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	370c      	adds	r7, #12
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr

08001d1e <_isatty>:

int _isatty(int file)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	b083      	sub	sp, #12
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d26:	2301      	movs	r3, #1
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b085      	sub	sp, #20
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	60b9      	str	r1, [r7, #8]
 8001d3e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3714      	adds	r7, #20
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
	...

08001d50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b086      	sub	sp, #24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d58:	4a14      	ldr	r2, [pc, #80]	; (8001dac <_sbrk+0x5c>)
 8001d5a:	4b15      	ldr	r3, [pc, #84]	; (8001db0 <_sbrk+0x60>)
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d64:	4b13      	ldr	r3, [pc, #76]	; (8001db4 <_sbrk+0x64>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d102      	bne.n	8001d72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d6c:	4b11      	ldr	r3, [pc, #68]	; (8001db4 <_sbrk+0x64>)
 8001d6e:	4a12      	ldr	r2, [pc, #72]	; (8001db8 <_sbrk+0x68>)
 8001d70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d72:	4b10      	ldr	r3, [pc, #64]	; (8001db4 <_sbrk+0x64>)
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4413      	add	r3, r2
 8001d7a:	693a      	ldr	r2, [r7, #16]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d207      	bcs.n	8001d90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d80:	f004 fc38 	bl	80065f4 <__errno>
 8001d84:	4603      	mov	r3, r0
 8001d86:	220c      	movs	r2, #12
 8001d88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d8e:	e009      	b.n	8001da4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d90:	4b08      	ldr	r3, [pc, #32]	; (8001db4 <_sbrk+0x64>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d96:	4b07      	ldr	r3, [pc, #28]	; (8001db4 <_sbrk+0x64>)
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	4a05      	ldr	r2, [pc, #20]	; (8001db4 <_sbrk+0x64>)
 8001da0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001da2:	68fb      	ldr	r3, [r7, #12]
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3718      	adds	r7, #24
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	20040000 	.word	0x20040000
 8001db0:	00000400 	.word	0x00000400
 8001db4:	200009b4 	.word	0x200009b4
 8001db8:	20000b08 	.word	0x20000b08

08001dbc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001dc0:	4b06      	ldr	r3, [pc, #24]	; (8001ddc <SystemInit+0x20>)
 8001dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dc6:	4a05      	ldr	r2, [pc, #20]	; (8001ddc <SystemInit+0x20>)
 8001dc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001dcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dd0:	bf00      	nop
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	e000ed00 	.word	0xe000ed00

08001de0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001de0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e18 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001de4:	480d      	ldr	r0, [pc, #52]	; (8001e1c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001de6:	490e      	ldr	r1, [pc, #56]	; (8001e20 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001de8:	4a0e      	ldr	r2, [pc, #56]	; (8001e24 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001dea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dec:	e002      	b.n	8001df4 <LoopCopyDataInit>

08001dee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001df0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001df2:	3304      	adds	r3, #4

08001df4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001df4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001df6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001df8:	d3f9      	bcc.n	8001dee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dfa:	4a0b      	ldr	r2, [pc, #44]	; (8001e28 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001dfc:	4c0b      	ldr	r4, [pc, #44]	; (8001e2c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001dfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e00:	e001      	b.n	8001e06 <LoopFillZerobss>

08001e02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e04:	3204      	adds	r2, #4

08001e06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e08:	d3fb      	bcc.n	8001e02 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001e0a:	f7ff ffd7 	bl	8001dbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e0e:	f004 fbf7 	bl	8006600 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e12:	f7ff f86f 	bl	8000ef4 <main>
  bx  lr    
 8001e16:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e18:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8001e1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e20:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001e24:	08008b84 	.word	0x08008b84
  ldr r2, =_sbss
 8001e28:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001e2c:	20000b08 	.word	0x20000b08

08001e30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e30:	e7fe      	b.n	8001e30 <ADC_IRQHandler>

08001e32 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e36:	2003      	movs	r0, #3
 8001e38:	f000 f94c 	bl	80020d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e3c:	2000      	movs	r0, #0
 8001e3e:	f000 f805 	bl	8001e4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e42:	f7ff fc33 	bl	80016ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e46:	2300      	movs	r3, #0
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e54:	4b12      	ldr	r3, [pc, #72]	; (8001ea0 <HAL_InitTick+0x54>)
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	4b12      	ldr	r3, [pc, #72]	; (8001ea4 <HAL_InitTick+0x58>)
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e62:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f000 f967 	bl	800213e <HAL_SYSTICK_Config>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e00e      	b.n	8001e98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2b0f      	cmp	r3, #15
 8001e7e:	d80a      	bhi.n	8001e96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e80:	2200      	movs	r2, #0
 8001e82:	6879      	ldr	r1, [r7, #4]
 8001e84:	f04f 30ff 	mov.w	r0, #4294967295
 8001e88:	f000 f92f 	bl	80020ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e8c:	4a06      	ldr	r2, [pc, #24]	; (8001ea8 <HAL_InitTick+0x5c>)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e92:	2300      	movs	r3, #0
 8001e94:	e000      	b.n	8001e98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3708      	adds	r7, #8
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	20000000 	.word	0x20000000
 8001ea4:	20000008 	.word	0x20000008
 8001ea8:	20000004 	.word	0x20000004

08001eac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001eb0:	4b06      	ldr	r3, [pc, #24]	; (8001ecc <HAL_IncTick+0x20>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	4b06      	ldr	r3, [pc, #24]	; (8001ed0 <HAL_IncTick+0x24>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4413      	add	r3, r2
 8001ebc:	4a04      	ldr	r2, [pc, #16]	; (8001ed0 <HAL_IncTick+0x24>)
 8001ebe:	6013      	str	r3, [r2, #0]
}
 8001ec0:	bf00      	nop
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	20000008 	.word	0x20000008
 8001ed0:	200009b8 	.word	0x200009b8

08001ed4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ed8:	4b03      	ldr	r3, [pc, #12]	; (8001ee8 <HAL_GetTick+0x14>)
 8001eda:	681b      	ldr	r3, [r3, #0]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	200009b8 	.word	0x200009b8

08001eec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ef4:	f7ff ffee 	bl	8001ed4 <HAL_GetTick>
 8001ef8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f04:	d005      	beq.n	8001f12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f06:	4b0a      	ldr	r3, [pc, #40]	; (8001f30 <HAL_Delay+0x44>)
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	4413      	add	r3, r2
 8001f10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f12:	bf00      	nop
 8001f14:	f7ff ffde 	bl	8001ed4 <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	68fa      	ldr	r2, [r7, #12]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d8f7      	bhi.n	8001f14 <HAL_Delay+0x28>
  {
  }
}
 8001f24:	bf00      	nop
 8001f26:	bf00      	nop
 8001f28:	3710      	adds	r7, #16
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	20000008 	.word	0x20000008

08001f34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b085      	sub	sp, #20
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f003 0307 	and.w	r3, r3, #7
 8001f42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f44:	4b0b      	ldr	r3, [pc, #44]	; (8001f74 <__NVIC_SetPriorityGrouping+0x40>)
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f4a:	68ba      	ldr	r2, [r7, #8]
 8001f4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f50:	4013      	ands	r3, r2
 8001f52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001f5c:	4b06      	ldr	r3, [pc, #24]	; (8001f78 <__NVIC_SetPriorityGrouping+0x44>)
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f62:	4a04      	ldr	r2, [pc, #16]	; (8001f74 <__NVIC_SetPriorityGrouping+0x40>)
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	60d3      	str	r3, [r2, #12]
}
 8001f68:	bf00      	nop
 8001f6a:	3714      	adds	r7, #20
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr
 8001f74:	e000ed00 	.word	0xe000ed00
 8001f78:	05fa0000 	.word	0x05fa0000

08001f7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f80:	4b04      	ldr	r3, [pc, #16]	; (8001f94 <__NVIC_GetPriorityGrouping+0x18>)
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	0a1b      	lsrs	r3, r3, #8
 8001f86:	f003 0307 	and.w	r3, r3, #7
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	e000ed00 	.word	0xe000ed00

08001f98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	db0b      	blt.n	8001fc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001faa:	79fb      	ldrb	r3, [r7, #7]
 8001fac:	f003 021f 	and.w	r2, r3, #31
 8001fb0:	4907      	ldr	r1, [pc, #28]	; (8001fd0 <__NVIC_EnableIRQ+0x38>)
 8001fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb6:	095b      	lsrs	r3, r3, #5
 8001fb8:	2001      	movs	r0, #1
 8001fba:	fa00 f202 	lsl.w	r2, r0, r2
 8001fbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fc2:	bf00      	nop
 8001fc4:	370c      	adds	r7, #12
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	e000e100 	.word	0xe000e100

08001fd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	4603      	mov	r3, r0
 8001fdc:	6039      	str	r1, [r7, #0]
 8001fde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fe0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	db0a      	blt.n	8001ffe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	b2da      	uxtb	r2, r3
 8001fec:	490c      	ldr	r1, [pc, #48]	; (8002020 <__NVIC_SetPriority+0x4c>)
 8001fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff2:	0112      	lsls	r2, r2, #4
 8001ff4:	b2d2      	uxtb	r2, r2
 8001ff6:	440b      	add	r3, r1
 8001ff8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ffc:	e00a      	b.n	8002014 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	b2da      	uxtb	r2, r3
 8002002:	4908      	ldr	r1, [pc, #32]	; (8002024 <__NVIC_SetPriority+0x50>)
 8002004:	79fb      	ldrb	r3, [r7, #7]
 8002006:	f003 030f 	and.w	r3, r3, #15
 800200a:	3b04      	subs	r3, #4
 800200c:	0112      	lsls	r2, r2, #4
 800200e:	b2d2      	uxtb	r2, r2
 8002010:	440b      	add	r3, r1
 8002012:	761a      	strb	r2, [r3, #24]
}
 8002014:	bf00      	nop
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr
 8002020:	e000e100 	.word	0xe000e100
 8002024:	e000ed00 	.word	0xe000ed00

08002028 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002028:	b480      	push	{r7}
 800202a:	b089      	sub	sp, #36	; 0x24
 800202c:	af00      	add	r7, sp, #0
 800202e:	60f8      	str	r0, [r7, #12]
 8002030:	60b9      	str	r1, [r7, #8]
 8002032:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	f003 0307 	and.w	r3, r3, #7
 800203a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	f1c3 0307 	rsb	r3, r3, #7
 8002042:	2b04      	cmp	r3, #4
 8002044:	bf28      	it	cs
 8002046:	2304      	movcs	r3, #4
 8002048:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	3304      	adds	r3, #4
 800204e:	2b06      	cmp	r3, #6
 8002050:	d902      	bls.n	8002058 <NVIC_EncodePriority+0x30>
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	3b03      	subs	r3, #3
 8002056:	e000      	b.n	800205a <NVIC_EncodePriority+0x32>
 8002058:	2300      	movs	r3, #0
 800205a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800205c:	f04f 32ff 	mov.w	r2, #4294967295
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	fa02 f303 	lsl.w	r3, r2, r3
 8002066:	43da      	mvns	r2, r3
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	401a      	ands	r2, r3
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002070:	f04f 31ff 	mov.w	r1, #4294967295
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	fa01 f303 	lsl.w	r3, r1, r3
 800207a:	43d9      	mvns	r1, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002080:	4313      	orrs	r3, r2
         );
}
 8002082:	4618      	mov	r0, r3
 8002084:	3724      	adds	r7, #36	; 0x24
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
	...

08002090 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	3b01      	subs	r3, #1
 800209c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020a0:	d301      	bcc.n	80020a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020a2:	2301      	movs	r3, #1
 80020a4:	e00f      	b.n	80020c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020a6:	4a0a      	ldr	r2, [pc, #40]	; (80020d0 <SysTick_Config+0x40>)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	3b01      	subs	r3, #1
 80020ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020ae:	210f      	movs	r1, #15
 80020b0:	f04f 30ff 	mov.w	r0, #4294967295
 80020b4:	f7ff ff8e 	bl	8001fd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020b8:	4b05      	ldr	r3, [pc, #20]	; (80020d0 <SysTick_Config+0x40>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020be:	4b04      	ldr	r3, [pc, #16]	; (80020d0 <SysTick_Config+0x40>)
 80020c0:	2207      	movs	r2, #7
 80020c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	e000e010 	.word	0xe000e010

080020d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f7ff ff29 	bl	8001f34 <__NVIC_SetPriorityGrouping>
}
 80020e2:	bf00      	nop
 80020e4:	3708      	adds	r7, #8
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}

080020ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020ea:	b580      	push	{r7, lr}
 80020ec:	b086      	sub	sp, #24
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	4603      	mov	r3, r0
 80020f2:	60b9      	str	r1, [r7, #8]
 80020f4:	607a      	str	r2, [r7, #4]
 80020f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80020f8:	2300      	movs	r3, #0
 80020fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020fc:	f7ff ff3e 	bl	8001f7c <__NVIC_GetPriorityGrouping>
 8002100:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	68b9      	ldr	r1, [r7, #8]
 8002106:	6978      	ldr	r0, [r7, #20]
 8002108:	f7ff ff8e 	bl	8002028 <NVIC_EncodePriority>
 800210c:	4602      	mov	r2, r0
 800210e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002112:	4611      	mov	r1, r2
 8002114:	4618      	mov	r0, r3
 8002116:	f7ff ff5d 	bl	8001fd4 <__NVIC_SetPriority>
}
 800211a:	bf00      	nop
 800211c:	3718      	adds	r7, #24
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}

08002122 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002122:	b580      	push	{r7, lr}
 8002124:	b082      	sub	sp, #8
 8002126:	af00      	add	r7, sp, #0
 8002128:	4603      	mov	r3, r0
 800212a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800212c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002130:	4618      	mov	r0, r3
 8002132:	f7ff ff31 	bl	8001f98 <__NVIC_EnableIRQ>
}
 8002136:	bf00      	nop
 8002138:	3708      	adds	r7, #8
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}

0800213e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800213e:	b580      	push	{r7, lr}
 8002140:	b082      	sub	sp, #8
 8002142:	af00      	add	r7, sp, #0
 8002144:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f7ff ffa2 	bl	8002090 <SysTick_Config>
 800214c:	4603      	mov	r3, r0
}
 800214e:	4618      	mov	r0, r3
 8002150:	3708      	adds	r7, #8
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
	...

08002158 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b086      	sub	sp, #24
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002160:	2300      	movs	r3, #0
 8002162:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002164:	f7ff feb6 	bl	8001ed4 <HAL_GetTick>
 8002168:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d101      	bne.n	8002174 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e099      	b.n	80022a8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2202      	movs	r2, #2
 8002178:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f022 0201 	bic.w	r2, r2, #1
 8002192:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002194:	e00f      	b.n	80021b6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002196:	f7ff fe9d 	bl	8001ed4 <HAL_GetTick>
 800219a:	4602      	mov	r2, r0
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	2b05      	cmp	r3, #5
 80021a2:	d908      	bls.n	80021b6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2220      	movs	r2, #32
 80021a8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2203      	movs	r2, #3
 80021ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e078      	b.n	80022a8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0301 	and.w	r3, r3, #1
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d1e8      	bne.n	8002196 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80021cc:	697a      	ldr	r2, [r7, #20]
 80021ce:	4b38      	ldr	r3, [pc, #224]	; (80022b0 <HAL_DMA_Init+0x158>)
 80021d0:	4013      	ands	r3, r2
 80021d2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685a      	ldr	r2, [r3, #4]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	691b      	ldr	r3, [r3, #16]
 80021e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	699b      	ldr	r3, [r3, #24]
 80021f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a1b      	ldr	r3, [r3, #32]
 8002200:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002202:	697a      	ldr	r2, [r7, #20]
 8002204:	4313      	orrs	r3, r2
 8002206:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220c:	2b04      	cmp	r3, #4
 800220e:	d107      	bne.n	8002220 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002218:	4313      	orrs	r3, r2
 800221a:	697a      	ldr	r2, [r7, #20]
 800221c:	4313      	orrs	r3, r2
 800221e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	697a      	ldr	r2, [r7, #20]
 8002226:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	695b      	ldr	r3, [r3, #20]
 800222e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	f023 0307 	bic.w	r3, r3, #7
 8002236:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223c:	697a      	ldr	r2, [r7, #20]
 800223e:	4313      	orrs	r3, r2
 8002240:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002246:	2b04      	cmp	r3, #4
 8002248:	d117      	bne.n	800227a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800224e:	697a      	ldr	r2, [r7, #20]
 8002250:	4313      	orrs	r3, r2
 8002252:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002258:	2b00      	cmp	r3, #0
 800225a:	d00e      	beq.n	800227a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f000 f9e9 	bl	8002634 <DMA_CheckFifoParam>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d008      	beq.n	800227a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2240      	movs	r2, #64	; 0x40
 800226c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2201      	movs	r2, #1
 8002272:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002276:	2301      	movs	r3, #1
 8002278:	e016      	b.n	80022a8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	697a      	ldr	r2, [r7, #20]
 8002280:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f000 f9a0 	bl	80025c8 <DMA_CalcBaseAndBitshift>
 8002288:	4603      	mov	r3, r0
 800228a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002290:	223f      	movs	r2, #63	; 0x3f
 8002292:	409a      	lsls	r2, r3
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2200      	movs	r2, #0
 800229c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2201      	movs	r2, #1
 80022a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80022a6:	2300      	movs	r3, #0
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3718      	adds	r7, #24
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	e010803f 	.word	0xe010803f

080022b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b086      	sub	sp, #24
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80022bc:	2300      	movs	r3, #0
 80022be:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80022c0:	4b8e      	ldr	r3, [pc, #568]	; (80024fc <HAL_DMA_IRQHandler+0x248>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a8e      	ldr	r2, [pc, #568]	; (8002500 <HAL_DMA_IRQHandler+0x24c>)
 80022c6:	fba2 2303 	umull	r2, r3, r2, r3
 80022ca:	0a9b      	lsrs	r3, r3, #10
 80022cc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022d2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022de:	2208      	movs	r2, #8
 80022e0:	409a      	lsls	r2, r3
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	4013      	ands	r3, r2
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d01a      	beq.n	8002320 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0304 	and.w	r3, r3, #4
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d013      	beq.n	8002320 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f022 0204 	bic.w	r2, r2, #4
 8002306:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800230c:	2208      	movs	r2, #8
 800230e:	409a      	lsls	r2, r3
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002318:	f043 0201 	orr.w	r2, r3, #1
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002324:	2201      	movs	r2, #1
 8002326:	409a      	lsls	r2, r3
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	4013      	ands	r3, r2
 800232c:	2b00      	cmp	r3, #0
 800232e:	d012      	beq.n	8002356 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	695b      	ldr	r3, [r3, #20]
 8002336:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800233a:	2b00      	cmp	r3, #0
 800233c:	d00b      	beq.n	8002356 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002342:	2201      	movs	r2, #1
 8002344:	409a      	lsls	r2, r3
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800234e:	f043 0202 	orr.w	r2, r3, #2
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800235a:	2204      	movs	r2, #4
 800235c:	409a      	lsls	r2, r3
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	4013      	ands	r3, r2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d012      	beq.n	800238c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0302 	and.w	r3, r3, #2
 8002370:	2b00      	cmp	r3, #0
 8002372:	d00b      	beq.n	800238c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002378:	2204      	movs	r2, #4
 800237a:	409a      	lsls	r2, r3
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002384:	f043 0204 	orr.w	r2, r3, #4
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002390:	2210      	movs	r2, #16
 8002392:	409a      	lsls	r2, r3
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	4013      	ands	r3, r2
 8002398:	2b00      	cmp	r3, #0
 800239a:	d043      	beq.n	8002424 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0308 	and.w	r3, r3, #8
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d03c      	beq.n	8002424 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ae:	2210      	movs	r2, #16
 80023b0:	409a      	lsls	r2, r3
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d018      	beq.n	80023f6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d108      	bne.n	80023e4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d024      	beq.n	8002424 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	4798      	blx	r3
 80023e2:	e01f      	b.n	8002424 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d01b      	beq.n	8002424 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	4798      	blx	r3
 80023f4:	e016      	b.n	8002424 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002400:	2b00      	cmp	r3, #0
 8002402:	d107      	bne.n	8002414 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f022 0208 	bic.w	r2, r2, #8
 8002412:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002418:	2b00      	cmp	r3, #0
 800241a:	d003      	beq.n	8002424 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002428:	2220      	movs	r2, #32
 800242a:	409a      	lsls	r2, r3
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	4013      	ands	r3, r2
 8002430:	2b00      	cmp	r3, #0
 8002432:	f000 808f 	beq.w	8002554 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0310 	and.w	r3, r3, #16
 8002440:	2b00      	cmp	r3, #0
 8002442:	f000 8087 	beq.w	8002554 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800244a:	2220      	movs	r2, #32
 800244c:	409a      	lsls	r2, r3
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002458:	b2db      	uxtb	r3, r3
 800245a:	2b05      	cmp	r3, #5
 800245c:	d136      	bne.n	80024cc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f022 0216 	bic.w	r2, r2, #22
 800246c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	695a      	ldr	r2, [r3, #20]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800247c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002482:	2b00      	cmp	r3, #0
 8002484:	d103      	bne.n	800248e <HAL_DMA_IRQHandler+0x1da>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800248a:	2b00      	cmp	r3, #0
 800248c:	d007      	beq.n	800249e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f022 0208 	bic.w	r2, r2, #8
 800249c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024a2:	223f      	movs	r2, #63	; 0x3f
 80024a4:	409a      	lsls	r2, r3
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2201      	movs	r2, #1
 80024ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d07e      	beq.n	80025c0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	4798      	blx	r3
        }
        return;
 80024ca:	e079      	b.n	80025c0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d01d      	beq.n	8002516 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d10d      	bne.n	8002504 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d031      	beq.n	8002554 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	4798      	blx	r3
 80024f8:	e02c      	b.n	8002554 <HAL_DMA_IRQHandler+0x2a0>
 80024fa:	bf00      	nop
 80024fc:	20000000 	.word	0x20000000
 8002500:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002508:	2b00      	cmp	r3, #0
 800250a:	d023      	beq.n	8002554 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	4798      	blx	r3
 8002514:	e01e      	b.n	8002554 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002520:	2b00      	cmp	r3, #0
 8002522:	d10f      	bne.n	8002544 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f022 0210 	bic.w	r2, r2, #16
 8002532:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002548:	2b00      	cmp	r3, #0
 800254a:	d003      	beq.n	8002554 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002558:	2b00      	cmp	r3, #0
 800255a:	d032      	beq.n	80025c2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002560:	f003 0301 	and.w	r3, r3, #1
 8002564:	2b00      	cmp	r3, #0
 8002566:	d022      	beq.n	80025ae <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2205      	movs	r2, #5
 800256c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f022 0201 	bic.w	r2, r2, #1
 800257e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	3301      	adds	r3, #1
 8002584:	60bb      	str	r3, [r7, #8]
 8002586:	697a      	ldr	r2, [r7, #20]
 8002588:	429a      	cmp	r2, r3
 800258a:	d307      	bcc.n	800259c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	2b00      	cmp	r3, #0
 8002598:	d1f2      	bne.n	8002580 <HAL_DMA_IRQHandler+0x2cc>
 800259a:	e000      	b.n	800259e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800259c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2201      	movs	r2, #1
 80025a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d005      	beq.n	80025c2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	4798      	blx	r3
 80025be:	e000      	b.n	80025c2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80025c0:	bf00      	nop
    }
  }
}
 80025c2:	3718      	adds	r7, #24
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b085      	sub	sp, #20
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	3b10      	subs	r3, #16
 80025d8:	4a13      	ldr	r2, [pc, #76]	; (8002628 <DMA_CalcBaseAndBitshift+0x60>)
 80025da:	fba2 2303 	umull	r2, r3, r2, r3
 80025de:	091b      	lsrs	r3, r3, #4
 80025e0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80025e2:	4a12      	ldr	r2, [pc, #72]	; (800262c <DMA_CalcBaseAndBitshift+0x64>)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	4413      	add	r3, r2
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	461a      	mov	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2b03      	cmp	r3, #3
 80025f4:	d908      	bls.n	8002608 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	461a      	mov	r2, r3
 80025fc:	4b0c      	ldr	r3, [pc, #48]	; (8002630 <DMA_CalcBaseAndBitshift+0x68>)
 80025fe:	4013      	ands	r3, r2
 8002600:	1d1a      	adds	r2, r3, #4
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	659a      	str	r2, [r3, #88]	; 0x58
 8002606:	e006      	b.n	8002616 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	461a      	mov	r2, r3
 800260e:	4b08      	ldr	r3, [pc, #32]	; (8002630 <DMA_CalcBaseAndBitshift+0x68>)
 8002610:	4013      	ands	r3, r2
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800261a:	4618      	mov	r0, r3
 800261c:	3714      	adds	r7, #20
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	aaaaaaab 	.word	0xaaaaaaab
 800262c:	080087f8 	.word	0x080087f8
 8002630:	fffffc00 	.word	0xfffffc00

08002634 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002634:	b480      	push	{r7}
 8002636:	b085      	sub	sp, #20
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800263c:	2300      	movs	r3, #0
 800263e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002644:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	699b      	ldr	r3, [r3, #24]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d11f      	bne.n	800268e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	2b03      	cmp	r3, #3
 8002652:	d856      	bhi.n	8002702 <DMA_CheckFifoParam+0xce>
 8002654:	a201      	add	r2, pc, #4	; (adr r2, 800265c <DMA_CheckFifoParam+0x28>)
 8002656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800265a:	bf00      	nop
 800265c:	0800266d 	.word	0x0800266d
 8002660:	0800267f 	.word	0x0800267f
 8002664:	0800266d 	.word	0x0800266d
 8002668:	08002703 	.word	0x08002703
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002670:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d046      	beq.n	8002706 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800267c:	e043      	b.n	8002706 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002682:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002686:	d140      	bne.n	800270a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800268c:	e03d      	b.n	800270a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	699b      	ldr	r3, [r3, #24]
 8002692:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002696:	d121      	bne.n	80026dc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	2b03      	cmp	r3, #3
 800269c:	d837      	bhi.n	800270e <DMA_CheckFifoParam+0xda>
 800269e:	a201      	add	r2, pc, #4	; (adr r2, 80026a4 <DMA_CheckFifoParam+0x70>)
 80026a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026a4:	080026b5 	.word	0x080026b5
 80026a8:	080026bb 	.word	0x080026bb
 80026ac:	080026b5 	.word	0x080026b5
 80026b0:	080026cd 	.word	0x080026cd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	73fb      	strb	r3, [r7, #15]
      break;
 80026b8:	e030      	b.n	800271c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d025      	beq.n	8002712 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026ca:	e022      	b.n	8002712 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80026d4:	d11f      	bne.n	8002716 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80026da:	e01c      	b.n	8002716 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d903      	bls.n	80026ea <DMA_CheckFifoParam+0xb6>
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	2b03      	cmp	r3, #3
 80026e6:	d003      	beq.n	80026f0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80026e8:	e018      	b.n	800271c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	73fb      	strb	r3, [r7, #15]
      break;
 80026ee:	e015      	b.n	800271c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d00e      	beq.n	800271a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	73fb      	strb	r3, [r7, #15]
      break;
 8002700:	e00b      	b.n	800271a <DMA_CheckFifoParam+0xe6>
      break;
 8002702:	bf00      	nop
 8002704:	e00a      	b.n	800271c <DMA_CheckFifoParam+0xe8>
      break;
 8002706:	bf00      	nop
 8002708:	e008      	b.n	800271c <DMA_CheckFifoParam+0xe8>
      break;
 800270a:	bf00      	nop
 800270c:	e006      	b.n	800271c <DMA_CheckFifoParam+0xe8>
      break;
 800270e:	bf00      	nop
 8002710:	e004      	b.n	800271c <DMA_CheckFifoParam+0xe8>
      break;
 8002712:	bf00      	nop
 8002714:	e002      	b.n	800271c <DMA_CheckFifoParam+0xe8>
      break;   
 8002716:	bf00      	nop
 8002718:	e000      	b.n	800271c <DMA_CheckFifoParam+0xe8>
      break;
 800271a:	bf00      	nop
    }
  } 
  
  return status; 
 800271c:	7bfb      	ldrb	r3, [r7, #15]
}
 800271e:	4618      	mov	r0, r3
 8002720:	3714      	adds	r7, #20
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop

0800272c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800272c:	b480      	push	{r7}
 800272e:	b089      	sub	sp, #36	; 0x24
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002736:	2300      	movs	r3, #0
 8002738:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800273a:	2300      	movs	r3, #0
 800273c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800273e:	2300      	movs	r3, #0
 8002740:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002742:	2300      	movs	r3, #0
 8002744:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002746:	2300      	movs	r3, #0
 8002748:	61fb      	str	r3, [r7, #28]
 800274a:	e169      	b.n	8002a20 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800274c:	2201      	movs	r2, #1
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	fa02 f303 	lsl.w	r3, r2, r3
 8002754:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	697a      	ldr	r2, [r7, #20]
 800275c:	4013      	ands	r3, r2
 800275e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002760:	693a      	ldr	r2, [r7, #16]
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	429a      	cmp	r2, r3
 8002766:	f040 8158 	bne.w	8002a1a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f003 0303 	and.w	r3, r3, #3
 8002772:	2b01      	cmp	r3, #1
 8002774:	d005      	beq.n	8002782 <HAL_GPIO_Init+0x56>
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f003 0303 	and.w	r3, r3, #3
 800277e:	2b02      	cmp	r3, #2
 8002780:	d130      	bne.n	80027e4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	005b      	lsls	r3, r3, #1
 800278c:	2203      	movs	r2, #3
 800278e:	fa02 f303 	lsl.w	r3, r2, r3
 8002792:	43db      	mvns	r3, r3
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	4013      	ands	r3, r2
 8002798:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	68da      	ldr	r2, [r3, #12]
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	fa02 f303 	lsl.w	r3, r2, r3
 80027a6:	69ba      	ldr	r2, [r7, #24]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	69ba      	ldr	r2, [r7, #24]
 80027b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027b8:	2201      	movs	r2, #1
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	fa02 f303 	lsl.w	r3, r2, r3
 80027c0:	43db      	mvns	r3, r3
 80027c2:	69ba      	ldr	r2, [r7, #24]
 80027c4:	4013      	ands	r3, r2
 80027c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	091b      	lsrs	r3, r3, #4
 80027ce:	f003 0201 	and.w	r2, r3, #1
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	fa02 f303 	lsl.w	r3, r2, r3
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	4313      	orrs	r3, r2
 80027dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f003 0303 	and.w	r3, r3, #3
 80027ec:	2b03      	cmp	r3, #3
 80027ee:	d017      	beq.n	8002820 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	005b      	lsls	r3, r3, #1
 80027fa:	2203      	movs	r2, #3
 80027fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002800:	43db      	mvns	r3, r3
 8002802:	69ba      	ldr	r2, [r7, #24]
 8002804:	4013      	ands	r3, r2
 8002806:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	689a      	ldr	r2, [r3, #8]
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	005b      	lsls	r3, r3, #1
 8002810:	fa02 f303 	lsl.w	r3, r2, r3
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	4313      	orrs	r3, r2
 8002818:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f003 0303 	and.w	r3, r3, #3
 8002828:	2b02      	cmp	r3, #2
 800282a:	d123      	bne.n	8002874 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	08da      	lsrs	r2, r3, #3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	3208      	adds	r2, #8
 8002834:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002838:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	f003 0307 	and.w	r3, r3, #7
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	220f      	movs	r2, #15
 8002844:	fa02 f303 	lsl.w	r3, r2, r3
 8002848:	43db      	mvns	r3, r3
 800284a:	69ba      	ldr	r2, [r7, #24]
 800284c:	4013      	ands	r3, r2
 800284e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	691a      	ldr	r2, [r3, #16]
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	f003 0307 	and.w	r3, r3, #7
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	4313      	orrs	r3, r2
 8002864:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	08da      	lsrs	r2, r3, #3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	3208      	adds	r2, #8
 800286e:	69b9      	ldr	r1, [r7, #24]
 8002870:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	005b      	lsls	r3, r3, #1
 800287e:	2203      	movs	r2, #3
 8002880:	fa02 f303 	lsl.w	r3, r2, r3
 8002884:	43db      	mvns	r3, r3
 8002886:	69ba      	ldr	r2, [r7, #24]
 8002888:	4013      	ands	r3, r2
 800288a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f003 0203 	and.w	r2, r3, #3
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	005b      	lsls	r3, r3, #1
 8002898:	fa02 f303 	lsl.w	r3, r2, r3
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	4313      	orrs	r3, r2
 80028a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	f000 80b2 	beq.w	8002a1a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028b6:	4b60      	ldr	r3, [pc, #384]	; (8002a38 <HAL_GPIO_Init+0x30c>)
 80028b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ba:	4a5f      	ldr	r2, [pc, #380]	; (8002a38 <HAL_GPIO_Init+0x30c>)
 80028bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028c0:	6453      	str	r3, [r2, #68]	; 0x44
 80028c2:	4b5d      	ldr	r3, [pc, #372]	; (8002a38 <HAL_GPIO_Init+0x30c>)
 80028c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028ca:	60fb      	str	r3, [r7, #12]
 80028cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80028ce:	4a5b      	ldr	r2, [pc, #364]	; (8002a3c <HAL_GPIO_Init+0x310>)
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	089b      	lsrs	r3, r3, #2
 80028d4:	3302      	adds	r3, #2
 80028d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028da:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	f003 0303 	and.w	r3, r3, #3
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	220f      	movs	r2, #15
 80028e6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ea:	43db      	mvns	r3, r3
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	4013      	ands	r3, r2
 80028f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4a52      	ldr	r2, [pc, #328]	; (8002a40 <HAL_GPIO_Init+0x314>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d02b      	beq.n	8002952 <HAL_GPIO_Init+0x226>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4a51      	ldr	r2, [pc, #324]	; (8002a44 <HAL_GPIO_Init+0x318>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d025      	beq.n	800294e <HAL_GPIO_Init+0x222>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a50      	ldr	r2, [pc, #320]	; (8002a48 <HAL_GPIO_Init+0x31c>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d01f      	beq.n	800294a <HAL_GPIO_Init+0x21e>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a4f      	ldr	r2, [pc, #316]	; (8002a4c <HAL_GPIO_Init+0x320>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d019      	beq.n	8002946 <HAL_GPIO_Init+0x21a>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a4e      	ldr	r2, [pc, #312]	; (8002a50 <HAL_GPIO_Init+0x324>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d013      	beq.n	8002942 <HAL_GPIO_Init+0x216>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a4d      	ldr	r2, [pc, #308]	; (8002a54 <HAL_GPIO_Init+0x328>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d00d      	beq.n	800293e <HAL_GPIO_Init+0x212>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a4c      	ldr	r2, [pc, #304]	; (8002a58 <HAL_GPIO_Init+0x32c>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d007      	beq.n	800293a <HAL_GPIO_Init+0x20e>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a4b      	ldr	r2, [pc, #300]	; (8002a5c <HAL_GPIO_Init+0x330>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d101      	bne.n	8002936 <HAL_GPIO_Init+0x20a>
 8002932:	2307      	movs	r3, #7
 8002934:	e00e      	b.n	8002954 <HAL_GPIO_Init+0x228>
 8002936:	2308      	movs	r3, #8
 8002938:	e00c      	b.n	8002954 <HAL_GPIO_Init+0x228>
 800293a:	2306      	movs	r3, #6
 800293c:	e00a      	b.n	8002954 <HAL_GPIO_Init+0x228>
 800293e:	2305      	movs	r3, #5
 8002940:	e008      	b.n	8002954 <HAL_GPIO_Init+0x228>
 8002942:	2304      	movs	r3, #4
 8002944:	e006      	b.n	8002954 <HAL_GPIO_Init+0x228>
 8002946:	2303      	movs	r3, #3
 8002948:	e004      	b.n	8002954 <HAL_GPIO_Init+0x228>
 800294a:	2302      	movs	r3, #2
 800294c:	e002      	b.n	8002954 <HAL_GPIO_Init+0x228>
 800294e:	2301      	movs	r3, #1
 8002950:	e000      	b.n	8002954 <HAL_GPIO_Init+0x228>
 8002952:	2300      	movs	r3, #0
 8002954:	69fa      	ldr	r2, [r7, #28]
 8002956:	f002 0203 	and.w	r2, r2, #3
 800295a:	0092      	lsls	r2, r2, #2
 800295c:	4093      	lsls	r3, r2
 800295e:	69ba      	ldr	r2, [r7, #24]
 8002960:	4313      	orrs	r3, r2
 8002962:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002964:	4935      	ldr	r1, [pc, #212]	; (8002a3c <HAL_GPIO_Init+0x310>)
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	089b      	lsrs	r3, r3, #2
 800296a:	3302      	adds	r3, #2
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002972:	4b3b      	ldr	r3, [pc, #236]	; (8002a60 <HAL_GPIO_Init+0x334>)
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	43db      	mvns	r3, r3
 800297c:	69ba      	ldr	r2, [r7, #24]
 800297e:	4013      	ands	r3, r2
 8002980:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d003      	beq.n	8002996 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800298e:	69ba      	ldr	r2, [r7, #24]
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	4313      	orrs	r3, r2
 8002994:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002996:	4a32      	ldr	r2, [pc, #200]	; (8002a60 <HAL_GPIO_Init+0x334>)
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800299c:	4b30      	ldr	r3, [pc, #192]	; (8002a60 <HAL_GPIO_Init+0x334>)
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	43db      	mvns	r3, r3
 80029a6:	69ba      	ldr	r2, [r7, #24]
 80029a8:	4013      	ands	r3, r2
 80029aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d003      	beq.n	80029c0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80029b8:	69ba      	ldr	r2, [r7, #24]
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	4313      	orrs	r3, r2
 80029be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029c0:	4a27      	ldr	r2, [pc, #156]	; (8002a60 <HAL_GPIO_Init+0x334>)
 80029c2:	69bb      	ldr	r3, [r7, #24]
 80029c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029c6:	4b26      	ldr	r3, [pc, #152]	; (8002a60 <HAL_GPIO_Init+0x334>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	43db      	mvns	r3, r3
 80029d0:	69ba      	ldr	r2, [r7, #24]
 80029d2:	4013      	ands	r3, r2
 80029d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d003      	beq.n	80029ea <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80029e2:	69ba      	ldr	r2, [r7, #24]
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029ea:	4a1d      	ldr	r2, [pc, #116]	; (8002a60 <HAL_GPIO_Init+0x334>)
 80029ec:	69bb      	ldr	r3, [r7, #24]
 80029ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029f0:	4b1b      	ldr	r3, [pc, #108]	; (8002a60 <HAL_GPIO_Init+0x334>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	43db      	mvns	r3, r3
 80029fa:	69ba      	ldr	r2, [r7, #24]
 80029fc:	4013      	ands	r3, r2
 80029fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d003      	beq.n	8002a14 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002a0c:	69ba      	ldr	r2, [r7, #24]
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a14:	4a12      	ldr	r2, [pc, #72]	; (8002a60 <HAL_GPIO_Init+0x334>)
 8002a16:	69bb      	ldr	r3, [r7, #24]
 8002a18:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	3301      	adds	r3, #1
 8002a1e:	61fb      	str	r3, [r7, #28]
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	2b0f      	cmp	r3, #15
 8002a24:	f67f ae92 	bls.w	800274c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002a28:	bf00      	nop
 8002a2a:	bf00      	nop
 8002a2c:	3724      	adds	r7, #36	; 0x24
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	40023800 	.word	0x40023800
 8002a3c:	40013800 	.word	0x40013800
 8002a40:	40020000 	.word	0x40020000
 8002a44:	40020400 	.word	0x40020400
 8002a48:	40020800 	.word	0x40020800
 8002a4c:	40020c00 	.word	0x40020c00
 8002a50:	40021000 	.word	0x40021000
 8002a54:	40021400 	.word	0x40021400
 8002a58:	40021800 	.word	0x40021800
 8002a5c:	40021c00 	.word	0x40021c00
 8002a60:	40013c00 	.word	0x40013c00

08002a64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	807b      	strh	r3, [r7, #2]
 8002a70:	4613      	mov	r3, r2
 8002a72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a74:	787b      	ldrb	r3, [r7, #1]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d003      	beq.n	8002a82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a7a:	887a      	ldrh	r2, [r7, #2]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002a80:	e003      	b.n	8002a8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002a82:	887b      	ldrh	r3, [r7, #2]
 8002a84:	041a      	lsls	r2, r3, #16
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	619a      	str	r2, [r3, #24]
}
 8002a8a:	bf00      	nop
 8002a8c:	370c      	adds	r7, #12
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr

08002a96 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a96:	b480      	push	{r7}
 8002a98:	b085      	sub	sp, #20
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
 8002a9e:	460b      	mov	r3, r1
 8002aa0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	695b      	ldr	r3, [r3, #20]
 8002aa6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002aa8:	887a      	ldrh	r2, [r7, #2]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	4013      	ands	r3, r2
 8002aae:	041a      	lsls	r2, r3, #16
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	43d9      	mvns	r1, r3
 8002ab4:	887b      	ldrh	r3, [r7, #2]
 8002ab6:	400b      	ands	r3, r1
 8002ab8:	431a      	orrs	r2, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	619a      	str	r2, [r3, #24]
}
 8002abe:	bf00      	nop
 8002ac0:	3714      	adds	r7, #20
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
	...

08002acc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d101      	bne.n	8002ade <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e07f      	b.n	8002bde <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d106      	bne.n	8002af8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f7fe fdfe 	bl	80016f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2224      	movs	r2, #36	; 0x24
 8002afc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f022 0201 	bic.w	r2, r2, #1
 8002b0e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685a      	ldr	r2, [r3, #4]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b1c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	689a      	ldr	r2, [r3, #8]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b2c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d107      	bne.n	8002b46 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	689a      	ldr	r2, [r3, #8]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b42:	609a      	str	r2, [r3, #8]
 8002b44:	e006      	b.n	8002b54 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	689a      	ldr	r2, [r3, #8]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002b52:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d104      	bne.n	8002b66 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b64:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	6859      	ldr	r1, [r3, #4]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	4b1d      	ldr	r3, [pc, #116]	; (8002be8 <HAL_I2C_Init+0x11c>)
 8002b72:	430b      	orrs	r3, r1
 8002b74:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68da      	ldr	r2, [r3, #12]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b84:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	691a      	ldr	r2, [r3, #16]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	695b      	ldr	r3, [r3, #20]
 8002b8e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	699b      	ldr	r3, [r3, #24]
 8002b96:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	430a      	orrs	r2, r1
 8002b9e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	69d9      	ldr	r1, [r3, #28]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6a1a      	ldr	r2, [r3, #32]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	430a      	orrs	r2, r1
 8002bae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f042 0201 	orr.w	r2, r2, #1
 8002bbe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2220      	movs	r2, #32
 8002bca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3708      	adds	r7, #8
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	02008000 	.word	0x02008000

08002bec <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b088      	sub	sp, #32
 8002bf0:	af02      	add	r7, sp, #8
 8002bf2:	60f8      	str	r0, [r7, #12]
 8002bf4:	4608      	mov	r0, r1
 8002bf6:	4611      	mov	r1, r2
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	817b      	strh	r3, [r7, #10]
 8002bfe:	460b      	mov	r3, r1
 8002c00:	813b      	strh	r3, [r7, #8]
 8002c02:	4613      	mov	r3, r2
 8002c04:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b20      	cmp	r3, #32
 8002c10:	f040 80f9 	bne.w	8002e06 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c14:	6a3b      	ldr	r3, [r7, #32]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d002      	beq.n	8002c20 <HAL_I2C_Mem_Write+0x34>
 8002c1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d105      	bne.n	8002c2c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c26:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e0ed      	b.n	8002e08 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d101      	bne.n	8002c3a <HAL_I2C_Mem_Write+0x4e>
 8002c36:	2302      	movs	r3, #2
 8002c38:	e0e6      	b.n	8002e08 <HAL_I2C_Mem_Write+0x21c>
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002c42:	f7ff f947 	bl	8001ed4 <HAL_GetTick>
 8002c46:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	9300      	str	r3, [sp, #0]
 8002c4c:	2319      	movs	r3, #25
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c54:	68f8      	ldr	r0, [r7, #12]
 8002c56:	f000 fac3 	bl	80031e0 <I2C_WaitOnFlagUntilTimeout>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d001      	beq.n	8002c64 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e0d1      	b.n	8002e08 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2221      	movs	r2, #33	; 0x21
 8002c68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2240      	movs	r2, #64	; 0x40
 8002c70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2200      	movs	r2, #0
 8002c78:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6a3a      	ldr	r2, [r7, #32]
 8002c7e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002c84:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c8c:	88f8      	ldrh	r0, [r7, #6]
 8002c8e:	893a      	ldrh	r2, [r7, #8]
 8002c90:	8979      	ldrh	r1, [r7, #10]
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	9301      	str	r3, [sp, #4]
 8002c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c98:	9300      	str	r3, [sp, #0]
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	68f8      	ldr	r0, [r7, #12]
 8002c9e:	f000 f9d3 	bl	8003048 <I2C_RequestMemoryWrite>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d005      	beq.n	8002cb4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2200      	movs	r2, #0
 8002cac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e0a9      	b.n	8002e08 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	2bff      	cmp	r3, #255	; 0xff
 8002cbc:	d90e      	bls.n	8002cdc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	22ff      	movs	r2, #255	; 0xff
 8002cc2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cc8:	b2da      	uxtb	r2, r3
 8002cca:	8979      	ldrh	r1, [r7, #10]
 8002ccc:	2300      	movs	r3, #0
 8002cce:	9300      	str	r3, [sp, #0]
 8002cd0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002cd4:	68f8      	ldr	r0, [r7, #12]
 8002cd6:	f000 fc1f 	bl	8003518 <I2C_TransferConfig>
 8002cda:	e00f      	b.n	8002cfc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ce0:	b29a      	uxth	r2, r3
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cea:	b2da      	uxtb	r2, r3
 8002cec:	8979      	ldrh	r1, [r7, #10]
 8002cee:	2300      	movs	r3, #0
 8002cf0:	9300      	str	r3, [sp, #0]
 8002cf2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cf6:	68f8      	ldr	r0, [r7, #12]
 8002cf8:	f000 fc0e 	bl	8003518 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cfc:	697a      	ldr	r2, [r7, #20]
 8002cfe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d00:	68f8      	ldr	r0, [r7, #12]
 8002d02:	f000 faad 	bl	8003260 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d001      	beq.n	8002d10 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e07b      	b.n	8002e08 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d14:	781a      	ldrb	r2, [r3, #0]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d20:	1c5a      	adds	r2, r3, #1
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	3b01      	subs	r3, #1
 8002d2e:	b29a      	uxth	r2, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d38:	3b01      	subs	r3, #1
 8002d3a:	b29a      	uxth	r2, r3
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d034      	beq.n	8002db4 <HAL_I2C_Mem_Write+0x1c8>
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d130      	bne.n	8002db4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	9300      	str	r3, [sp, #0]
 8002d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d58:	2200      	movs	r2, #0
 8002d5a:	2180      	movs	r1, #128	; 0x80
 8002d5c:	68f8      	ldr	r0, [r7, #12]
 8002d5e:	f000 fa3f 	bl	80031e0 <I2C_WaitOnFlagUntilTimeout>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d001      	beq.n	8002d6c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e04d      	b.n	8002e08 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	2bff      	cmp	r3, #255	; 0xff
 8002d74:	d90e      	bls.n	8002d94 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	22ff      	movs	r2, #255	; 0xff
 8002d7a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d80:	b2da      	uxtb	r2, r3
 8002d82:	8979      	ldrh	r1, [r7, #10]
 8002d84:	2300      	movs	r3, #0
 8002d86:	9300      	str	r3, [sp, #0]
 8002d88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d8c:	68f8      	ldr	r0, [r7, #12]
 8002d8e:	f000 fbc3 	bl	8003518 <I2C_TransferConfig>
 8002d92:	e00f      	b.n	8002db4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d98:	b29a      	uxth	r2, r3
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002da2:	b2da      	uxtb	r2, r3
 8002da4:	8979      	ldrh	r1, [r7, #10]
 8002da6:	2300      	movs	r3, #0
 8002da8:	9300      	str	r3, [sp, #0]
 8002daa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002dae:	68f8      	ldr	r0, [r7, #12]
 8002db0:	f000 fbb2 	bl	8003518 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d19e      	bne.n	8002cfc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dbe:	697a      	ldr	r2, [r7, #20]
 8002dc0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002dc2:	68f8      	ldr	r0, [r7, #12]
 8002dc4:	f000 fa8c 	bl	80032e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d001      	beq.n	8002dd2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e01a      	b.n	8002e08 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	2220      	movs	r2, #32
 8002dd8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	6859      	ldr	r1, [r3, #4]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	4b0a      	ldr	r3, [pc, #40]	; (8002e10 <HAL_I2C_Mem_Write+0x224>)
 8002de6:	400b      	ands	r3, r1
 8002de8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2220      	movs	r2, #32
 8002dee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2200      	movs	r2, #0
 8002df6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e02:	2300      	movs	r3, #0
 8002e04:	e000      	b.n	8002e08 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002e06:	2302      	movs	r3, #2
  }
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3718      	adds	r7, #24
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	fe00e800 	.word	0xfe00e800

08002e14 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b088      	sub	sp, #32
 8002e18:	af02      	add	r7, sp, #8
 8002e1a:	60f8      	str	r0, [r7, #12]
 8002e1c:	4608      	mov	r0, r1
 8002e1e:	4611      	mov	r1, r2
 8002e20:	461a      	mov	r2, r3
 8002e22:	4603      	mov	r3, r0
 8002e24:	817b      	strh	r3, [r7, #10]
 8002e26:	460b      	mov	r3, r1
 8002e28:	813b      	strh	r3, [r7, #8]
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	2b20      	cmp	r3, #32
 8002e38:	f040 80fd 	bne.w	8003036 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e3c:	6a3b      	ldr	r3, [r7, #32]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d002      	beq.n	8002e48 <HAL_I2C_Mem_Read+0x34>
 8002e42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d105      	bne.n	8002e54 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e4e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e0f1      	b.n	8003038 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d101      	bne.n	8002e62 <HAL_I2C_Mem_Read+0x4e>
 8002e5e:	2302      	movs	r3, #2
 8002e60:	e0ea      	b.n	8003038 <HAL_I2C_Mem_Read+0x224>
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2201      	movs	r2, #1
 8002e66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002e6a:	f7ff f833 	bl	8001ed4 <HAL_GetTick>
 8002e6e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	9300      	str	r3, [sp, #0]
 8002e74:	2319      	movs	r3, #25
 8002e76:	2201      	movs	r2, #1
 8002e78:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e7c:	68f8      	ldr	r0, [r7, #12]
 8002e7e:	f000 f9af 	bl	80031e0 <I2C_WaitOnFlagUntilTimeout>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d001      	beq.n	8002e8c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e0d5      	b.n	8003038 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2222      	movs	r2, #34	; 0x22
 8002e90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2240      	movs	r2, #64	; 0x40
 8002e98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6a3a      	ldr	r2, [r7, #32]
 8002ea6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002eac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002eb4:	88f8      	ldrh	r0, [r7, #6]
 8002eb6:	893a      	ldrh	r2, [r7, #8]
 8002eb8:	8979      	ldrh	r1, [r7, #10]
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	9301      	str	r3, [sp, #4]
 8002ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ec0:	9300      	str	r3, [sp, #0]
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	68f8      	ldr	r0, [r7, #12]
 8002ec6:	f000 f913 	bl	80030f0 <I2C_RequestMemoryRead>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d005      	beq.n	8002edc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e0ad      	b.n	8003038 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	2bff      	cmp	r3, #255	; 0xff
 8002ee4:	d90e      	bls.n	8002f04 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	22ff      	movs	r2, #255	; 0xff
 8002eea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ef0:	b2da      	uxtb	r2, r3
 8002ef2:	8979      	ldrh	r1, [r7, #10]
 8002ef4:	4b52      	ldr	r3, [pc, #328]	; (8003040 <HAL_I2C_Mem_Read+0x22c>)
 8002ef6:	9300      	str	r3, [sp, #0]
 8002ef8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002efc:	68f8      	ldr	r0, [r7, #12]
 8002efe:	f000 fb0b 	bl	8003518 <I2C_TransferConfig>
 8002f02:	e00f      	b.n	8002f24 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f08:	b29a      	uxth	r2, r3
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f12:	b2da      	uxtb	r2, r3
 8002f14:	8979      	ldrh	r1, [r7, #10]
 8002f16:	4b4a      	ldr	r3, [pc, #296]	; (8003040 <HAL_I2C_Mem_Read+0x22c>)
 8002f18:	9300      	str	r3, [sp, #0]
 8002f1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f1e:	68f8      	ldr	r0, [r7, #12]
 8002f20:	f000 fafa 	bl	8003518 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	9300      	str	r3, [sp, #0]
 8002f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	2104      	movs	r1, #4
 8002f2e:	68f8      	ldr	r0, [r7, #12]
 8002f30:	f000 f956 	bl	80031e0 <I2C_WaitOnFlagUntilTimeout>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d001      	beq.n	8002f3e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e07c      	b.n	8003038 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f48:	b2d2      	uxtb	r2, r2
 8002f4a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f50:	1c5a      	adds	r2, r3, #1
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	b29a      	uxth	r2, r3
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	3b01      	subs	r3, #1
 8002f6a:	b29a      	uxth	r2, r3
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d034      	beq.n	8002fe4 <HAL_I2C_Mem_Read+0x1d0>
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d130      	bne.n	8002fe4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	9300      	str	r3, [sp, #0]
 8002f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f88:	2200      	movs	r2, #0
 8002f8a:	2180      	movs	r1, #128	; 0x80
 8002f8c:	68f8      	ldr	r0, [r7, #12]
 8002f8e:	f000 f927 	bl	80031e0 <I2C_WaitOnFlagUntilTimeout>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d001      	beq.n	8002f9c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e04d      	b.n	8003038 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	2bff      	cmp	r3, #255	; 0xff
 8002fa4:	d90e      	bls.n	8002fc4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	22ff      	movs	r2, #255	; 0xff
 8002faa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fb0:	b2da      	uxtb	r2, r3
 8002fb2:	8979      	ldrh	r1, [r7, #10]
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	9300      	str	r3, [sp, #0]
 8002fb8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002fbc:	68f8      	ldr	r0, [r7, #12]
 8002fbe:	f000 faab 	bl	8003518 <I2C_TransferConfig>
 8002fc2:	e00f      	b.n	8002fe4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fc8:	b29a      	uxth	r2, r3
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fd2:	b2da      	uxtb	r2, r3
 8002fd4:	8979      	ldrh	r1, [r7, #10]
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	9300      	str	r3, [sp, #0]
 8002fda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fde:	68f8      	ldr	r0, [r7, #12]
 8002fe0:	f000 fa9a 	bl	8003518 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d19a      	bne.n	8002f24 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fee:	697a      	ldr	r2, [r7, #20]
 8002ff0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ff2:	68f8      	ldr	r0, [r7, #12]
 8002ff4:	f000 f974 	bl	80032e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e01a      	b.n	8003038 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2220      	movs	r2, #32
 8003008:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	6859      	ldr	r1, [r3, #4]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	4b0b      	ldr	r3, [pc, #44]	; (8003044 <HAL_I2C_Mem_Read+0x230>)
 8003016:	400b      	ands	r3, r1
 8003018:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2220      	movs	r2, #32
 800301e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003032:	2300      	movs	r3, #0
 8003034:	e000      	b.n	8003038 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003036:	2302      	movs	r3, #2
  }
}
 8003038:	4618      	mov	r0, r3
 800303a:	3718      	adds	r7, #24
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	80002400 	.word	0x80002400
 8003044:	fe00e800 	.word	0xfe00e800

08003048 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b086      	sub	sp, #24
 800304c:	af02      	add	r7, sp, #8
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	4608      	mov	r0, r1
 8003052:	4611      	mov	r1, r2
 8003054:	461a      	mov	r2, r3
 8003056:	4603      	mov	r3, r0
 8003058:	817b      	strh	r3, [r7, #10]
 800305a:	460b      	mov	r3, r1
 800305c:	813b      	strh	r3, [r7, #8]
 800305e:	4613      	mov	r3, r2
 8003060:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003062:	88fb      	ldrh	r3, [r7, #6]
 8003064:	b2da      	uxtb	r2, r3
 8003066:	8979      	ldrh	r1, [r7, #10]
 8003068:	4b20      	ldr	r3, [pc, #128]	; (80030ec <I2C_RequestMemoryWrite+0xa4>)
 800306a:	9300      	str	r3, [sp, #0]
 800306c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003070:	68f8      	ldr	r0, [r7, #12]
 8003072:	f000 fa51 	bl	8003518 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003076:	69fa      	ldr	r2, [r7, #28]
 8003078:	69b9      	ldr	r1, [r7, #24]
 800307a:	68f8      	ldr	r0, [r7, #12]
 800307c:	f000 f8f0 	bl	8003260 <I2C_WaitOnTXISFlagUntilTimeout>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d001      	beq.n	800308a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e02c      	b.n	80030e4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800308a:	88fb      	ldrh	r3, [r7, #6]
 800308c:	2b01      	cmp	r3, #1
 800308e:	d105      	bne.n	800309c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003090:	893b      	ldrh	r3, [r7, #8]
 8003092:	b2da      	uxtb	r2, r3
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	629a      	str	r2, [r3, #40]	; 0x28
 800309a:	e015      	b.n	80030c8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800309c:	893b      	ldrh	r3, [r7, #8]
 800309e:	0a1b      	lsrs	r3, r3, #8
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	b2da      	uxtb	r2, r3
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030aa:	69fa      	ldr	r2, [r7, #28]
 80030ac:	69b9      	ldr	r1, [r7, #24]
 80030ae:	68f8      	ldr	r0, [r7, #12]
 80030b0:	f000 f8d6 	bl	8003260 <I2C_WaitOnTXISFlagUntilTimeout>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d001      	beq.n	80030be <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e012      	b.n	80030e4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80030be:	893b      	ldrh	r3, [r7, #8]
 80030c0:	b2da      	uxtb	r2, r3
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	9300      	str	r3, [sp, #0]
 80030cc:	69bb      	ldr	r3, [r7, #24]
 80030ce:	2200      	movs	r2, #0
 80030d0:	2180      	movs	r1, #128	; 0x80
 80030d2:	68f8      	ldr	r0, [r7, #12]
 80030d4:	f000 f884 	bl	80031e0 <I2C_WaitOnFlagUntilTimeout>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d001      	beq.n	80030e2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e000      	b.n	80030e4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80030e2:	2300      	movs	r3, #0
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3710      	adds	r7, #16
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	80002000 	.word	0x80002000

080030f0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b086      	sub	sp, #24
 80030f4:	af02      	add	r7, sp, #8
 80030f6:	60f8      	str	r0, [r7, #12]
 80030f8:	4608      	mov	r0, r1
 80030fa:	4611      	mov	r1, r2
 80030fc:	461a      	mov	r2, r3
 80030fe:	4603      	mov	r3, r0
 8003100:	817b      	strh	r3, [r7, #10]
 8003102:	460b      	mov	r3, r1
 8003104:	813b      	strh	r3, [r7, #8]
 8003106:	4613      	mov	r3, r2
 8003108:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800310a:	88fb      	ldrh	r3, [r7, #6]
 800310c:	b2da      	uxtb	r2, r3
 800310e:	8979      	ldrh	r1, [r7, #10]
 8003110:	4b20      	ldr	r3, [pc, #128]	; (8003194 <I2C_RequestMemoryRead+0xa4>)
 8003112:	9300      	str	r3, [sp, #0]
 8003114:	2300      	movs	r3, #0
 8003116:	68f8      	ldr	r0, [r7, #12]
 8003118:	f000 f9fe 	bl	8003518 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800311c:	69fa      	ldr	r2, [r7, #28]
 800311e:	69b9      	ldr	r1, [r7, #24]
 8003120:	68f8      	ldr	r0, [r7, #12]
 8003122:	f000 f89d 	bl	8003260 <I2C_WaitOnTXISFlagUntilTimeout>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d001      	beq.n	8003130 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e02c      	b.n	800318a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003130:	88fb      	ldrh	r3, [r7, #6]
 8003132:	2b01      	cmp	r3, #1
 8003134:	d105      	bne.n	8003142 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003136:	893b      	ldrh	r3, [r7, #8]
 8003138:	b2da      	uxtb	r2, r3
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	629a      	str	r2, [r3, #40]	; 0x28
 8003140:	e015      	b.n	800316e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003142:	893b      	ldrh	r3, [r7, #8]
 8003144:	0a1b      	lsrs	r3, r3, #8
 8003146:	b29b      	uxth	r3, r3
 8003148:	b2da      	uxtb	r2, r3
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003150:	69fa      	ldr	r2, [r7, #28]
 8003152:	69b9      	ldr	r1, [r7, #24]
 8003154:	68f8      	ldr	r0, [r7, #12]
 8003156:	f000 f883 	bl	8003260 <I2C_WaitOnTXISFlagUntilTimeout>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d001      	beq.n	8003164 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e012      	b.n	800318a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003164:	893b      	ldrh	r3, [r7, #8]
 8003166:	b2da      	uxtb	r2, r3
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	9300      	str	r3, [sp, #0]
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	2200      	movs	r2, #0
 8003176:	2140      	movs	r1, #64	; 0x40
 8003178:	68f8      	ldr	r0, [r7, #12]
 800317a:	f000 f831 	bl	80031e0 <I2C_WaitOnFlagUntilTimeout>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d001      	beq.n	8003188 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e000      	b.n	800318a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003188:	2300      	movs	r3, #0
}
 800318a:	4618      	mov	r0, r3
 800318c:	3710      	adds	r7, #16
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	80002000 	.word	0x80002000

08003198 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	699b      	ldr	r3, [r3, #24]
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d103      	bne.n	80031b6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	2200      	movs	r2, #0
 80031b4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	699b      	ldr	r3, [r3, #24]
 80031bc:	f003 0301 	and.w	r3, r3, #1
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d007      	beq.n	80031d4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	699a      	ldr	r2, [r3, #24]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f042 0201 	orr.w	r2, r2, #1
 80031d2:	619a      	str	r2, [r3, #24]
  }
}
 80031d4:	bf00      	nop
 80031d6:	370c      	adds	r7, #12
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr

080031e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	60f8      	str	r0, [r7, #12]
 80031e8:	60b9      	str	r1, [r7, #8]
 80031ea:	603b      	str	r3, [r7, #0]
 80031ec:	4613      	mov	r3, r2
 80031ee:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031f0:	e022      	b.n	8003238 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031f8:	d01e      	beq.n	8003238 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031fa:	f7fe fe6b 	bl	8001ed4 <HAL_GetTick>
 80031fe:	4602      	mov	r2, r0
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	683a      	ldr	r2, [r7, #0]
 8003206:	429a      	cmp	r2, r3
 8003208:	d302      	bcc.n	8003210 <I2C_WaitOnFlagUntilTimeout+0x30>
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d113      	bne.n	8003238 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003214:	f043 0220 	orr.w	r2, r3, #32
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2220      	movs	r2, #32
 8003220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2200      	movs	r2, #0
 8003228:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2200      	movs	r2, #0
 8003230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e00f      	b.n	8003258 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	699a      	ldr	r2, [r3, #24]
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	4013      	ands	r3, r2
 8003242:	68ba      	ldr	r2, [r7, #8]
 8003244:	429a      	cmp	r2, r3
 8003246:	bf0c      	ite	eq
 8003248:	2301      	moveq	r3, #1
 800324a:	2300      	movne	r3, #0
 800324c:	b2db      	uxtb	r3, r3
 800324e:	461a      	mov	r2, r3
 8003250:	79fb      	ldrb	r3, [r7, #7]
 8003252:	429a      	cmp	r2, r3
 8003254:	d0cd      	beq.n	80031f2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003256:	2300      	movs	r3, #0
}
 8003258:	4618      	mov	r0, r3
 800325a:	3710      	adds	r7, #16
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}

08003260 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af00      	add	r7, sp, #0
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	60b9      	str	r1, [r7, #8]
 800326a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800326c:	e02c      	b.n	80032c8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	68b9      	ldr	r1, [r7, #8]
 8003272:	68f8      	ldr	r0, [r7, #12]
 8003274:	f000 f870 	bl	8003358 <I2C_IsErrorOccurred>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d001      	beq.n	8003282 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e02a      	b.n	80032d8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003288:	d01e      	beq.n	80032c8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800328a:	f7fe fe23 	bl	8001ed4 <HAL_GetTick>
 800328e:	4602      	mov	r2, r0
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	68ba      	ldr	r2, [r7, #8]
 8003296:	429a      	cmp	r2, r3
 8003298:	d302      	bcc.n	80032a0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d113      	bne.n	80032c8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a4:	f043 0220 	orr.w	r2, r3, #32
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2220      	movs	r2, #32
 80032b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2200      	movs	r2, #0
 80032b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e007      	b.n	80032d8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	699b      	ldr	r3, [r3, #24]
 80032ce:	f003 0302 	and.w	r3, r3, #2
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d1cb      	bne.n	800326e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80032d6:	2300      	movs	r3, #0
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3710      	adds	r7, #16
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}

080032e0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b084      	sub	sp, #16
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	60f8      	str	r0, [r7, #12]
 80032e8:	60b9      	str	r1, [r7, #8]
 80032ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032ec:	e028      	b.n	8003340 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	68b9      	ldr	r1, [r7, #8]
 80032f2:	68f8      	ldr	r0, [r7, #12]
 80032f4:	f000 f830 	bl	8003358 <I2C_IsErrorOccurred>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d001      	beq.n	8003302 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e026      	b.n	8003350 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003302:	f7fe fde7 	bl	8001ed4 <HAL_GetTick>
 8003306:	4602      	mov	r2, r0
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	68ba      	ldr	r2, [r7, #8]
 800330e:	429a      	cmp	r2, r3
 8003310:	d302      	bcc.n	8003318 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d113      	bne.n	8003340 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800331c:	f043 0220 	orr.w	r2, r3, #32
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2220      	movs	r2, #32
 8003328:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2200      	movs	r2, #0
 8003330:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e007      	b.n	8003350 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	699b      	ldr	r3, [r3, #24]
 8003346:	f003 0320 	and.w	r3, r3, #32
 800334a:	2b20      	cmp	r3, #32
 800334c:	d1cf      	bne.n	80032ee <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800334e:	2300      	movs	r3, #0
}
 8003350:	4618      	mov	r0, r3
 8003352:	3710      	adds	r7, #16
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b08a      	sub	sp, #40	; 0x28
 800335c:	af00      	add	r7, sp, #0
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	60b9      	str	r1, [r7, #8]
 8003362:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003364:	2300      	movs	r3, #0
 8003366:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	699b      	ldr	r3, [r3, #24]
 8003370:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003372:	2300      	movs	r3, #0
 8003374:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800337a:	69bb      	ldr	r3, [r7, #24]
 800337c:	f003 0310 	and.w	r3, r3, #16
 8003380:	2b00      	cmp	r3, #0
 8003382:	d068      	beq.n	8003456 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2210      	movs	r2, #16
 800338a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800338c:	e049      	b.n	8003422 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003394:	d045      	beq.n	8003422 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003396:	f7fe fd9d 	bl	8001ed4 <HAL_GetTick>
 800339a:	4602      	mov	r2, r0
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	1ad3      	subs	r3, r2, r3
 80033a0:	68ba      	ldr	r2, [r7, #8]
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d302      	bcc.n	80033ac <I2C_IsErrorOccurred+0x54>
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d13a      	bne.n	8003422 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033b6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80033be:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	699b      	ldr	r3, [r3, #24]
 80033c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033ce:	d121      	bne.n	8003414 <I2C_IsErrorOccurred+0xbc>
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033d6:	d01d      	beq.n	8003414 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80033d8:	7cfb      	ldrb	r3, [r7, #19]
 80033da:	2b20      	cmp	r3, #32
 80033dc:	d01a      	beq.n	8003414 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	685a      	ldr	r2, [r3, #4]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033ec:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80033ee:	f7fe fd71 	bl	8001ed4 <HAL_GetTick>
 80033f2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033f4:	e00e      	b.n	8003414 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80033f6:	f7fe fd6d 	bl	8001ed4 <HAL_GetTick>
 80033fa:	4602      	mov	r2, r0
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	2b19      	cmp	r3, #25
 8003402:	d907      	bls.n	8003414 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8003404:	6a3b      	ldr	r3, [r7, #32]
 8003406:	f043 0320 	orr.w	r3, r3, #32
 800340a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003412:	e006      	b.n	8003422 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	699b      	ldr	r3, [r3, #24]
 800341a:	f003 0320 	and.w	r3, r3, #32
 800341e:	2b20      	cmp	r3, #32
 8003420:	d1e9      	bne.n	80033f6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	699b      	ldr	r3, [r3, #24]
 8003428:	f003 0320 	and.w	r3, r3, #32
 800342c:	2b20      	cmp	r3, #32
 800342e:	d003      	beq.n	8003438 <I2C_IsErrorOccurred+0xe0>
 8003430:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003434:	2b00      	cmp	r3, #0
 8003436:	d0aa      	beq.n	800338e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003438:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800343c:	2b00      	cmp	r3, #0
 800343e:	d103      	bne.n	8003448 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2220      	movs	r2, #32
 8003446:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003448:	6a3b      	ldr	r3, [r7, #32]
 800344a:	f043 0304 	orr.w	r3, r3, #4
 800344e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	699b      	ldr	r3, [r3, #24]
 800345c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800345e:	69bb      	ldr	r3, [r7, #24]
 8003460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003464:	2b00      	cmp	r3, #0
 8003466:	d00b      	beq.n	8003480 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003468:	6a3b      	ldr	r3, [r7, #32]
 800346a:	f043 0301 	orr.w	r3, r3, #1
 800346e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003478:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003486:	2b00      	cmp	r3, #0
 8003488:	d00b      	beq.n	80034a2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800348a:	6a3b      	ldr	r3, [r7, #32]
 800348c:	f043 0308 	orr.w	r3, r3, #8
 8003490:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800349a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80034a2:	69bb      	ldr	r3, [r7, #24]
 80034a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d00b      	beq.n	80034c4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80034ac:	6a3b      	ldr	r3, [r7, #32]
 80034ae:	f043 0302 	orr.w	r3, r3, #2
 80034b2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034bc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80034c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d01c      	beq.n	8003506 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80034cc:	68f8      	ldr	r0, [r7, #12]
 80034ce:	f7ff fe63 	bl	8003198 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	6859      	ldr	r1, [r3, #4]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	4b0d      	ldr	r3, [pc, #52]	; (8003514 <I2C_IsErrorOccurred+0x1bc>)
 80034de:	400b      	ands	r3, r1
 80034e0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034e6:	6a3b      	ldr	r3, [r7, #32]
 80034e8:	431a      	orrs	r2, r3
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2220      	movs	r2, #32
 80034f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2200      	movs	r2, #0
 80034fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003506:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800350a:	4618      	mov	r0, r3
 800350c:	3728      	adds	r7, #40	; 0x28
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	fe00e800 	.word	0xfe00e800

08003518 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003518:	b480      	push	{r7}
 800351a:	b087      	sub	sp, #28
 800351c:	af00      	add	r7, sp, #0
 800351e:	60f8      	str	r0, [r7, #12]
 8003520:	607b      	str	r3, [r7, #4]
 8003522:	460b      	mov	r3, r1
 8003524:	817b      	strh	r3, [r7, #10]
 8003526:	4613      	mov	r3, r2
 8003528:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800352a:	897b      	ldrh	r3, [r7, #10]
 800352c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003530:	7a7b      	ldrb	r3, [r7, #9]
 8003532:	041b      	lsls	r3, r3, #16
 8003534:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003538:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800353e:	6a3b      	ldr	r3, [r7, #32]
 8003540:	4313      	orrs	r3, r2
 8003542:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003546:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	685a      	ldr	r2, [r3, #4]
 800354e:	6a3b      	ldr	r3, [r7, #32]
 8003550:	0d5b      	lsrs	r3, r3, #21
 8003552:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003556:	4b08      	ldr	r3, [pc, #32]	; (8003578 <I2C_TransferConfig+0x60>)
 8003558:	430b      	orrs	r3, r1
 800355a:	43db      	mvns	r3, r3
 800355c:	ea02 0103 	and.w	r1, r2, r3
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	697a      	ldr	r2, [r7, #20]
 8003566:	430a      	orrs	r2, r1
 8003568:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800356a:	bf00      	nop
 800356c:	371c      	adds	r7, #28
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
 8003576:	bf00      	nop
 8003578:	03ff63ff 	.word	0x03ff63ff

0800357c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800358c:	b2db      	uxtb	r3, r3
 800358e:	2b20      	cmp	r3, #32
 8003590:	d138      	bne.n	8003604 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003598:	2b01      	cmp	r3, #1
 800359a:	d101      	bne.n	80035a0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800359c:	2302      	movs	r3, #2
 800359e:	e032      	b.n	8003606 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2224      	movs	r2, #36	; 0x24
 80035ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f022 0201 	bic.w	r2, r2, #1
 80035be:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80035ce:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	6819      	ldr	r1, [r3, #0]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	683a      	ldr	r2, [r7, #0]
 80035dc:	430a      	orrs	r2, r1
 80035de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f042 0201 	orr.w	r2, r2, #1
 80035ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2220      	movs	r2, #32
 80035f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003600:	2300      	movs	r3, #0
 8003602:	e000      	b.n	8003606 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003604:	2302      	movs	r3, #2
  }
}
 8003606:	4618      	mov	r0, r3
 8003608:	370c      	adds	r7, #12
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr

08003612 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003612:	b480      	push	{r7}
 8003614:	b085      	sub	sp, #20
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
 800361a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003622:	b2db      	uxtb	r3, r3
 8003624:	2b20      	cmp	r3, #32
 8003626:	d139      	bne.n	800369c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800362e:	2b01      	cmp	r3, #1
 8003630:	d101      	bne.n	8003636 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003632:	2302      	movs	r3, #2
 8003634:	e033      	b.n	800369e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2201      	movs	r2, #1
 800363a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2224      	movs	r2, #36	; 0x24
 8003642:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f022 0201 	bic.w	r2, r2, #1
 8003654:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003664:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	021b      	lsls	r3, r3, #8
 800366a:	68fa      	ldr	r2, [r7, #12]
 800366c:	4313      	orrs	r3, r2
 800366e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	68fa      	ldr	r2, [r7, #12]
 8003676:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f042 0201 	orr.w	r2, r2, #1
 8003686:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2220      	movs	r2, #32
 800368c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003698:	2300      	movs	r3, #0
 800369a:	e000      	b.n	800369e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800369c:	2302      	movs	r3, #2
  }
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3714      	adds	r7, #20
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr

080036aa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80036aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036ac:	b08f      	sub	sp, #60	; 0x3c
 80036ae:	af0a      	add	r7, sp, #40	; 0x28
 80036b0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d101      	bne.n	80036bc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e116      	b.n	80038ea <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d106      	bne.n	80036dc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f7fe f9de 	bl	8001a98 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2203      	movs	r2, #3
 80036e0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d102      	bne.n	80036f6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4618      	mov	r0, r3
 80036fc:	f001 fef0 	bl	80054e0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	603b      	str	r3, [r7, #0]
 8003706:	687e      	ldr	r6, [r7, #4]
 8003708:	466d      	mov	r5, sp
 800370a:	f106 0410 	add.w	r4, r6, #16
 800370e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003710:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003712:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003714:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003716:	e894 0003 	ldmia.w	r4, {r0, r1}
 800371a:	e885 0003 	stmia.w	r5, {r0, r1}
 800371e:	1d33      	adds	r3, r6, #4
 8003720:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003722:	6838      	ldr	r0, [r7, #0]
 8003724:	f001 fe54 	bl	80053d0 <USB_CoreInit>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d005      	beq.n	800373a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2202      	movs	r2, #2
 8003732:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e0d7      	b.n	80038ea <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	2100      	movs	r1, #0
 8003740:	4618      	mov	r0, r3
 8003742:	f001 fede 	bl	8005502 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003746:	2300      	movs	r3, #0
 8003748:	73fb      	strb	r3, [r7, #15]
 800374a:	e04a      	b.n	80037e2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800374c:	7bfa      	ldrb	r2, [r7, #15]
 800374e:	6879      	ldr	r1, [r7, #4]
 8003750:	4613      	mov	r3, r2
 8003752:	00db      	lsls	r3, r3, #3
 8003754:	4413      	add	r3, r2
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	440b      	add	r3, r1
 800375a:	333d      	adds	r3, #61	; 0x3d
 800375c:	2201      	movs	r2, #1
 800375e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003760:	7bfa      	ldrb	r2, [r7, #15]
 8003762:	6879      	ldr	r1, [r7, #4]
 8003764:	4613      	mov	r3, r2
 8003766:	00db      	lsls	r3, r3, #3
 8003768:	4413      	add	r3, r2
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	440b      	add	r3, r1
 800376e:	333c      	adds	r3, #60	; 0x3c
 8003770:	7bfa      	ldrb	r2, [r7, #15]
 8003772:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003774:	7bfa      	ldrb	r2, [r7, #15]
 8003776:	7bfb      	ldrb	r3, [r7, #15]
 8003778:	b298      	uxth	r0, r3
 800377a:	6879      	ldr	r1, [r7, #4]
 800377c:	4613      	mov	r3, r2
 800377e:	00db      	lsls	r3, r3, #3
 8003780:	4413      	add	r3, r2
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	440b      	add	r3, r1
 8003786:	3344      	adds	r3, #68	; 0x44
 8003788:	4602      	mov	r2, r0
 800378a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800378c:	7bfa      	ldrb	r2, [r7, #15]
 800378e:	6879      	ldr	r1, [r7, #4]
 8003790:	4613      	mov	r3, r2
 8003792:	00db      	lsls	r3, r3, #3
 8003794:	4413      	add	r3, r2
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	440b      	add	r3, r1
 800379a:	3340      	adds	r3, #64	; 0x40
 800379c:	2200      	movs	r2, #0
 800379e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80037a0:	7bfa      	ldrb	r2, [r7, #15]
 80037a2:	6879      	ldr	r1, [r7, #4]
 80037a4:	4613      	mov	r3, r2
 80037a6:	00db      	lsls	r3, r3, #3
 80037a8:	4413      	add	r3, r2
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	440b      	add	r3, r1
 80037ae:	3348      	adds	r3, #72	; 0x48
 80037b0:	2200      	movs	r2, #0
 80037b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80037b4:	7bfa      	ldrb	r2, [r7, #15]
 80037b6:	6879      	ldr	r1, [r7, #4]
 80037b8:	4613      	mov	r3, r2
 80037ba:	00db      	lsls	r3, r3, #3
 80037bc:	4413      	add	r3, r2
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	440b      	add	r3, r1
 80037c2:	334c      	adds	r3, #76	; 0x4c
 80037c4:	2200      	movs	r2, #0
 80037c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80037c8:	7bfa      	ldrb	r2, [r7, #15]
 80037ca:	6879      	ldr	r1, [r7, #4]
 80037cc:	4613      	mov	r3, r2
 80037ce:	00db      	lsls	r3, r3, #3
 80037d0:	4413      	add	r3, r2
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	440b      	add	r3, r1
 80037d6:	3354      	adds	r3, #84	; 0x54
 80037d8:	2200      	movs	r2, #0
 80037da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037dc:	7bfb      	ldrb	r3, [r7, #15]
 80037de:	3301      	adds	r3, #1
 80037e0:	73fb      	strb	r3, [r7, #15]
 80037e2:	7bfa      	ldrb	r2, [r7, #15]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d3af      	bcc.n	800374c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037ec:	2300      	movs	r3, #0
 80037ee:	73fb      	strb	r3, [r7, #15]
 80037f0:	e044      	b.n	800387c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80037f2:	7bfa      	ldrb	r2, [r7, #15]
 80037f4:	6879      	ldr	r1, [r7, #4]
 80037f6:	4613      	mov	r3, r2
 80037f8:	00db      	lsls	r3, r3, #3
 80037fa:	4413      	add	r3, r2
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	440b      	add	r3, r1
 8003800:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003804:	2200      	movs	r2, #0
 8003806:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003808:	7bfa      	ldrb	r2, [r7, #15]
 800380a:	6879      	ldr	r1, [r7, #4]
 800380c:	4613      	mov	r3, r2
 800380e:	00db      	lsls	r3, r3, #3
 8003810:	4413      	add	r3, r2
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	440b      	add	r3, r1
 8003816:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800381a:	7bfa      	ldrb	r2, [r7, #15]
 800381c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800381e:	7bfa      	ldrb	r2, [r7, #15]
 8003820:	6879      	ldr	r1, [r7, #4]
 8003822:	4613      	mov	r3, r2
 8003824:	00db      	lsls	r3, r3, #3
 8003826:	4413      	add	r3, r2
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	440b      	add	r3, r1
 800382c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003830:	2200      	movs	r2, #0
 8003832:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003834:	7bfa      	ldrb	r2, [r7, #15]
 8003836:	6879      	ldr	r1, [r7, #4]
 8003838:	4613      	mov	r3, r2
 800383a:	00db      	lsls	r3, r3, #3
 800383c:	4413      	add	r3, r2
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	440b      	add	r3, r1
 8003842:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003846:	2200      	movs	r2, #0
 8003848:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800384a:	7bfa      	ldrb	r2, [r7, #15]
 800384c:	6879      	ldr	r1, [r7, #4]
 800384e:	4613      	mov	r3, r2
 8003850:	00db      	lsls	r3, r3, #3
 8003852:	4413      	add	r3, r2
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	440b      	add	r3, r1
 8003858:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800385c:	2200      	movs	r2, #0
 800385e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003860:	7bfa      	ldrb	r2, [r7, #15]
 8003862:	6879      	ldr	r1, [r7, #4]
 8003864:	4613      	mov	r3, r2
 8003866:	00db      	lsls	r3, r3, #3
 8003868:	4413      	add	r3, r2
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	440b      	add	r3, r1
 800386e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003872:	2200      	movs	r2, #0
 8003874:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003876:	7bfb      	ldrb	r3, [r7, #15]
 8003878:	3301      	adds	r3, #1
 800387a:	73fb      	strb	r3, [r7, #15]
 800387c:	7bfa      	ldrb	r2, [r7, #15]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	429a      	cmp	r2, r3
 8003884:	d3b5      	bcc.n	80037f2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	603b      	str	r3, [r7, #0]
 800388c:	687e      	ldr	r6, [r7, #4]
 800388e:	466d      	mov	r5, sp
 8003890:	f106 0410 	add.w	r4, r6, #16
 8003894:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003896:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003898:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800389a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800389c:	e894 0003 	ldmia.w	r4, {r0, r1}
 80038a0:	e885 0003 	stmia.w	r5, {r0, r1}
 80038a4:	1d33      	adds	r3, r6, #4
 80038a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80038a8:	6838      	ldr	r0, [r7, #0]
 80038aa:	f001 fe77 	bl	800559c <USB_DevInit>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d005      	beq.n	80038c0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2202      	movs	r2, #2
 80038b8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e014      	b.n	80038ea <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d102      	bne.n	80038de <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f000 f80b 	bl	80038f4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4618      	mov	r0, r3
 80038e4:	f002 f845 	bl	8005972 <USB_DevDisconnect>

  return HAL_OK;
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3714      	adds	r7, #20
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080038f4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b085      	sub	sp, #20
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2201      	movs	r2, #1
 8003906:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	699b      	ldr	r3, [r3, #24]
 8003916:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003922:	4b05      	ldr	r3, [pc, #20]	; (8003938 <HAL_PCDEx_ActivateLPM+0x44>)
 8003924:	4313      	orrs	r3, r2
 8003926:	68fa      	ldr	r2, [r7, #12]
 8003928:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800392a:	2300      	movs	r3, #0
}
 800392c:	4618      	mov	r0, r3
 800392e:	3714      	adds	r7, #20
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr
 8003938:	10000003 	.word	0x10000003

0800393c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800393c:	b480      	push	{r7}
 800393e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003940:	4b05      	ldr	r3, [pc, #20]	; (8003958 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a04      	ldr	r2, [pc, #16]	; (8003958 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003946:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800394a:	6013      	str	r3, [r2, #0]
}
 800394c:	bf00      	nop
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	40007000 	.word	0x40007000

0800395c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003962:	2300      	movs	r3, #0
 8003964:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003966:	4b23      	ldr	r3, [pc, #140]	; (80039f4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396a:	4a22      	ldr	r2, [pc, #136]	; (80039f4 <HAL_PWREx_EnableOverDrive+0x98>)
 800396c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003970:	6413      	str	r3, [r2, #64]	; 0x40
 8003972:	4b20      	ldr	r3, [pc, #128]	; (80039f4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800397a:	603b      	str	r3, [r7, #0]
 800397c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800397e:	4b1e      	ldr	r3, [pc, #120]	; (80039f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a1d      	ldr	r2, [pc, #116]	; (80039f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003984:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003988:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800398a:	f7fe faa3 	bl	8001ed4 <HAL_GetTick>
 800398e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003990:	e009      	b.n	80039a6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003992:	f7fe fa9f 	bl	8001ed4 <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039a0:	d901      	bls.n	80039a6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e022      	b.n	80039ec <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80039a6:	4b14      	ldr	r3, [pc, #80]	; (80039f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039b2:	d1ee      	bne.n	8003992 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80039b4:	4b10      	ldr	r3, [pc, #64]	; (80039f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a0f      	ldr	r2, [pc, #60]	; (80039f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80039ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039be:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80039c0:	f7fe fa88 	bl	8001ed4 <HAL_GetTick>
 80039c4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80039c6:	e009      	b.n	80039dc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80039c8:	f7fe fa84 	bl	8001ed4 <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039d6:	d901      	bls.n	80039dc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80039d8:	2303      	movs	r3, #3
 80039da:	e007      	b.n	80039ec <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80039dc:	4b06      	ldr	r3, [pc, #24]	; (80039f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80039e8:	d1ee      	bne.n	80039c8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80039ea:	2300      	movs	r3, #0
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3708      	adds	r7, #8
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	40023800 	.word	0x40023800
 80039f8:	40007000 	.word	0x40007000

080039fc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b086      	sub	sp, #24
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003a04:	2300      	movs	r3, #0
 8003a06:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d101      	bne.n	8003a12 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e291      	b.n	8003f36 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0301 	and.w	r3, r3, #1
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	f000 8087 	beq.w	8003b2e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a20:	4b96      	ldr	r3, [pc, #600]	; (8003c7c <HAL_RCC_OscConfig+0x280>)
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	f003 030c 	and.w	r3, r3, #12
 8003a28:	2b04      	cmp	r3, #4
 8003a2a:	d00c      	beq.n	8003a46 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a2c:	4b93      	ldr	r3, [pc, #588]	; (8003c7c <HAL_RCC_OscConfig+0x280>)
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	f003 030c 	and.w	r3, r3, #12
 8003a34:	2b08      	cmp	r3, #8
 8003a36:	d112      	bne.n	8003a5e <HAL_RCC_OscConfig+0x62>
 8003a38:	4b90      	ldr	r3, [pc, #576]	; (8003c7c <HAL_RCC_OscConfig+0x280>)
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a44:	d10b      	bne.n	8003a5e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a46:	4b8d      	ldr	r3, [pc, #564]	; (8003c7c <HAL_RCC_OscConfig+0x280>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d06c      	beq.n	8003b2c <HAL_RCC_OscConfig+0x130>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d168      	bne.n	8003b2c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e26b      	b.n	8003f36 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a66:	d106      	bne.n	8003a76 <HAL_RCC_OscConfig+0x7a>
 8003a68:	4b84      	ldr	r3, [pc, #528]	; (8003c7c <HAL_RCC_OscConfig+0x280>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a83      	ldr	r2, [pc, #524]	; (8003c7c <HAL_RCC_OscConfig+0x280>)
 8003a6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a72:	6013      	str	r3, [r2, #0]
 8003a74:	e02e      	b.n	8003ad4 <HAL_RCC_OscConfig+0xd8>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d10c      	bne.n	8003a98 <HAL_RCC_OscConfig+0x9c>
 8003a7e:	4b7f      	ldr	r3, [pc, #508]	; (8003c7c <HAL_RCC_OscConfig+0x280>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a7e      	ldr	r2, [pc, #504]	; (8003c7c <HAL_RCC_OscConfig+0x280>)
 8003a84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a88:	6013      	str	r3, [r2, #0]
 8003a8a:	4b7c      	ldr	r3, [pc, #496]	; (8003c7c <HAL_RCC_OscConfig+0x280>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a7b      	ldr	r2, [pc, #492]	; (8003c7c <HAL_RCC_OscConfig+0x280>)
 8003a90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a94:	6013      	str	r3, [r2, #0]
 8003a96:	e01d      	b.n	8003ad4 <HAL_RCC_OscConfig+0xd8>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003aa0:	d10c      	bne.n	8003abc <HAL_RCC_OscConfig+0xc0>
 8003aa2:	4b76      	ldr	r3, [pc, #472]	; (8003c7c <HAL_RCC_OscConfig+0x280>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a75      	ldr	r2, [pc, #468]	; (8003c7c <HAL_RCC_OscConfig+0x280>)
 8003aa8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003aac:	6013      	str	r3, [r2, #0]
 8003aae:	4b73      	ldr	r3, [pc, #460]	; (8003c7c <HAL_RCC_OscConfig+0x280>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a72      	ldr	r2, [pc, #456]	; (8003c7c <HAL_RCC_OscConfig+0x280>)
 8003ab4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ab8:	6013      	str	r3, [r2, #0]
 8003aba:	e00b      	b.n	8003ad4 <HAL_RCC_OscConfig+0xd8>
 8003abc:	4b6f      	ldr	r3, [pc, #444]	; (8003c7c <HAL_RCC_OscConfig+0x280>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a6e      	ldr	r2, [pc, #440]	; (8003c7c <HAL_RCC_OscConfig+0x280>)
 8003ac2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ac6:	6013      	str	r3, [r2, #0]
 8003ac8:	4b6c      	ldr	r3, [pc, #432]	; (8003c7c <HAL_RCC_OscConfig+0x280>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a6b      	ldr	r2, [pc, #428]	; (8003c7c <HAL_RCC_OscConfig+0x280>)
 8003ace:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ad2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d013      	beq.n	8003b04 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003adc:	f7fe f9fa 	bl	8001ed4 <HAL_GetTick>
 8003ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ae2:	e008      	b.n	8003af6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ae4:	f7fe f9f6 	bl	8001ed4 <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	2b64      	cmp	r3, #100	; 0x64
 8003af0:	d901      	bls.n	8003af6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e21f      	b.n	8003f36 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003af6:	4b61      	ldr	r3, [pc, #388]	; (8003c7c <HAL_RCC_OscConfig+0x280>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d0f0      	beq.n	8003ae4 <HAL_RCC_OscConfig+0xe8>
 8003b02:	e014      	b.n	8003b2e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b04:	f7fe f9e6 	bl	8001ed4 <HAL_GetTick>
 8003b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b0a:	e008      	b.n	8003b1e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b0c:	f7fe f9e2 	bl	8001ed4 <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	2b64      	cmp	r3, #100	; 0x64
 8003b18:	d901      	bls.n	8003b1e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e20b      	b.n	8003f36 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b1e:	4b57      	ldr	r3, [pc, #348]	; (8003c7c <HAL_RCC_OscConfig+0x280>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d1f0      	bne.n	8003b0c <HAL_RCC_OscConfig+0x110>
 8003b2a:	e000      	b.n	8003b2e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0302 	and.w	r3, r3, #2
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d069      	beq.n	8003c0e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b3a:	4b50      	ldr	r3, [pc, #320]	; (8003c7c <HAL_RCC_OscConfig+0x280>)
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	f003 030c 	and.w	r3, r3, #12
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d00b      	beq.n	8003b5e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b46:	4b4d      	ldr	r3, [pc, #308]	; (8003c7c <HAL_RCC_OscConfig+0x280>)
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f003 030c 	and.w	r3, r3, #12
 8003b4e:	2b08      	cmp	r3, #8
 8003b50:	d11c      	bne.n	8003b8c <HAL_RCC_OscConfig+0x190>
 8003b52:	4b4a      	ldr	r3, [pc, #296]	; (8003c7c <HAL_RCC_OscConfig+0x280>)
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d116      	bne.n	8003b8c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b5e:	4b47      	ldr	r3, [pc, #284]	; (8003c7c <HAL_RCC_OscConfig+0x280>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0302 	and.w	r3, r3, #2
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d005      	beq.n	8003b76 <HAL_RCC_OscConfig+0x17a>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	68db      	ldr	r3, [r3, #12]
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d001      	beq.n	8003b76 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e1df      	b.n	8003f36 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b76:	4b41      	ldr	r3, [pc, #260]	; (8003c7c <HAL_RCC_OscConfig+0x280>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	691b      	ldr	r3, [r3, #16]
 8003b82:	00db      	lsls	r3, r3, #3
 8003b84:	493d      	ldr	r1, [pc, #244]	; (8003c7c <HAL_RCC_OscConfig+0x280>)
 8003b86:	4313      	orrs	r3, r2
 8003b88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b8a:	e040      	b.n	8003c0e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d023      	beq.n	8003bdc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b94:	4b39      	ldr	r3, [pc, #228]	; (8003c7c <HAL_RCC_OscConfig+0x280>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a38      	ldr	r2, [pc, #224]	; (8003c7c <HAL_RCC_OscConfig+0x280>)
 8003b9a:	f043 0301 	orr.w	r3, r3, #1
 8003b9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ba0:	f7fe f998 	bl	8001ed4 <HAL_GetTick>
 8003ba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ba6:	e008      	b.n	8003bba <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ba8:	f7fe f994 	bl	8001ed4 <HAL_GetTick>
 8003bac:	4602      	mov	r2, r0
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	2b02      	cmp	r3, #2
 8003bb4:	d901      	bls.n	8003bba <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e1bd      	b.n	8003f36 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bba:	4b30      	ldr	r3, [pc, #192]	; (8003c7c <HAL_RCC_OscConfig+0x280>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0302 	and.w	r3, r3, #2
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d0f0      	beq.n	8003ba8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bc6:	4b2d      	ldr	r3, [pc, #180]	; (8003c7c <HAL_RCC_OscConfig+0x280>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	691b      	ldr	r3, [r3, #16]
 8003bd2:	00db      	lsls	r3, r3, #3
 8003bd4:	4929      	ldr	r1, [pc, #164]	; (8003c7c <HAL_RCC_OscConfig+0x280>)
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	600b      	str	r3, [r1, #0]
 8003bda:	e018      	b.n	8003c0e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bdc:	4b27      	ldr	r3, [pc, #156]	; (8003c7c <HAL_RCC_OscConfig+0x280>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a26      	ldr	r2, [pc, #152]	; (8003c7c <HAL_RCC_OscConfig+0x280>)
 8003be2:	f023 0301 	bic.w	r3, r3, #1
 8003be6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003be8:	f7fe f974 	bl	8001ed4 <HAL_GetTick>
 8003bec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bee:	e008      	b.n	8003c02 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bf0:	f7fe f970 	bl	8001ed4 <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d901      	bls.n	8003c02 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e199      	b.n	8003f36 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c02:	4b1e      	ldr	r3, [pc, #120]	; (8003c7c <HAL_RCC_OscConfig+0x280>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0302 	and.w	r3, r3, #2
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d1f0      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0308 	and.w	r3, r3, #8
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d038      	beq.n	8003c8c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	695b      	ldr	r3, [r3, #20]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d019      	beq.n	8003c56 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c22:	4b16      	ldr	r3, [pc, #88]	; (8003c7c <HAL_RCC_OscConfig+0x280>)
 8003c24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c26:	4a15      	ldr	r2, [pc, #84]	; (8003c7c <HAL_RCC_OscConfig+0x280>)
 8003c28:	f043 0301 	orr.w	r3, r3, #1
 8003c2c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c2e:	f7fe f951 	bl	8001ed4 <HAL_GetTick>
 8003c32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c34:	e008      	b.n	8003c48 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c36:	f7fe f94d 	bl	8001ed4 <HAL_GetTick>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	2b02      	cmp	r3, #2
 8003c42:	d901      	bls.n	8003c48 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c44:	2303      	movs	r3, #3
 8003c46:	e176      	b.n	8003f36 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c48:	4b0c      	ldr	r3, [pc, #48]	; (8003c7c <HAL_RCC_OscConfig+0x280>)
 8003c4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c4c:	f003 0302 	and.w	r3, r3, #2
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d0f0      	beq.n	8003c36 <HAL_RCC_OscConfig+0x23a>
 8003c54:	e01a      	b.n	8003c8c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c56:	4b09      	ldr	r3, [pc, #36]	; (8003c7c <HAL_RCC_OscConfig+0x280>)
 8003c58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c5a:	4a08      	ldr	r2, [pc, #32]	; (8003c7c <HAL_RCC_OscConfig+0x280>)
 8003c5c:	f023 0301 	bic.w	r3, r3, #1
 8003c60:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c62:	f7fe f937 	bl	8001ed4 <HAL_GetTick>
 8003c66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c68:	e00a      	b.n	8003c80 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c6a:	f7fe f933 	bl	8001ed4 <HAL_GetTick>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	2b02      	cmp	r3, #2
 8003c76:	d903      	bls.n	8003c80 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	e15c      	b.n	8003f36 <HAL_RCC_OscConfig+0x53a>
 8003c7c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c80:	4b91      	ldr	r3, [pc, #580]	; (8003ec8 <HAL_RCC_OscConfig+0x4cc>)
 8003c82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c84:	f003 0302 	and.w	r3, r3, #2
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d1ee      	bne.n	8003c6a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0304 	and.w	r3, r3, #4
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	f000 80a4 	beq.w	8003de2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c9a:	4b8b      	ldr	r3, [pc, #556]	; (8003ec8 <HAL_RCC_OscConfig+0x4cc>)
 8003c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d10d      	bne.n	8003cc2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ca6:	4b88      	ldr	r3, [pc, #544]	; (8003ec8 <HAL_RCC_OscConfig+0x4cc>)
 8003ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003caa:	4a87      	ldr	r2, [pc, #540]	; (8003ec8 <HAL_RCC_OscConfig+0x4cc>)
 8003cac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cb0:	6413      	str	r3, [r2, #64]	; 0x40
 8003cb2:	4b85      	ldr	r3, [pc, #532]	; (8003ec8 <HAL_RCC_OscConfig+0x4cc>)
 8003cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cba:	60bb      	str	r3, [r7, #8]
 8003cbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cc2:	4b82      	ldr	r3, [pc, #520]	; (8003ecc <HAL_RCC_OscConfig+0x4d0>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d118      	bne.n	8003d00 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003cce:	4b7f      	ldr	r3, [pc, #508]	; (8003ecc <HAL_RCC_OscConfig+0x4d0>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a7e      	ldr	r2, [pc, #504]	; (8003ecc <HAL_RCC_OscConfig+0x4d0>)
 8003cd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cda:	f7fe f8fb 	bl	8001ed4 <HAL_GetTick>
 8003cde:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ce0:	e008      	b.n	8003cf4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ce2:	f7fe f8f7 	bl	8001ed4 <HAL_GetTick>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	2b64      	cmp	r3, #100	; 0x64
 8003cee:	d901      	bls.n	8003cf4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	e120      	b.n	8003f36 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cf4:	4b75      	ldr	r3, [pc, #468]	; (8003ecc <HAL_RCC_OscConfig+0x4d0>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d0f0      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d106      	bne.n	8003d16 <HAL_RCC_OscConfig+0x31a>
 8003d08:	4b6f      	ldr	r3, [pc, #444]	; (8003ec8 <HAL_RCC_OscConfig+0x4cc>)
 8003d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d0c:	4a6e      	ldr	r2, [pc, #440]	; (8003ec8 <HAL_RCC_OscConfig+0x4cc>)
 8003d0e:	f043 0301 	orr.w	r3, r3, #1
 8003d12:	6713      	str	r3, [r2, #112]	; 0x70
 8003d14:	e02d      	b.n	8003d72 <HAL_RCC_OscConfig+0x376>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d10c      	bne.n	8003d38 <HAL_RCC_OscConfig+0x33c>
 8003d1e:	4b6a      	ldr	r3, [pc, #424]	; (8003ec8 <HAL_RCC_OscConfig+0x4cc>)
 8003d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d22:	4a69      	ldr	r2, [pc, #420]	; (8003ec8 <HAL_RCC_OscConfig+0x4cc>)
 8003d24:	f023 0301 	bic.w	r3, r3, #1
 8003d28:	6713      	str	r3, [r2, #112]	; 0x70
 8003d2a:	4b67      	ldr	r3, [pc, #412]	; (8003ec8 <HAL_RCC_OscConfig+0x4cc>)
 8003d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d2e:	4a66      	ldr	r2, [pc, #408]	; (8003ec8 <HAL_RCC_OscConfig+0x4cc>)
 8003d30:	f023 0304 	bic.w	r3, r3, #4
 8003d34:	6713      	str	r3, [r2, #112]	; 0x70
 8003d36:	e01c      	b.n	8003d72 <HAL_RCC_OscConfig+0x376>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	2b05      	cmp	r3, #5
 8003d3e:	d10c      	bne.n	8003d5a <HAL_RCC_OscConfig+0x35e>
 8003d40:	4b61      	ldr	r3, [pc, #388]	; (8003ec8 <HAL_RCC_OscConfig+0x4cc>)
 8003d42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d44:	4a60      	ldr	r2, [pc, #384]	; (8003ec8 <HAL_RCC_OscConfig+0x4cc>)
 8003d46:	f043 0304 	orr.w	r3, r3, #4
 8003d4a:	6713      	str	r3, [r2, #112]	; 0x70
 8003d4c:	4b5e      	ldr	r3, [pc, #376]	; (8003ec8 <HAL_RCC_OscConfig+0x4cc>)
 8003d4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d50:	4a5d      	ldr	r2, [pc, #372]	; (8003ec8 <HAL_RCC_OscConfig+0x4cc>)
 8003d52:	f043 0301 	orr.w	r3, r3, #1
 8003d56:	6713      	str	r3, [r2, #112]	; 0x70
 8003d58:	e00b      	b.n	8003d72 <HAL_RCC_OscConfig+0x376>
 8003d5a:	4b5b      	ldr	r3, [pc, #364]	; (8003ec8 <HAL_RCC_OscConfig+0x4cc>)
 8003d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d5e:	4a5a      	ldr	r2, [pc, #360]	; (8003ec8 <HAL_RCC_OscConfig+0x4cc>)
 8003d60:	f023 0301 	bic.w	r3, r3, #1
 8003d64:	6713      	str	r3, [r2, #112]	; 0x70
 8003d66:	4b58      	ldr	r3, [pc, #352]	; (8003ec8 <HAL_RCC_OscConfig+0x4cc>)
 8003d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d6a:	4a57      	ldr	r2, [pc, #348]	; (8003ec8 <HAL_RCC_OscConfig+0x4cc>)
 8003d6c:	f023 0304 	bic.w	r3, r3, #4
 8003d70:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d015      	beq.n	8003da6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d7a:	f7fe f8ab 	bl	8001ed4 <HAL_GetTick>
 8003d7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d80:	e00a      	b.n	8003d98 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d82:	f7fe f8a7 	bl	8001ed4 <HAL_GetTick>
 8003d86:	4602      	mov	r2, r0
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d901      	bls.n	8003d98 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003d94:	2303      	movs	r3, #3
 8003d96:	e0ce      	b.n	8003f36 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d98:	4b4b      	ldr	r3, [pc, #300]	; (8003ec8 <HAL_RCC_OscConfig+0x4cc>)
 8003d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d9c:	f003 0302 	and.w	r3, r3, #2
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d0ee      	beq.n	8003d82 <HAL_RCC_OscConfig+0x386>
 8003da4:	e014      	b.n	8003dd0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003da6:	f7fe f895 	bl	8001ed4 <HAL_GetTick>
 8003daa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dac:	e00a      	b.n	8003dc4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dae:	f7fe f891 	bl	8001ed4 <HAL_GetTick>
 8003db2:	4602      	mov	r2, r0
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d901      	bls.n	8003dc4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	e0b8      	b.n	8003f36 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dc4:	4b40      	ldr	r3, [pc, #256]	; (8003ec8 <HAL_RCC_OscConfig+0x4cc>)
 8003dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc8:	f003 0302 	and.w	r3, r3, #2
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d1ee      	bne.n	8003dae <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003dd0:	7dfb      	ldrb	r3, [r7, #23]
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d105      	bne.n	8003de2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dd6:	4b3c      	ldr	r3, [pc, #240]	; (8003ec8 <HAL_RCC_OscConfig+0x4cc>)
 8003dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dda:	4a3b      	ldr	r2, [pc, #236]	; (8003ec8 <HAL_RCC_OscConfig+0x4cc>)
 8003ddc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003de0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	699b      	ldr	r3, [r3, #24]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	f000 80a4 	beq.w	8003f34 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003dec:	4b36      	ldr	r3, [pc, #216]	; (8003ec8 <HAL_RCC_OscConfig+0x4cc>)
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	f003 030c 	and.w	r3, r3, #12
 8003df4:	2b08      	cmp	r3, #8
 8003df6:	d06b      	beq.n	8003ed0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	699b      	ldr	r3, [r3, #24]
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d149      	bne.n	8003e94 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e00:	4b31      	ldr	r3, [pc, #196]	; (8003ec8 <HAL_RCC_OscConfig+0x4cc>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a30      	ldr	r2, [pc, #192]	; (8003ec8 <HAL_RCC_OscConfig+0x4cc>)
 8003e06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e0c:	f7fe f862 	bl	8001ed4 <HAL_GetTick>
 8003e10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e12:	e008      	b.n	8003e26 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e14:	f7fe f85e 	bl	8001ed4 <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	2b02      	cmp	r3, #2
 8003e20:	d901      	bls.n	8003e26 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	e087      	b.n	8003f36 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e26:	4b28      	ldr	r3, [pc, #160]	; (8003ec8 <HAL_RCC_OscConfig+0x4cc>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d1f0      	bne.n	8003e14 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	69da      	ldr	r2, [r3, #28]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a1b      	ldr	r3, [r3, #32]
 8003e3a:	431a      	orrs	r2, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e40:	019b      	lsls	r3, r3, #6
 8003e42:	431a      	orrs	r2, r3
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e48:	085b      	lsrs	r3, r3, #1
 8003e4a:	3b01      	subs	r3, #1
 8003e4c:	041b      	lsls	r3, r3, #16
 8003e4e:	431a      	orrs	r2, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e54:	061b      	lsls	r3, r3, #24
 8003e56:	4313      	orrs	r3, r2
 8003e58:	4a1b      	ldr	r2, [pc, #108]	; (8003ec8 <HAL_RCC_OscConfig+0x4cc>)
 8003e5a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003e5e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e60:	4b19      	ldr	r3, [pc, #100]	; (8003ec8 <HAL_RCC_OscConfig+0x4cc>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a18      	ldr	r2, [pc, #96]	; (8003ec8 <HAL_RCC_OscConfig+0x4cc>)
 8003e66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e6c:	f7fe f832 	bl	8001ed4 <HAL_GetTick>
 8003e70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e72:	e008      	b.n	8003e86 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e74:	f7fe f82e 	bl	8001ed4 <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d901      	bls.n	8003e86 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e057      	b.n	8003f36 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e86:	4b10      	ldr	r3, [pc, #64]	; (8003ec8 <HAL_RCC_OscConfig+0x4cc>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d0f0      	beq.n	8003e74 <HAL_RCC_OscConfig+0x478>
 8003e92:	e04f      	b.n	8003f34 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e94:	4b0c      	ldr	r3, [pc, #48]	; (8003ec8 <HAL_RCC_OscConfig+0x4cc>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a0b      	ldr	r2, [pc, #44]	; (8003ec8 <HAL_RCC_OscConfig+0x4cc>)
 8003e9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea0:	f7fe f818 	bl	8001ed4 <HAL_GetTick>
 8003ea4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ea6:	e008      	b.n	8003eba <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ea8:	f7fe f814 	bl	8001ed4 <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	2b02      	cmp	r3, #2
 8003eb4:	d901      	bls.n	8003eba <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e03d      	b.n	8003f36 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eba:	4b03      	ldr	r3, [pc, #12]	; (8003ec8 <HAL_RCC_OscConfig+0x4cc>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d1f0      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x4ac>
 8003ec6:	e035      	b.n	8003f34 <HAL_RCC_OscConfig+0x538>
 8003ec8:	40023800 	.word	0x40023800
 8003ecc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003ed0:	4b1b      	ldr	r3, [pc, #108]	; (8003f40 <HAL_RCC_OscConfig+0x544>)
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	699b      	ldr	r3, [r3, #24]
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d028      	beq.n	8003f30 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d121      	bne.n	8003f30 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d11a      	bne.n	8003f30 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003efa:	68fa      	ldr	r2, [r7, #12]
 8003efc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f00:	4013      	ands	r3, r2
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f06:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d111      	bne.n	8003f30 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f16:	085b      	lsrs	r3, r3, #1
 8003f18:	3b01      	subs	r3, #1
 8003f1a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d107      	bne.n	8003f30 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f2a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d001      	beq.n	8003f34 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e000      	b.n	8003f36 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003f34:	2300      	movs	r3, #0
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3718      	adds	r7, #24
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	40023800 	.word	0x40023800

08003f44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d101      	bne.n	8003f5c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e0d0      	b.n	80040fe <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f5c:	4b6a      	ldr	r3, [pc, #424]	; (8004108 <HAL_RCC_ClockConfig+0x1c4>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 030f 	and.w	r3, r3, #15
 8003f64:	683a      	ldr	r2, [r7, #0]
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d910      	bls.n	8003f8c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f6a:	4b67      	ldr	r3, [pc, #412]	; (8004108 <HAL_RCC_ClockConfig+0x1c4>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f023 020f 	bic.w	r2, r3, #15
 8003f72:	4965      	ldr	r1, [pc, #404]	; (8004108 <HAL_RCC_ClockConfig+0x1c4>)
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f7a:	4b63      	ldr	r3, [pc, #396]	; (8004108 <HAL_RCC_ClockConfig+0x1c4>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 030f 	and.w	r3, r3, #15
 8003f82:	683a      	ldr	r2, [r7, #0]
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d001      	beq.n	8003f8c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e0b8      	b.n	80040fe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 0302 	and.w	r3, r3, #2
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d020      	beq.n	8003fda <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0304 	and.w	r3, r3, #4
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d005      	beq.n	8003fb0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fa4:	4b59      	ldr	r3, [pc, #356]	; (800410c <HAL_RCC_ClockConfig+0x1c8>)
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	4a58      	ldr	r2, [pc, #352]	; (800410c <HAL_RCC_ClockConfig+0x1c8>)
 8003faa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003fae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0308 	and.w	r3, r3, #8
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d005      	beq.n	8003fc8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fbc:	4b53      	ldr	r3, [pc, #332]	; (800410c <HAL_RCC_ClockConfig+0x1c8>)
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	4a52      	ldr	r2, [pc, #328]	; (800410c <HAL_RCC_ClockConfig+0x1c8>)
 8003fc2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003fc6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fc8:	4b50      	ldr	r3, [pc, #320]	; (800410c <HAL_RCC_ClockConfig+0x1c8>)
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	494d      	ldr	r1, [pc, #308]	; (800410c <HAL_RCC_ClockConfig+0x1c8>)
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0301 	and.w	r3, r3, #1
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d040      	beq.n	8004068 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d107      	bne.n	8003ffe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fee:	4b47      	ldr	r3, [pc, #284]	; (800410c <HAL_RCC_ClockConfig+0x1c8>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d115      	bne.n	8004026 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e07f      	b.n	80040fe <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	2b02      	cmp	r3, #2
 8004004:	d107      	bne.n	8004016 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004006:	4b41      	ldr	r3, [pc, #260]	; (800410c <HAL_RCC_ClockConfig+0x1c8>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d109      	bne.n	8004026 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e073      	b.n	80040fe <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004016:	4b3d      	ldr	r3, [pc, #244]	; (800410c <HAL_RCC_ClockConfig+0x1c8>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0302 	and.w	r3, r3, #2
 800401e:	2b00      	cmp	r3, #0
 8004020:	d101      	bne.n	8004026 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e06b      	b.n	80040fe <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004026:	4b39      	ldr	r3, [pc, #228]	; (800410c <HAL_RCC_ClockConfig+0x1c8>)
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	f023 0203 	bic.w	r2, r3, #3
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	4936      	ldr	r1, [pc, #216]	; (800410c <HAL_RCC_ClockConfig+0x1c8>)
 8004034:	4313      	orrs	r3, r2
 8004036:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004038:	f7fd ff4c 	bl	8001ed4 <HAL_GetTick>
 800403c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800403e:	e00a      	b.n	8004056 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004040:	f7fd ff48 	bl	8001ed4 <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	f241 3288 	movw	r2, #5000	; 0x1388
 800404e:	4293      	cmp	r3, r2
 8004050:	d901      	bls.n	8004056 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e053      	b.n	80040fe <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004056:	4b2d      	ldr	r3, [pc, #180]	; (800410c <HAL_RCC_ClockConfig+0x1c8>)
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	f003 020c 	and.w	r2, r3, #12
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	429a      	cmp	r2, r3
 8004066:	d1eb      	bne.n	8004040 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004068:	4b27      	ldr	r3, [pc, #156]	; (8004108 <HAL_RCC_ClockConfig+0x1c4>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 030f 	and.w	r3, r3, #15
 8004070:	683a      	ldr	r2, [r7, #0]
 8004072:	429a      	cmp	r2, r3
 8004074:	d210      	bcs.n	8004098 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004076:	4b24      	ldr	r3, [pc, #144]	; (8004108 <HAL_RCC_ClockConfig+0x1c4>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f023 020f 	bic.w	r2, r3, #15
 800407e:	4922      	ldr	r1, [pc, #136]	; (8004108 <HAL_RCC_ClockConfig+0x1c4>)
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	4313      	orrs	r3, r2
 8004084:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004086:	4b20      	ldr	r3, [pc, #128]	; (8004108 <HAL_RCC_ClockConfig+0x1c4>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 030f 	and.w	r3, r3, #15
 800408e:	683a      	ldr	r2, [r7, #0]
 8004090:	429a      	cmp	r2, r3
 8004092:	d001      	beq.n	8004098 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e032      	b.n	80040fe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0304 	and.w	r3, r3, #4
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d008      	beq.n	80040b6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040a4:	4b19      	ldr	r3, [pc, #100]	; (800410c <HAL_RCC_ClockConfig+0x1c8>)
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	4916      	ldr	r1, [pc, #88]	; (800410c <HAL_RCC_ClockConfig+0x1c8>)
 80040b2:	4313      	orrs	r3, r2
 80040b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0308 	and.w	r3, r3, #8
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d009      	beq.n	80040d6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80040c2:	4b12      	ldr	r3, [pc, #72]	; (800410c <HAL_RCC_ClockConfig+0x1c8>)
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	691b      	ldr	r3, [r3, #16]
 80040ce:	00db      	lsls	r3, r3, #3
 80040d0:	490e      	ldr	r1, [pc, #56]	; (800410c <HAL_RCC_ClockConfig+0x1c8>)
 80040d2:	4313      	orrs	r3, r2
 80040d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80040d6:	f000 f821 	bl	800411c <HAL_RCC_GetSysClockFreq>
 80040da:	4602      	mov	r2, r0
 80040dc:	4b0b      	ldr	r3, [pc, #44]	; (800410c <HAL_RCC_ClockConfig+0x1c8>)
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	091b      	lsrs	r3, r3, #4
 80040e2:	f003 030f 	and.w	r3, r3, #15
 80040e6:	490a      	ldr	r1, [pc, #40]	; (8004110 <HAL_RCC_ClockConfig+0x1cc>)
 80040e8:	5ccb      	ldrb	r3, [r1, r3]
 80040ea:	fa22 f303 	lsr.w	r3, r2, r3
 80040ee:	4a09      	ldr	r2, [pc, #36]	; (8004114 <HAL_RCC_ClockConfig+0x1d0>)
 80040f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80040f2:	4b09      	ldr	r3, [pc, #36]	; (8004118 <HAL_RCC_ClockConfig+0x1d4>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4618      	mov	r0, r3
 80040f8:	f7fd fea8 	bl	8001e4c <HAL_InitTick>

  return HAL_OK;
 80040fc:	2300      	movs	r3, #0
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3710      	adds	r7, #16
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	40023c00 	.word	0x40023c00
 800410c:	40023800 	.word	0x40023800
 8004110:	080087e0 	.word	0x080087e0
 8004114:	20000000 	.word	0x20000000
 8004118:	20000004 	.word	0x20000004

0800411c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800411c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004120:	b094      	sub	sp, #80	; 0x50
 8004122:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004124:	2300      	movs	r3, #0
 8004126:	647b      	str	r3, [r7, #68]	; 0x44
 8004128:	2300      	movs	r3, #0
 800412a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800412c:	2300      	movs	r3, #0
 800412e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004130:	2300      	movs	r3, #0
 8004132:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004134:	4b79      	ldr	r3, [pc, #484]	; (800431c <HAL_RCC_GetSysClockFreq+0x200>)
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	f003 030c 	and.w	r3, r3, #12
 800413c:	2b08      	cmp	r3, #8
 800413e:	d00d      	beq.n	800415c <HAL_RCC_GetSysClockFreq+0x40>
 8004140:	2b08      	cmp	r3, #8
 8004142:	f200 80e1 	bhi.w	8004308 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004146:	2b00      	cmp	r3, #0
 8004148:	d002      	beq.n	8004150 <HAL_RCC_GetSysClockFreq+0x34>
 800414a:	2b04      	cmp	r3, #4
 800414c:	d003      	beq.n	8004156 <HAL_RCC_GetSysClockFreq+0x3a>
 800414e:	e0db      	b.n	8004308 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004150:	4b73      	ldr	r3, [pc, #460]	; (8004320 <HAL_RCC_GetSysClockFreq+0x204>)
 8004152:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004154:	e0db      	b.n	800430e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004156:	4b73      	ldr	r3, [pc, #460]	; (8004324 <HAL_RCC_GetSysClockFreq+0x208>)
 8004158:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800415a:	e0d8      	b.n	800430e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800415c:	4b6f      	ldr	r3, [pc, #444]	; (800431c <HAL_RCC_GetSysClockFreq+0x200>)
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004164:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004166:	4b6d      	ldr	r3, [pc, #436]	; (800431c <HAL_RCC_GetSysClockFreq+0x200>)
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d063      	beq.n	800423a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004172:	4b6a      	ldr	r3, [pc, #424]	; (800431c <HAL_RCC_GetSysClockFreq+0x200>)
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	099b      	lsrs	r3, r3, #6
 8004178:	2200      	movs	r2, #0
 800417a:	63bb      	str	r3, [r7, #56]	; 0x38
 800417c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800417e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004180:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004184:	633b      	str	r3, [r7, #48]	; 0x30
 8004186:	2300      	movs	r3, #0
 8004188:	637b      	str	r3, [r7, #52]	; 0x34
 800418a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800418e:	4622      	mov	r2, r4
 8004190:	462b      	mov	r3, r5
 8004192:	f04f 0000 	mov.w	r0, #0
 8004196:	f04f 0100 	mov.w	r1, #0
 800419a:	0159      	lsls	r1, r3, #5
 800419c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041a0:	0150      	lsls	r0, r2, #5
 80041a2:	4602      	mov	r2, r0
 80041a4:	460b      	mov	r3, r1
 80041a6:	4621      	mov	r1, r4
 80041a8:	1a51      	subs	r1, r2, r1
 80041aa:	6139      	str	r1, [r7, #16]
 80041ac:	4629      	mov	r1, r5
 80041ae:	eb63 0301 	sbc.w	r3, r3, r1
 80041b2:	617b      	str	r3, [r7, #20]
 80041b4:	f04f 0200 	mov.w	r2, #0
 80041b8:	f04f 0300 	mov.w	r3, #0
 80041bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80041c0:	4659      	mov	r1, fp
 80041c2:	018b      	lsls	r3, r1, #6
 80041c4:	4651      	mov	r1, sl
 80041c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80041ca:	4651      	mov	r1, sl
 80041cc:	018a      	lsls	r2, r1, #6
 80041ce:	4651      	mov	r1, sl
 80041d0:	ebb2 0801 	subs.w	r8, r2, r1
 80041d4:	4659      	mov	r1, fp
 80041d6:	eb63 0901 	sbc.w	r9, r3, r1
 80041da:	f04f 0200 	mov.w	r2, #0
 80041de:	f04f 0300 	mov.w	r3, #0
 80041e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80041e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80041ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80041ee:	4690      	mov	r8, r2
 80041f0:	4699      	mov	r9, r3
 80041f2:	4623      	mov	r3, r4
 80041f4:	eb18 0303 	adds.w	r3, r8, r3
 80041f8:	60bb      	str	r3, [r7, #8]
 80041fa:	462b      	mov	r3, r5
 80041fc:	eb49 0303 	adc.w	r3, r9, r3
 8004200:	60fb      	str	r3, [r7, #12]
 8004202:	f04f 0200 	mov.w	r2, #0
 8004206:	f04f 0300 	mov.w	r3, #0
 800420a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800420e:	4629      	mov	r1, r5
 8004210:	024b      	lsls	r3, r1, #9
 8004212:	4621      	mov	r1, r4
 8004214:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004218:	4621      	mov	r1, r4
 800421a:	024a      	lsls	r2, r1, #9
 800421c:	4610      	mov	r0, r2
 800421e:	4619      	mov	r1, r3
 8004220:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004222:	2200      	movs	r2, #0
 8004224:	62bb      	str	r3, [r7, #40]	; 0x28
 8004226:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004228:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800422c:	f7fc fce4 	bl	8000bf8 <__aeabi_uldivmod>
 8004230:	4602      	mov	r2, r0
 8004232:	460b      	mov	r3, r1
 8004234:	4613      	mov	r3, r2
 8004236:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004238:	e058      	b.n	80042ec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800423a:	4b38      	ldr	r3, [pc, #224]	; (800431c <HAL_RCC_GetSysClockFreq+0x200>)
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	099b      	lsrs	r3, r3, #6
 8004240:	2200      	movs	r2, #0
 8004242:	4618      	mov	r0, r3
 8004244:	4611      	mov	r1, r2
 8004246:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800424a:	623b      	str	r3, [r7, #32]
 800424c:	2300      	movs	r3, #0
 800424e:	627b      	str	r3, [r7, #36]	; 0x24
 8004250:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004254:	4642      	mov	r2, r8
 8004256:	464b      	mov	r3, r9
 8004258:	f04f 0000 	mov.w	r0, #0
 800425c:	f04f 0100 	mov.w	r1, #0
 8004260:	0159      	lsls	r1, r3, #5
 8004262:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004266:	0150      	lsls	r0, r2, #5
 8004268:	4602      	mov	r2, r0
 800426a:	460b      	mov	r3, r1
 800426c:	4641      	mov	r1, r8
 800426e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004272:	4649      	mov	r1, r9
 8004274:	eb63 0b01 	sbc.w	fp, r3, r1
 8004278:	f04f 0200 	mov.w	r2, #0
 800427c:	f04f 0300 	mov.w	r3, #0
 8004280:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004284:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004288:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800428c:	ebb2 040a 	subs.w	r4, r2, sl
 8004290:	eb63 050b 	sbc.w	r5, r3, fp
 8004294:	f04f 0200 	mov.w	r2, #0
 8004298:	f04f 0300 	mov.w	r3, #0
 800429c:	00eb      	lsls	r3, r5, #3
 800429e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042a2:	00e2      	lsls	r2, r4, #3
 80042a4:	4614      	mov	r4, r2
 80042a6:	461d      	mov	r5, r3
 80042a8:	4643      	mov	r3, r8
 80042aa:	18e3      	adds	r3, r4, r3
 80042ac:	603b      	str	r3, [r7, #0]
 80042ae:	464b      	mov	r3, r9
 80042b0:	eb45 0303 	adc.w	r3, r5, r3
 80042b4:	607b      	str	r3, [r7, #4]
 80042b6:	f04f 0200 	mov.w	r2, #0
 80042ba:	f04f 0300 	mov.w	r3, #0
 80042be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80042c2:	4629      	mov	r1, r5
 80042c4:	028b      	lsls	r3, r1, #10
 80042c6:	4621      	mov	r1, r4
 80042c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80042cc:	4621      	mov	r1, r4
 80042ce:	028a      	lsls	r2, r1, #10
 80042d0:	4610      	mov	r0, r2
 80042d2:	4619      	mov	r1, r3
 80042d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042d6:	2200      	movs	r2, #0
 80042d8:	61bb      	str	r3, [r7, #24]
 80042da:	61fa      	str	r2, [r7, #28]
 80042dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042e0:	f7fc fc8a 	bl	8000bf8 <__aeabi_uldivmod>
 80042e4:	4602      	mov	r2, r0
 80042e6:	460b      	mov	r3, r1
 80042e8:	4613      	mov	r3, r2
 80042ea:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80042ec:	4b0b      	ldr	r3, [pc, #44]	; (800431c <HAL_RCC_GetSysClockFreq+0x200>)
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	0c1b      	lsrs	r3, r3, #16
 80042f2:	f003 0303 	and.w	r3, r3, #3
 80042f6:	3301      	adds	r3, #1
 80042f8:	005b      	lsls	r3, r3, #1
 80042fa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80042fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80042fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004300:	fbb2 f3f3 	udiv	r3, r2, r3
 8004304:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004306:	e002      	b.n	800430e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004308:	4b05      	ldr	r3, [pc, #20]	; (8004320 <HAL_RCC_GetSysClockFreq+0x204>)
 800430a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800430c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800430e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004310:	4618      	mov	r0, r3
 8004312:	3750      	adds	r7, #80	; 0x50
 8004314:	46bd      	mov	sp, r7
 8004316:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800431a:	bf00      	nop
 800431c:	40023800 	.word	0x40023800
 8004320:	00f42400 	.word	0x00f42400
 8004324:	007a1200 	.word	0x007a1200

08004328 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004328:	b480      	push	{r7}
 800432a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800432c:	4b03      	ldr	r3, [pc, #12]	; (800433c <HAL_RCC_GetHCLKFreq+0x14>)
 800432e:	681b      	ldr	r3, [r3, #0]
}
 8004330:	4618      	mov	r0, r3
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr
 800433a:	bf00      	nop
 800433c:	20000000 	.word	0x20000000

08004340 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004344:	f7ff fff0 	bl	8004328 <HAL_RCC_GetHCLKFreq>
 8004348:	4602      	mov	r2, r0
 800434a:	4b05      	ldr	r3, [pc, #20]	; (8004360 <HAL_RCC_GetPCLK1Freq+0x20>)
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	0a9b      	lsrs	r3, r3, #10
 8004350:	f003 0307 	and.w	r3, r3, #7
 8004354:	4903      	ldr	r1, [pc, #12]	; (8004364 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004356:	5ccb      	ldrb	r3, [r1, r3]
 8004358:	fa22 f303 	lsr.w	r3, r2, r3
}
 800435c:	4618      	mov	r0, r3
 800435e:	bd80      	pop	{r7, pc}
 8004360:	40023800 	.word	0x40023800
 8004364:	080087f0 	.word	0x080087f0

08004368 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800436c:	f7ff ffdc 	bl	8004328 <HAL_RCC_GetHCLKFreq>
 8004370:	4602      	mov	r2, r0
 8004372:	4b05      	ldr	r3, [pc, #20]	; (8004388 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	0b5b      	lsrs	r3, r3, #13
 8004378:	f003 0307 	and.w	r3, r3, #7
 800437c:	4903      	ldr	r1, [pc, #12]	; (800438c <HAL_RCC_GetPCLK2Freq+0x24>)
 800437e:	5ccb      	ldrb	r3, [r1, r3]
 8004380:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004384:	4618      	mov	r0, r3
 8004386:	bd80      	pop	{r7, pc}
 8004388:	40023800 	.word	0x40023800
 800438c:	080087f0 	.word	0x080087f0

08004390 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b088      	sub	sp, #32
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004398:	2300      	movs	r3, #0
 800439a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800439c:	2300      	movs	r3, #0
 800439e:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 80043a0:	2300      	movs	r3, #0
 80043a2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80043a4:	2300      	movs	r3, #0
 80043a6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 0301 	and.w	r3, r3, #1
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d012      	beq.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80043b4:	4b65      	ldr	r3, [pc, #404]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	4a64      	ldr	r2, [pc, #400]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043ba:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80043be:	6093      	str	r3, [r2, #8]
 80043c0:	4b62      	ldr	r3, [pc, #392]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043c2:	689a      	ldr	r2, [r3, #8]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c8:	4960      	ldr	r1, [pc, #384]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043ca:	4313      	orrs	r3, r2
 80043cc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d101      	bne.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 80043d6:	2301      	movs	r3, #1
 80043d8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d017      	beq.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80043e6:	4b59      	ldr	r3, [pc, #356]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043f4:	4955      	ldr	r1, [pc, #340]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043f6:	4313      	orrs	r3, r2
 80043f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004400:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004404:	d101      	bne.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 8004406:	2301      	movs	r3, #1
 8004408:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800440e:	2b00      	cmp	r3, #0
 8004410:	d101      	bne.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 8004412:	2301      	movs	r3, #1
 8004414:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d017      	beq.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004422:	4b4a      	ldr	r3, [pc, #296]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004424:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004428:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004430:	4946      	ldr	r1, [pc, #280]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004432:	4313      	orrs	r3, r2
 8004434:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800443c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004440:	d101      	bne.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 8004442:	2301      	movs	r3, #1
 8004444:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800444a:	2b00      	cmp	r3, #0
 800444c:	d101      	bne.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 800444e:	2301      	movs	r3, #1
 8004450:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0320 	and.w	r3, r3, #32
 800445a:	2b00      	cmp	r3, #0
 800445c:	f000 808b 	beq.w	8004576 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004460:	4b3a      	ldr	r3, [pc, #232]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004464:	4a39      	ldr	r2, [pc, #228]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004466:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800446a:	6413      	str	r3, [r2, #64]	; 0x40
 800446c:	4b37      	ldr	r3, [pc, #220]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800446e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004470:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004474:	60fb      	str	r3, [r7, #12]
 8004476:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004478:	4b35      	ldr	r3, [pc, #212]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a34      	ldr	r2, [pc, #208]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800447e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004482:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004484:	f7fd fd26 	bl	8001ed4 <HAL_GetTick>
 8004488:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800448a:	e008      	b.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800448c:	f7fd fd22 	bl	8001ed4 <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	2b64      	cmp	r3, #100	; 0x64
 8004498:	d901      	bls.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800449a:	2303      	movs	r3, #3
 800449c:	e2bc      	b.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800449e:	4b2c      	ldr	r3, [pc, #176]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d0f0      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80044aa:	4b28      	ldr	r3, [pc, #160]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80044ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044b2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d035      	beq.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044c2:	693a      	ldr	r2, [r7, #16]
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d02e      	beq.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80044c8:	4b20      	ldr	r3, [pc, #128]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80044ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044d0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80044d2:	4b1e      	ldr	r3, [pc, #120]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80044d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d6:	4a1d      	ldr	r2, [pc, #116]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80044d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044dc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80044de:	4b1b      	ldr	r3, [pc, #108]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80044e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e2:	4a1a      	ldr	r2, [pc, #104]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80044e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044e8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80044ea:	4a18      	ldr	r2, [pc, #96]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80044f0:	4b16      	ldr	r3, [pc, #88]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80044f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044f4:	f003 0301 	and.w	r3, r3, #1
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d114      	bne.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044fc:	f7fd fcea 	bl	8001ed4 <HAL_GetTick>
 8004500:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004502:	e00a      	b.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004504:	f7fd fce6 	bl	8001ed4 <HAL_GetTick>
 8004508:	4602      	mov	r2, r0
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004512:	4293      	cmp	r3, r2
 8004514:	d901      	bls.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e27e      	b.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800451a:	4b0c      	ldr	r3, [pc, #48]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800451c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800451e:	f003 0302 	and.w	r3, r3, #2
 8004522:	2b00      	cmp	r3, #0
 8004524:	d0ee      	beq.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800452a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800452e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004532:	d111      	bne.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 8004534:	4b05      	ldr	r3, [pc, #20]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004540:	4b04      	ldr	r3, [pc, #16]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004542:	400b      	ands	r3, r1
 8004544:	4901      	ldr	r1, [pc, #4]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004546:	4313      	orrs	r3, r2
 8004548:	608b      	str	r3, [r1, #8]
 800454a:	e00b      	b.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800454c:	40023800 	.word	0x40023800
 8004550:	40007000 	.word	0x40007000
 8004554:	0ffffcff 	.word	0x0ffffcff
 8004558:	4ba4      	ldr	r3, [pc, #656]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	4aa3      	ldr	r2, [pc, #652]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800455e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004562:	6093      	str	r3, [r2, #8]
 8004564:	4ba1      	ldr	r3, [pc, #644]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004566:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800456c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004570:	499e      	ldr	r1, [pc, #632]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004572:	4313      	orrs	r3, r2
 8004574:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0310 	and.w	r3, r3, #16
 800457e:	2b00      	cmp	r3, #0
 8004580:	d010      	beq.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004582:	4b9a      	ldr	r3, [pc, #616]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004584:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004588:	4a98      	ldr	r2, [pc, #608]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800458a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800458e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004592:	4b96      	ldr	r3, [pc, #600]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004594:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800459c:	4993      	ldr	r1, [pc, #588]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800459e:	4313      	orrs	r3, r2
 80045a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d00a      	beq.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80045b0:	4b8e      	ldr	r3, [pc, #568]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80045b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045b6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045be:	498b      	ldr	r1, [pc, #556]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80045c0:	4313      	orrs	r3, r2
 80045c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d00a      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80045d2:	4b86      	ldr	r3, [pc, #536]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80045d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045d8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045e0:	4982      	ldr	r1, [pc, #520]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80045e2:	4313      	orrs	r3, r2
 80045e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d00a      	beq.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80045f4:	4b7d      	ldr	r3, [pc, #500]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80045f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004602:	497a      	ldr	r1, [pc, #488]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004604:	4313      	orrs	r3, r2
 8004606:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004612:	2b00      	cmp	r3, #0
 8004614:	d00a      	beq.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004616:	4b75      	ldr	r3, [pc, #468]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004618:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800461c:	f023 0203 	bic.w	r2, r3, #3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004624:	4971      	ldr	r1, [pc, #452]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004626:	4313      	orrs	r3, r2
 8004628:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004634:	2b00      	cmp	r3, #0
 8004636:	d00a      	beq.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004638:	4b6c      	ldr	r3, [pc, #432]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800463a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800463e:	f023 020c 	bic.w	r2, r3, #12
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004646:	4969      	ldr	r1, [pc, #420]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004648:	4313      	orrs	r3, r2
 800464a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004656:	2b00      	cmp	r3, #0
 8004658:	d00a      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800465a:	4b64      	ldr	r3, [pc, #400]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800465c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004660:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004668:	4960      	ldr	r1, [pc, #384]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800466a:	4313      	orrs	r3, r2
 800466c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004678:	2b00      	cmp	r3, #0
 800467a:	d00a      	beq.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800467c:	4b5b      	ldr	r3, [pc, #364]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800467e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004682:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800468a:	4958      	ldr	r1, [pc, #352]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800468c:	4313      	orrs	r3, r2
 800468e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800469a:	2b00      	cmp	r3, #0
 800469c:	d00a      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800469e:	4b53      	ldr	r3, [pc, #332]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80046a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046ac:	494f      	ldr	r1, [pc, #316]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80046ae:	4313      	orrs	r3, r2
 80046b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d00a      	beq.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80046c0:	4b4a      	ldr	r3, [pc, #296]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80046c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046c6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046ce:	4947      	ldr	r1, [pc, #284]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80046d0:	4313      	orrs	r3, r2
 80046d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d00a      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80046e2:	4b42      	ldr	r3, [pc, #264]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80046e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046e8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046f0:	493e      	ldr	r1, [pc, #248]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80046f2:	4313      	orrs	r3, r2
 80046f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004700:	2b00      	cmp	r3, #0
 8004702:	d00a      	beq.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004704:	4b39      	ldr	r3, [pc, #228]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800470a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004712:	4936      	ldr	r1, [pc, #216]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004714:	4313      	orrs	r3, r2
 8004716:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d011      	beq.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004726:	4b31      	ldr	r3, [pc, #196]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004728:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800472c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004734:	492d      	ldr	r1, [pc, #180]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004736:	4313      	orrs	r3, r2
 8004738:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004740:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004744:	d101      	bne.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 8004746:	2301      	movs	r3, #1
 8004748:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d00a      	beq.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004756:	4b25      	ldr	r3, [pc, #148]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004758:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800475c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004764:	4921      	ldr	r1, [pc, #132]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004766:	4313      	orrs	r3, r2
 8004768:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004774:	2b00      	cmp	r3, #0
 8004776:	d00a      	beq.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004778:	4b1c      	ldr	r3, [pc, #112]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800477a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800477e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004786:	4919      	ldr	r1, [pc, #100]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004788:	4313      	orrs	r3, r2
 800478a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d00a      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800479a:	4b14      	ldr	r3, [pc, #80]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800479c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047a0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047a8:	4910      	ldr	r1, [pc, #64]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80047aa:	4313      	orrs	r3, r2
 80047ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80047b0:	69fb      	ldr	r3, [r7, #28]
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d006      	beq.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x434>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	f000 809d 	beq.w	80048fe <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80047c4:	4b09      	ldr	r3, [pc, #36]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a08      	ldr	r2, [pc, #32]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80047ca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80047ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047d0:	f7fd fb80 	bl	8001ed4 <HAL_GetTick>
 80047d4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80047d6:	e00b      	b.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80047d8:	f7fd fb7c 	bl	8001ed4 <HAL_GetTick>
 80047dc:	4602      	mov	r2, r0
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	2b64      	cmp	r3, #100	; 0x64
 80047e4:	d904      	bls.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e116      	b.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x688>
 80047ea:	bf00      	nop
 80047ec:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80047f0:	4b8b      	ldr	r3, [pc, #556]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d1ed      	bne.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0301 	and.w	r3, r3, #1
 8004804:	2b00      	cmp	r3, #0
 8004806:	d017      	beq.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800480c:	2b00      	cmp	r3, #0
 800480e:	d113      	bne.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004810:	4b83      	ldr	r3, [pc, #524]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004812:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004816:	0e1b      	lsrs	r3, r3, #24
 8004818:	f003 030f 	and.w	r3, r3, #15
 800481c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	019a      	lsls	r2, r3, #6
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	061b      	lsls	r3, r3, #24
 8004828:	431a      	orrs	r2, r3
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	071b      	lsls	r3, r3, #28
 8004830:	497b      	ldr	r1, [pc, #492]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004832:	4313      	orrs	r3, r2
 8004834:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004840:	2b00      	cmp	r3, #0
 8004842:	d004      	beq.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x4be>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004848:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800484c:	d00a      	beq.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004856:	2b00      	cmp	r3, #0
 8004858:	d024      	beq.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800485e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004862:	d11f      	bne.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004864:	4b6e      	ldr	r3, [pc, #440]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004866:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800486a:	0f1b      	lsrs	r3, r3, #28
 800486c:	f003 0307 	and.w	r3, r3, #7
 8004870:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	019a      	lsls	r2, r3, #6
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	061b      	lsls	r3, r3, #24
 800487e:	431a      	orrs	r2, r3
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	071b      	lsls	r3, r3, #28
 8004884:	4966      	ldr	r1, [pc, #408]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004886:	4313      	orrs	r3, r2
 8004888:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800488c:	4b64      	ldr	r3, [pc, #400]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800488e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004892:	f023 021f 	bic.w	r2, r3, #31
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	69db      	ldr	r3, [r3, #28]
 800489a:	3b01      	subs	r3, #1
 800489c:	4960      	ldr	r1, [pc, #384]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800489e:	4313      	orrs	r3, r2
 80048a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d00d      	beq.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	019a      	lsls	r2, r3, #6
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	061b      	lsls	r3, r3, #24
 80048bc:	431a      	orrs	r2, r3
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	071b      	lsls	r3, r3, #28
 80048c4:	4956      	ldr	r1, [pc, #344]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80048c6:	4313      	orrs	r3, r2
 80048c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80048cc:	4b54      	ldr	r3, [pc, #336]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a53      	ldr	r2, [pc, #332]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80048d2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80048d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048d8:	f7fd fafc 	bl	8001ed4 <HAL_GetTick>
 80048dc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80048de:	e008      	b.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80048e0:	f7fd faf8 	bl	8001ed4 <HAL_GetTick>
 80048e4:	4602      	mov	r2, r0
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	1ad3      	subs	r3, r2, r3
 80048ea:	2b64      	cmp	r3, #100	; 0x64
 80048ec:	d901      	bls.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048ee:	2303      	movs	r3, #3
 80048f0:	e092      	b.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80048f2:	4b4b      	ldr	r3, [pc, #300]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d0f0      	beq.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80048fe:	69bb      	ldr	r3, [r7, #24]
 8004900:	2b01      	cmp	r3, #1
 8004902:	f040 8088 	bne.w	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004906:	4b46      	ldr	r3, [pc, #280]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a45      	ldr	r2, [pc, #276]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800490c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004910:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004912:	f7fd fadf 	bl	8001ed4 <HAL_GetTick>
 8004916:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004918:	e008      	b.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800491a:	f7fd fadb 	bl	8001ed4 <HAL_GetTick>
 800491e:	4602      	mov	r2, r0
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	1ad3      	subs	r3, r2, r3
 8004924:	2b64      	cmp	r3, #100	; 0x64
 8004926:	d901      	bls.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004928:	2303      	movs	r3, #3
 800492a:	e075      	b.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800492c:	4b3c      	ldr	r3, [pc, #240]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004934:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004938:	d0ef      	beq.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004942:	2b00      	cmp	r3, #0
 8004944:	d003      	beq.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x5be>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800494a:	2b00      	cmp	r3, #0
 800494c:	d009      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004956:	2b00      	cmp	r3, #0
 8004958:	d024      	beq.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800495e:	2b00      	cmp	r3, #0
 8004960:	d120      	bne.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004962:	4b2f      	ldr	r3, [pc, #188]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004964:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004968:	0c1b      	lsrs	r3, r3, #16
 800496a:	f003 0303 	and.w	r3, r3, #3
 800496e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	691b      	ldr	r3, [r3, #16]
 8004974:	019a      	lsls	r2, r3, #6
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	041b      	lsls	r3, r3, #16
 800497a:	431a      	orrs	r2, r3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	695b      	ldr	r3, [r3, #20]
 8004980:	061b      	lsls	r3, r3, #24
 8004982:	4927      	ldr	r1, [pc, #156]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004984:	4313      	orrs	r3, r2
 8004986:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800498a:	4b25      	ldr	r3, [pc, #148]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800498c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004990:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6a1b      	ldr	r3, [r3, #32]
 8004998:	3b01      	subs	r3, #1
 800499a:	021b      	lsls	r3, r3, #8
 800499c:	4920      	ldr	r1, [pc, #128]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800499e:	4313      	orrs	r3, r2
 80049a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d018      	beq.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x652>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049b8:	d113      	bne.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80049ba:	4b19      	ldr	r3, [pc, #100]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80049bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049c0:	0e1b      	lsrs	r3, r3, #24
 80049c2:	f003 030f 	and.w	r3, r3, #15
 80049c6:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	691b      	ldr	r3, [r3, #16]
 80049cc:	019a      	lsls	r2, r3, #6
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	699b      	ldr	r3, [r3, #24]
 80049d2:	041b      	lsls	r3, r3, #16
 80049d4:	431a      	orrs	r2, r3
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	061b      	lsls	r3, r3, #24
 80049da:	4911      	ldr	r1, [pc, #68]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80049dc:	4313      	orrs	r3, r2
 80049de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80049e2:	4b0f      	ldr	r3, [pc, #60]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a0e      	ldr	r2, [pc, #56]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80049e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049ee:	f7fd fa71 	bl	8001ed4 <HAL_GetTick>
 80049f2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80049f4:	e008      	b.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80049f6:	f7fd fa6d 	bl	8001ed4 <HAL_GetTick>
 80049fa:	4602      	mov	r2, r0
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	1ad3      	subs	r3, r2, r3
 8004a00:	2b64      	cmp	r3, #100	; 0x64
 8004a02:	d901      	bls.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a04:	2303      	movs	r3, #3
 8004a06:	e007      	b.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004a08:	4b05      	ldr	r3, [pc, #20]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a14:	d1ef      	bne.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 8004a16:	2300      	movs	r3, #0
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3720      	adds	r7, #32
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	40023800 	.word	0x40023800

08004a24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b082      	sub	sp, #8
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d101      	bne.n	8004a36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e040      	b.n	8004ab8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d106      	bne.n	8004a4c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2200      	movs	r2, #0
 8004a42:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f7fc ffc6 	bl	80019d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2224      	movs	r2, #36	; 0x24
 8004a50:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f022 0201 	bic.w	r2, r2, #1
 8004a60:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f000 f8b0 	bl	8004bc8 <UART_SetConfig>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d101      	bne.n	8004a72 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e022      	b.n	8004ab8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d002      	beq.n	8004a80 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f000 fb08 	bl	8005090 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	685a      	ldr	r2, [r3, #4]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a8e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	689a      	ldr	r2, [r3, #8]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a9e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f042 0201 	orr.w	r2, r2, #1
 8004aae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f000 fb8f 	bl	80051d4 <UART_CheckIdleState>
 8004ab6:	4603      	mov	r3, r0
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3708      	adds	r7, #8
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}

08004ac0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b08a      	sub	sp, #40	; 0x28
 8004ac4:	af02      	add	r7, sp, #8
 8004ac6:	60f8      	str	r0, [r7, #12]
 8004ac8:	60b9      	str	r1, [r7, #8]
 8004aca:	603b      	str	r3, [r7, #0]
 8004acc:	4613      	mov	r3, r2
 8004ace:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ad4:	2b20      	cmp	r3, #32
 8004ad6:	d171      	bne.n	8004bbc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d002      	beq.n	8004ae4 <HAL_UART_Transmit+0x24>
 8004ade:	88fb      	ldrh	r3, [r7, #6]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d101      	bne.n	8004ae8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e06a      	b.n	8004bbe <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2200      	movs	r2, #0
 8004aec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2221      	movs	r2, #33	; 0x21
 8004af4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004af6:	f7fd f9ed 	bl	8001ed4 <HAL_GetTick>
 8004afa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	88fa      	ldrh	r2, [r7, #6]
 8004b00:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	88fa      	ldrh	r2, [r7, #6]
 8004b08:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b14:	d108      	bne.n	8004b28 <HAL_UART_Transmit+0x68>
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	691b      	ldr	r3, [r3, #16]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d104      	bne.n	8004b28 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	61bb      	str	r3, [r7, #24]
 8004b26:	e003      	b.n	8004b30 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004b30:	e02c      	b.n	8004b8c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	9300      	str	r3, [sp, #0]
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	2180      	movs	r1, #128	; 0x80
 8004b3c:	68f8      	ldr	r0, [r7, #12]
 8004b3e:	f000 fb80 	bl	8005242 <UART_WaitOnFlagUntilTimeout>
 8004b42:	4603      	mov	r3, r0
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d001      	beq.n	8004b4c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8004b48:	2303      	movs	r3, #3
 8004b4a:	e038      	b.n	8004bbe <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004b4c:	69fb      	ldr	r3, [r7, #28]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d10b      	bne.n	8004b6a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b52:	69bb      	ldr	r3, [r7, #24]
 8004b54:	881b      	ldrh	r3, [r3, #0]
 8004b56:	461a      	mov	r2, r3
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b60:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004b62:	69bb      	ldr	r3, [r7, #24]
 8004b64:	3302      	adds	r3, #2
 8004b66:	61bb      	str	r3, [r7, #24]
 8004b68:	e007      	b.n	8004b7a <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b6a:	69fb      	ldr	r3, [r7, #28]
 8004b6c:	781a      	ldrb	r2, [r3, #0]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004b74:	69fb      	ldr	r3, [r7, #28]
 8004b76:	3301      	adds	r3, #1
 8004b78:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	3b01      	subs	r3, #1
 8004b84:	b29a      	uxth	r2, r3
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d1cc      	bne.n	8004b32 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	9300      	str	r3, [sp, #0]
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	2140      	movs	r1, #64	; 0x40
 8004ba2:	68f8      	ldr	r0, [r7, #12]
 8004ba4:	f000 fb4d 	bl	8005242 <UART_WaitOnFlagUntilTimeout>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d001      	beq.n	8004bb2 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	e005      	b.n	8004bbe <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2220      	movs	r2, #32
 8004bb6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	e000      	b.n	8004bbe <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004bbc:	2302      	movs	r3, #2
  }
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3720      	adds	r7, #32
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
	...

08004bc8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b088      	sub	sp, #32
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	689a      	ldr	r2, [r3, #8]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	691b      	ldr	r3, [r3, #16]
 8004bdc:	431a      	orrs	r2, r3
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	695b      	ldr	r3, [r3, #20]
 8004be2:	431a      	orrs	r2, r3
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	69db      	ldr	r3, [r3, #28]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	4ba6      	ldr	r3, [pc, #664]	; (8004e8c <UART_SetConfig+0x2c4>)
 8004bf4:	4013      	ands	r3, r2
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	6812      	ldr	r2, [r2, #0]
 8004bfa:	6979      	ldr	r1, [r7, #20]
 8004bfc:	430b      	orrs	r3, r1
 8004bfe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	68da      	ldr	r2, [r3, #12]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	430a      	orrs	r2, r1
 8004c14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	699b      	ldr	r3, [r3, #24]
 8004c1a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6a1b      	ldr	r3, [r3, #32]
 8004c20:	697a      	ldr	r2, [r7, #20]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	697a      	ldr	r2, [r7, #20]
 8004c36:	430a      	orrs	r2, r1
 8004c38:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a94      	ldr	r2, [pc, #592]	; (8004e90 <UART_SetConfig+0x2c8>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d120      	bne.n	8004c86 <UART_SetConfig+0xbe>
 8004c44:	4b93      	ldr	r3, [pc, #588]	; (8004e94 <UART_SetConfig+0x2cc>)
 8004c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c4a:	f003 0303 	and.w	r3, r3, #3
 8004c4e:	2b03      	cmp	r3, #3
 8004c50:	d816      	bhi.n	8004c80 <UART_SetConfig+0xb8>
 8004c52:	a201      	add	r2, pc, #4	; (adr r2, 8004c58 <UART_SetConfig+0x90>)
 8004c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c58:	08004c69 	.word	0x08004c69
 8004c5c:	08004c75 	.word	0x08004c75
 8004c60:	08004c6f 	.word	0x08004c6f
 8004c64:	08004c7b 	.word	0x08004c7b
 8004c68:	2301      	movs	r3, #1
 8004c6a:	77fb      	strb	r3, [r7, #31]
 8004c6c:	e150      	b.n	8004f10 <UART_SetConfig+0x348>
 8004c6e:	2302      	movs	r3, #2
 8004c70:	77fb      	strb	r3, [r7, #31]
 8004c72:	e14d      	b.n	8004f10 <UART_SetConfig+0x348>
 8004c74:	2304      	movs	r3, #4
 8004c76:	77fb      	strb	r3, [r7, #31]
 8004c78:	e14a      	b.n	8004f10 <UART_SetConfig+0x348>
 8004c7a:	2308      	movs	r3, #8
 8004c7c:	77fb      	strb	r3, [r7, #31]
 8004c7e:	e147      	b.n	8004f10 <UART_SetConfig+0x348>
 8004c80:	2310      	movs	r3, #16
 8004c82:	77fb      	strb	r3, [r7, #31]
 8004c84:	e144      	b.n	8004f10 <UART_SetConfig+0x348>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a83      	ldr	r2, [pc, #524]	; (8004e98 <UART_SetConfig+0x2d0>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d132      	bne.n	8004cf6 <UART_SetConfig+0x12e>
 8004c90:	4b80      	ldr	r3, [pc, #512]	; (8004e94 <UART_SetConfig+0x2cc>)
 8004c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c96:	f003 030c 	and.w	r3, r3, #12
 8004c9a:	2b0c      	cmp	r3, #12
 8004c9c:	d828      	bhi.n	8004cf0 <UART_SetConfig+0x128>
 8004c9e:	a201      	add	r2, pc, #4	; (adr r2, 8004ca4 <UART_SetConfig+0xdc>)
 8004ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ca4:	08004cd9 	.word	0x08004cd9
 8004ca8:	08004cf1 	.word	0x08004cf1
 8004cac:	08004cf1 	.word	0x08004cf1
 8004cb0:	08004cf1 	.word	0x08004cf1
 8004cb4:	08004ce5 	.word	0x08004ce5
 8004cb8:	08004cf1 	.word	0x08004cf1
 8004cbc:	08004cf1 	.word	0x08004cf1
 8004cc0:	08004cf1 	.word	0x08004cf1
 8004cc4:	08004cdf 	.word	0x08004cdf
 8004cc8:	08004cf1 	.word	0x08004cf1
 8004ccc:	08004cf1 	.word	0x08004cf1
 8004cd0:	08004cf1 	.word	0x08004cf1
 8004cd4:	08004ceb 	.word	0x08004ceb
 8004cd8:	2300      	movs	r3, #0
 8004cda:	77fb      	strb	r3, [r7, #31]
 8004cdc:	e118      	b.n	8004f10 <UART_SetConfig+0x348>
 8004cde:	2302      	movs	r3, #2
 8004ce0:	77fb      	strb	r3, [r7, #31]
 8004ce2:	e115      	b.n	8004f10 <UART_SetConfig+0x348>
 8004ce4:	2304      	movs	r3, #4
 8004ce6:	77fb      	strb	r3, [r7, #31]
 8004ce8:	e112      	b.n	8004f10 <UART_SetConfig+0x348>
 8004cea:	2308      	movs	r3, #8
 8004cec:	77fb      	strb	r3, [r7, #31]
 8004cee:	e10f      	b.n	8004f10 <UART_SetConfig+0x348>
 8004cf0:	2310      	movs	r3, #16
 8004cf2:	77fb      	strb	r3, [r7, #31]
 8004cf4:	e10c      	b.n	8004f10 <UART_SetConfig+0x348>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a68      	ldr	r2, [pc, #416]	; (8004e9c <UART_SetConfig+0x2d4>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d120      	bne.n	8004d42 <UART_SetConfig+0x17a>
 8004d00:	4b64      	ldr	r3, [pc, #400]	; (8004e94 <UART_SetConfig+0x2cc>)
 8004d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d06:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004d0a:	2b30      	cmp	r3, #48	; 0x30
 8004d0c:	d013      	beq.n	8004d36 <UART_SetConfig+0x16e>
 8004d0e:	2b30      	cmp	r3, #48	; 0x30
 8004d10:	d814      	bhi.n	8004d3c <UART_SetConfig+0x174>
 8004d12:	2b20      	cmp	r3, #32
 8004d14:	d009      	beq.n	8004d2a <UART_SetConfig+0x162>
 8004d16:	2b20      	cmp	r3, #32
 8004d18:	d810      	bhi.n	8004d3c <UART_SetConfig+0x174>
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d002      	beq.n	8004d24 <UART_SetConfig+0x15c>
 8004d1e:	2b10      	cmp	r3, #16
 8004d20:	d006      	beq.n	8004d30 <UART_SetConfig+0x168>
 8004d22:	e00b      	b.n	8004d3c <UART_SetConfig+0x174>
 8004d24:	2300      	movs	r3, #0
 8004d26:	77fb      	strb	r3, [r7, #31]
 8004d28:	e0f2      	b.n	8004f10 <UART_SetConfig+0x348>
 8004d2a:	2302      	movs	r3, #2
 8004d2c:	77fb      	strb	r3, [r7, #31]
 8004d2e:	e0ef      	b.n	8004f10 <UART_SetConfig+0x348>
 8004d30:	2304      	movs	r3, #4
 8004d32:	77fb      	strb	r3, [r7, #31]
 8004d34:	e0ec      	b.n	8004f10 <UART_SetConfig+0x348>
 8004d36:	2308      	movs	r3, #8
 8004d38:	77fb      	strb	r3, [r7, #31]
 8004d3a:	e0e9      	b.n	8004f10 <UART_SetConfig+0x348>
 8004d3c:	2310      	movs	r3, #16
 8004d3e:	77fb      	strb	r3, [r7, #31]
 8004d40:	e0e6      	b.n	8004f10 <UART_SetConfig+0x348>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a56      	ldr	r2, [pc, #344]	; (8004ea0 <UART_SetConfig+0x2d8>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d120      	bne.n	8004d8e <UART_SetConfig+0x1c6>
 8004d4c:	4b51      	ldr	r3, [pc, #324]	; (8004e94 <UART_SetConfig+0x2cc>)
 8004d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d52:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004d56:	2bc0      	cmp	r3, #192	; 0xc0
 8004d58:	d013      	beq.n	8004d82 <UART_SetConfig+0x1ba>
 8004d5a:	2bc0      	cmp	r3, #192	; 0xc0
 8004d5c:	d814      	bhi.n	8004d88 <UART_SetConfig+0x1c0>
 8004d5e:	2b80      	cmp	r3, #128	; 0x80
 8004d60:	d009      	beq.n	8004d76 <UART_SetConfig+0x1ae>
 8004d62:	2b80      	cmp	r3, #128	; 0x80
 8004d64:	d810      	bhi.n	8004d88 <UART_SetConfig+0x1c0>
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d002      	beq.n	8004d70 <UART_SetConfig+0x1a8>
 8004d6a:	2b40      	cmp	r3, #64	; 0x40
 8004d6c:	d006      	beq.n	8004d7c <UART_SetConfig+0x1b4>
 8004d6e:	e00b      	b.n	8004d88 <UART_SetConfig+0x1c0>
 8004d70:	2300      	movs	r3, #0
 8004d72:	77fb      	strb	r3, [r7, #31]
 8004d74:	e0cc      	b.n	8004f10 <UART_SetConfig+0x348>
 8004d76:	2302      	movs	r3, #2
 8004d78:	77fb      	strb	r3, [r7, #31]
 8004d7a:	e0c9      	b.n	8004f10 <UART_SetConfig+0x348>
 8004d7c:	2304      	movs	r3, #4
 8004d7e:	77fb      	strb	r3, [r7, #31]
 8004d80:	e0c6      	b.n	8004f10 <UART_SetConfig+0x348>
 8004d82:	2308      	movs	r3, #8
 8004d84:	77fb      	strb	r3, [r7, #31]
 8004d86:	e0c3      	b.n	8004f10 <UART_SetConfig+0x348>
 8004d88:	2310      	movs	r3, #16
 8004d8a:	77fb      	strb	r3, [r7, #31]
 8004d8c:	e0c0      	b.n	8004f10 <UART_SetConfig+0x348>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a44      	ldr	r2, [pc, #272]	; (8004ea4 <UART_SetConfig+0x2dc>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d125      	bne.n	8004de4 <UART_SetConfig+0x21c>
 8004d98:	4b3e      	ldr	r3, [pc, #248]	; (8004e94 <UART_SetConfig+0x2cc>)
 8004d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004da2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004da6:	d017      	beq.n	8004dd8 <UART_SetConfig+0x210>
 8004da8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004dac:	d817      	bhi.n	8004dde <UART_SetConfig+0x216>
 8004dae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004db2:	d00b      	beq.n	8004dcc <UART_SetConfig+0x204>
 8004db4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004db8:	d811      	bhi.n	8004dde <UART_SetConfig+0x216>
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d003      	beq.n	8004dc6 <UART_SetConfig+0x1fe>
 8004dbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dc2:	d006      	beq.n	8004dd2 <UART_SetConfig+0x20a>
 8004dc4:	e00b      	b.n	8004dde <UART_SetConfig+0x216>
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	77fb      	strb	r3, [r7, #31]
 8004dca:	e0a1      	b.n	8004f10 <UART_SetConfig+0x348>
 8004dcc:	2302      	movs	r3, #2
 8004dce:	77fb      	strb	r3, [r7, #31]
 8004dd0:	e09e      	b.n	8004f10 <UART_SetConfig+0x348>
 8004dd2:	2304      	movs	r3, #4
 8004dd4:	77fb      	strb	r3, [r7, #31]
 8004dd6:	e09b      	b.n	8004f10 <UART_SetConfig+0x348>
 8004dd8:	2308      	movs	r3, #8
 8004dda:	77fb      	strb	r3, [r7, #31]
 8004ddc:	e098      	b.n	8004f10 <UART_SetConfig+0x348>
 8004dde:	2310      	movs	r3, #16
 8004de0:	77fb      	strb	r3, [r7, #31]
 8004de2:	e095      	b.n	8004f10 <UART_SetConfig+0x348>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a2f      	ldr	r2, [pc, #188]	; (8004ea8 <UART_SetConfig+0x2e0>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d125      	bne.n	8004e3a <UART_SetConfig+0x272>
 8004dee:	4b29      	ldr	r3, [pc, #164]	; (8004e94 <UART_SetConfig+0x2cc>)
 8004df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004df4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004df8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004dfc:	d017      	beq.n	8004e2e <UART_SetConfig+0x266>
 8004dfe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e02:	d817      	bhi.n	8004e34 <UART_SetConfig+0x26c>
 8004e04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e08:	d00b      	beq.n	8004e22 <UART_SetConfig+0x25a>
 8004e0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e0e:	d811      	bhi.n	8004e34 <UART_SetConfig+0x26c>
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d003      	beq.n	8004e1c <UART_SetConfig+0x254>
 8004e14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e18:	d006      	beq.n	8004e28 <UART_SetConfig+0x260>
 8004e1a:	e00b      	b.n	8004e34 <UART_SetConfig+0x26c>
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	77fb      	strb	r3, [r7, #31]
 8004e20:	e076      	b.n	8004f10 <UART_SetConfig+0x348>
 8004e22:	2302      	movs	r3, #2
 8004e24:	77fb      	strb	r3, [r7, #31]
 8004e26:	e073      	b.n	8004f10 <UART_SetConfig+0x348>
 8004e28:	2304      	movs	r3, #4
 8004e2a:	77fb      	strb	r3, [r7, #31]
 8004e2c:	e070      	b.n	8004f10 <UART_SetConfig+0x348>
 8004e2e:	2308      	movs	r3, #8
 8004e30:	77fb      	strb	r3, [r7, #31]
 8004e32:	e06d      	b.n	8004f10 <UART_SetConfig+0x348>
 8004e34:	2310      	movs	r3, #16
 8004e36:	77fb      	strb	r3, [r7, #31]
 8004e38:	e06a      	b.n	8004f10 <UART_SetConfig+0x348>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a1b      	ldr	r2, [pc, #108]	; (8004eac <UART_SetConfig+0x2e4>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d138      	bne.n	8004eb6 <UART_SetConfig+0x2ee>
 8004e44:	4b13      	ldr	r3, [pc, #76]	; (8004e94 <UART_SetConfig+0x2cc>)
 8004e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e4a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004e4e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004e52:	d017      	beq.n	8004e84 <UART_SetConfig+0x2bc>
 8004e54:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004e58:	d82a      	bhi.n	8004eb0 <UART_SetConfig+0x2e8>
 8004e5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e5e:	d00b      	beq.n	8004e78 <UART_SetConfig+0x2b0>
 8004e60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e64:	d824      	bhi.n	8004eb0 <UART_SetConfig+0x2e8>
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d003      	beq.n	8004e72 <UART_SetConfig+0x2aa>
 8004e6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e6e:	d006      	beq.n	8004e7e <UART_SetConfig+0x2b6>
 8004e70:	e01e      	b.n	8004eb0 <UART_SetConfig+0x2e8>
 8004e72:	2300      	movs	r3, #0
 8004e74:	77fb      	strb	r3, [r7, #31]
 8004e76:	e04b      	b.n	8004f10 <UART_SetConfig+0x348>
 8004e78:	2302      	movs	r3, #2
 8004e7a:	77fb      	strb	r3, [r7, #31]
 8004e7c:	e048      	b.n	8004f10 <UART_SetConfig+0x348>
 8004e7e:	2304      	movs	r3, #4
 8004e80:	77fb      	strb	r3, [r7, #31]
 8004e82:	e045      	b.n	8004f10 <UART_SetConfig+0x348>
 8004e84:	2308      	movs	r3, #8
 8004e86:	77fb      	strb	r3, [r7, #31]
 8004e88:	e042      	b.n	8004f10 <UART_SetConfig+0x348>
 8004e8a:	bf00      	nop
 8004e8c:	efff69f3 	.word	0xefff69f3
 8004e90:	40011000 	.word	0x40011000
 8004e94:	40023800 	.word	0x40023800
 8004e98:	40004400 	.word	0x40004400
 8004e9c:	40004800 	.word	0x40004800
 8004ea0:	40004c00 	.word	0x40004c00
 8004ea4:	40005000 	.word	0x40005000
 8004ea8:	40011400 	.word	0x40011400
 8004eac:	40007800 	.word	0x40007800
 8004eb0:	2310      	movs	r3, #16
 8004eb2:	77fb      	strb	r3, [r7, #31]
 8004eb4:	e02c      	b.n	8004f10 <UART_SetConfig+0x348>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a72      	ldr	r2, [pc, #456]	; (8005084 <UART_SetConfig+0x4bc>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d125      	bne.n	8004f0c <UART_SetConfig+0x344>
 8004ec0:	4b71      	ldr	r3, [pc, #452]	; (8005088 <UART_SetConfig+0x4c0>)
 8004ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ec6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004eca:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004ece:	d017      	beq.n	8004f00 <UART_SetConfig+0x338>
 8004ed0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004ed4:	d817      	bhi.n	8004f06 <UART_SetConfig+0x33e>
 8004ed6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004eda:	d00b      	beq.n	8004ef4 <UART_SetConfig+0x32c>
 8004edc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ee0:	d811      	bhi.n	8004f06 <UART_SetConfig+0x33e>
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d003      	beq.n	8004eee <UART_SetConfig+0x326>
 8004ee6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004eea:	d006      	beq.n	8004efa <UART_SetConfig+0x332>
 8004eec:	e00b      	b.n	8004f06 <UART_SetConfig+0x33e>
 8004eee:	2300      	movs	r3, #0
 8004ef0:	77fb      	strb	r3, [r7, #31]
 8004ef2:	e00d      	b.n	8004f10 <UART_SetConfig+0x348>
 8004ef4:	2302      	movs	r3, #2
 8004ef6:	77fb      	strb	r3, [r7, #31]
 8004ef8:	e00a      	b.n	8004f10 <UART_SetConfig+0x348>
 8004efa:	2304      	movs	r3, #4
 8004efc:	77fb      	strb	r3, [r7, #31]
 8004efe:	e007      	b.n	8004f10 <UART_SetConfig+0x348>
 8004f00:	2308      	movs	r3, #8
 8004f02:	77fb      	strb	r3, [r7, #31]
 8004f04:	e004      	b.n	8004f10 <UART_SetConfig+0x348>
 8004f06:	2310      	movs	r3, #16
 8004f08:	77fb      	strb	r3, [r7, #31]
 8004f0a:	e001      	b.n	8004f10 <UART_SetConfig+0x348>
 8004f0c:	2310      	movs	r3, #16
 8004f0e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	69db      	ldr	r3, [r3, #28]
 8004f14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f18:	d15b      	bne.n	8004fd2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004f1a:	7ffb      	ldrb	r3, [r7, #31]
 8004f1c:	2b08      	cmp	r3, #8
 8004f1e:	d828      	bhi.n	8004f72 <UART_SetConfig+0x3aa>
 8004f20:	a201      	add	r2, pc, #4	; (adr r2, 8004f28 <UART_SetConfig+0x360>)
 8004f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f26:	bf00      	nop
 8004f28:	08004f4d 	.word	0x08004f4d
 8004f2c:	08004f55 	.word	0x08004f55
 8004f30:	08004f5d 	.word	0x08004f5d
 8004f34:	08004f73 	.word	0x08004f73
 8004f38:	08004f63 	.word	0x08004f63
 8004f3c:	08004f73 	.word	0x08004f73
 8004f40:	08004f73 	.word	0x08004f73
 8004f44:	08004f73 	.word	0x08004f73
 8004f48:	08004f6b 	.word	0x08004f6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f4c:	f7ff f9f8 	bl	8004340 <HAL_RCC_GetPCLK1Freq>
 8004f50:	61b8      	str	r0, [r7, #24]
        break;
 8004f52:	e013      	b.n	8004f7c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f54:	f7ff fa08 	bl	8004368 <HAL_RCC_GetPCLK2Freq>
 8004f58:	61b8      	str	r0, [r7, #24]
        break;
 8004f5a:	e00f      	b.n	8004f7c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f5c:	4b4b      	ldr	r3, [pc, #300]	; (800508c <UART_SetConfig+0x4c4>)
 8004f5e:	61bb      	str	r3, [r7, #24]
        break;
 8004f60:	e00c      	b.n	8004f7c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f62:	f7ff f8db 	bl	800411c <HAL_RCC_GetSysClockFreq>
 8004f66:	61b8      	str	r0, [r7, #24]
        break;
 8004f68:	e008      	b.n	8004f7c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f6e:	61bb      	str	r3, [r7, #24]
        break;
 8004f70:	e004      	b.n	8004f7c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004f72:	2300      	movs	r3, #0
 8004f74:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	77bb      	strb	r3, [r7, #30]
        break;
 8004f7a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f7c:	69bb      	ldr	r3, [r7, #24]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d074      	beq.n	800506c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004f82:	69bb      	ldr	r3, [r7, #24]
 8004f84:	005a      	lsls	r2, r3, #1
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	085b      	lsrs	r3, r3, #1
 8004f8c:	441a      	add	r2, r3
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f96:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	2b0f      	cmp	r3, #15
 8004f9c:	d916      	bls.n	8004fcc <UART_SetConfig+0x404>
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fa4:	d212      	bcs.n	8004fcc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	f023 030f 	bic.w	r3, r3, #15
 8004fae:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	085b      	lsrs	r3, r3, #1
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	f003 0307 	and.w	r3, r3, #7
 8004fba:	b29a      	uxth	r2, r3
 8004fbc:	89fb      	ldrh	r3, [r7, #14]
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	89fa      	ldrh	r2, [r7, #14]
 8004fc8:	60da      	str	r2, [r3, #12]
 8004fca:	e04f      	b.n	800506c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	77bb      	strb	r3, [r7, #30]
 8004fd0:	e04c      	b.n	800506c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004fd2:	7ffb      	ldrb	r3, [r7, #31]
 8004fd4:	2b08      	cmp	r3, #8
 8004fd6:	d828      	bhi.n	800502a <UART_SetConfig+0x462>
 8004fd8:	a201      	add	r2, pc, #4	; (adr r2, 8004fe0 <UART_SetConfig+0x418>)
 8004fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fde:	bf00      	nop
 8004fe0:	08005005 	.word	0x08005005
 8004fe4:	0800500d 	.word	0x0800500d
 8004fe8:	08005015 	.word	0x08005015
 8004fec:	0800502b 	.word	0x0800502b
 8004ff0:	0800501b 	.word	0x0800501b
 8004ff4:	0800502b 	.word	0x0800502b
 8004ff8:	0800502b 	.word	0x0800502b
 8004ffc:	0800502b 	.word	0x0800502b
 8005000:	08005023 	.word	0x08005023
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005004:	f7ff f99c 	bl	8004340 <HAL_RCC_GetPCLK1Freq>
 8005008:	61b8      	str	r0, [r7, #24]
        break;
 800500a:	e013      	b.n	8005034 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800500c:	f7ff f9ac 	bl	8004368 <HAL_RCC_GetPCLK2Freq>
 8005010:	61b8      	str	r0, [r7, #24]
        break;
 8005012:	e00f      	b.n	8005034 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005014:	4b1d      	ldr	r3, [pc, #116]	; (800508c <UART_SetConfig+0x4c4>)
 8005016:	61bb      	str	r3, [r7, #24]
        break;
 8005018:	e00c      	b.n	8005034 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800501a:	f7ff f87f 	bl	800411c <HAL_RCC_GetSysClockFreq>
 800501e:	61b8      	str	r0, [r7, #24]
        break;
 8005020:	e008      	b.n	8005034 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005022:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005026:	61bb      	str	r3, [r7, #24]
        break;
 8005028:	e004      	b.n	8005034 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800502a:	2300      	movs	r3, #0
 800502c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	77bb      	strb	r3, [r7, #30]
        break;
 8005032:	bf00      	nop
    }

    if (pclk != 0U)
 8005034:	69bb      	ldr	r3, [r7, #24]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d018      	beq.n	800506c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	085a      	lsrs	r2, r3, #1
 8005040:	69bb      	ldr	r3, [r7, #24]
 8005042:	441a      	add	r2, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	fbb2 f3f3 	udiv	r3, r2, r3
 800504c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	2b0f      	cmp	r3, #15
 8005052:	d909      	bls.n	8005068 <UART_SetConfig+0x4a0>
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800505a:	d205      	bcs.n	8005068 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	b29a      	uxth	r2, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	60da      	str	r2, [r3, #12]
 8005066:	e001      	b.n	800506c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005078:	7fbb      	ldrb	r3, [r7, #30]
}
 800507a:	4618      	mov	r0, r3
 800507c:	3720      	adds	r7, #32
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}
 8005082:	bf00      	nop
 8005084:	40007c00 	.word	0x40007c00
 8005088:	40023800 	.word	0x40023800
 800508c:	00f42400 	.word	0x00f42400

08005090 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005090:	b480      	push	{r7}
 8005092:	b083      	sub	sp, #12
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509c:	f003 0301 	and.w	r3, r3, #1
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d00a      	beq.n	80050ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	430a      	orrs	r2, r1
 80050b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050be:	f003 0302 	and.w	r3, r3, #2
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d00a      	beq.n	80050dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	430a      	orrs	r2, r1
 80050da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e0:	f003 0304 	and.w	r3, r3, #4
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d00a      	beq.n	80050fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	430a      	orrs	r2, r1
 80050fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005102:	f003 0308 	and.w	r3, r3, #8
 8005106:	2b00      	cmp	r3, #0
 8005108:	d00a      	beq.n	8005120 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	430a      	orrs	r2, r1
 800511e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005124:	f003 0310 	and.w	r3, r3, #16
 8005128:	2b00      	cmp	r3, #0
 800512a:	d00a      	beq.n	8005142 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	430a      	orrs	r2, r1
 8005140:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005146:	f003 0320 	and.w	r3, r3, #32
 800514a:	2b00      	cmp	r3, #0
 800514c:	d00a      	beq.n	8005164 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	430a      	orrs	r2, r1
 8005162:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800516c:	2b00      	cmp	r3, #0
 800516e:	d01a      	beq.n	80051a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	430a      	orrs	r2, r1
 8005184:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800518e:	d10a      	bne.n	80051a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	430a      	orrs	r2, r1
 80051a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d00a      	beq.n	80051c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	430a      	orrs	r2, r1
 80051c6:	605a      	str	r2, [r3, #4]
  }
}
 80051c8:	bf00      	nop
 80051ca:	370c      	adds	r7, #12
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr

080051d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b086      	sub	sp, #24
 80051d8:	af02      	add	r7, sp, #8
 80051da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80051e4:	f7fc fe76 	bl	8001ed4 <HAL_GetTick>
 80051e8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f003 0308 	and.w	r3, r3, #8
 80051f4:	2b08      	cmp	r3, #8
 80051f6:	d10e      	bne.n	8005216 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80051fc:	9300      	str	r3, [sp, #0]
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2200      	movs	r2, #0
 8005202:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 f81b 	bl	8005242 <UART_WaitOnFlagUntilTimeout>
 800520c:	4603      	mov	r3, r0
 800520e:	2b00      	cmp	r3, #0
 8005210:	d001      	beq.n	8005216 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005212:	2303      	movs	r3, #3
 8005214:	e011      	b.n	800523a <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2220      	movs	r2, #32
 800521a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2220      	movs	r2, #32
 8005220:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005238:	2300      	movs	r3, #0
}
 800523a:	4618      	mov	r0, r3
 800523c:	3710      	adds	r7, #16
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}

08005242 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005242:	b580      	push	{r7, lr}
 8005244:	b09c      	sub	sp, #112	; 0x70
 8005246:	af00      	add	r7, sp, #0
 8005248:	60f8      	str	r0, [r7, #12]
 800524a:	60b9      	str	r1, [r7, #8]
 800524c:	603b      	str	r3, [r7, #0]
 800524e:	4613      	mov	r3, r2
 8005250:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005252:	e0a7      	b.n	80053a4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005254:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005256:	f1b3 3fff 	cmp.w	r3, #4294967295
 800525a:	f000 80a3 	beq.w	80053a4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800525e:	f7fc fe39 	bl	8001ed4 <HAL_GetTick>
 8005262:	4602      	mov	r2, r0
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	1ad3      	subs	r3, r2, r3
 8005268:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800526a:	429a      	cmp	r2, r3
 800526c:	d302      	bcc.n	8005274 <UART_WaitOnFlagUntilTimeout+0x32>
 800526e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005270:	2b00      	cmp	r3, #0
 8005272:	d13f      	bne.n	80052f4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800527a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800527c:	e853 3f00 	ldrex	r3, [r3]
 8005280:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005282:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005284:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005288:	667b      	str	r3, [r7, #100]	; 0x64
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	461a      	mov	r2, r3
 8005290:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005292:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005294:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005296:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005298:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800529a:	e841 2300 	strex	r3, r2, [r1]
 800529e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80052a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d1e6      	bne.n	8005274 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	3308      	adds	r3, #8
 80052ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052b0:	e853 3f00 	ldrex	r3, [r3]
 80052b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80052b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052b8:	f023 0301 	bic.w	r3, r3, #1
 80052bc:	663b      	str	r3, [r7, #96]	; 0x60
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	3308      	adds	r3, #8
 80052c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80052c6:	64ba      	str	r2, [r7, #72]	; 0x48
 80052c8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80052cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052ce:	e841 2300 	strex	r3, r2, [r1]
 80052d2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80052d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d1e5      	bne.n	80052a6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2220      	movs	r2, #32
 80052de:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2220      	movs	r2, #32
 80052e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2200      	movs	r2, #0
 80052ec:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80052f0:	2303      	movs	r3, #3
 80052f2:	e068      	b.n	80053c6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f003 0304 	and.w	r3, r3, #4
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d050      	beq.n	80053a4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	69db      	ldr	r3, [r3, #28]
 8005308:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800530c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005310:	d148      	bne.n	80053a4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800531a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005324:	e853 3f00 	ldrex	r3, [r3]
 8005328:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800532a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005330:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	461a      	mov	r2, r3
 8005338:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800533a:	637b      	str	r3, [r7, #52]	; 0x34
 800533c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800533e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005340:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005342:	e841 2300 	strex	r3, r2, [r1]
 8005346:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800534a:	2b00      	cmp	r3, #0
 800534c:	d1e6      	bne.n	800531c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	3308      	adds	r3, #8
 8005354:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	e853 3f00 	ldrex	r3, [r3]
 800535c:	613b      	str	r3, [r7, #16]
   return(result);
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	f023 0301 	bic.w	r3, r3, #1
 8005364:	66bb      	str	r3, [r7, #104]	; 0x68
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	3308      	adds	r3, #8
 800536c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800536e:	623a      	str	r2, [r7, #32]
 8005370:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005372:	69f9      	ldr	r1, [r7, #28]
 8005374:	6a3a      	ldr	r2, [r7, #32]
 8005376:	e841 2300 	strex	r3, r2, [r1]
 800537a:	61bb      	str	r3, [r7, #24]
   return(result);
 800537c:	69bb      	ldr	r3, [r7, #24]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d1e5      	bne.n	800534e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2220      	movs	r2, #32
 8005386:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2220      	movs	r2, #32
 800538c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2220      	movs	r2, #32
 8005394:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2200      	movs	r2, #0
 800539c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80053a0:	2303      	movs	r3, #3
 80053a2:	e010      	b.n	80053c6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	69da      	ldr	r2, [r3, #28]
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	4013      	ands	r3, r2
 80053ae:	68ba      	ldr	r2, [r7, #8]
 80053b0:	429a      	cmp	r2, r3
 80053b2:	bf0c      	ite	eq
 80053b4:	2301      	moveq	r3, #1
 80053b6:	2300      	movne	r3, #0
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	461a      	mov	r2, r3
 80053bc:	79fb      	ldrb	r3, [r7, #7]
 80053be:	429a      	cmp	r2, r3
 80053c0:	f43f af48 	beq.w	8005254 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80053c4:	2300      	movs	r3, #0
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3770      	adds	r7, #112	; 0x70
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}
	...

080053d0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80053d0:	b084      	sub	sp, #16
 80053d2:	b580      	push	{r7, lr}
 80053d4:	b084      	sub	sp, #16
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6078      	str	r0, [r7, #4]
 80053da:	f107 001c 	add.w	r0, r7, #28
 80053de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80053e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d126      	bne.n	8005436 <USB_CoreInit+0x66>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	68da      	ldr	r2, [r3, #12]
 80053f8:	4b38      	ldr	r3, [pc, #224]	; (80054dc <USB_CoreInit+0x10c>)
 80053fa:	4013      	ands	r3, r2
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	60d3      	str	r3, [r2, #12]

#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	68db      	ldr	r3, [r3, #12]
 8005404:	f043 0210 	orr.w	r2, r3, #16
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	60da      	str	r2, [r3, #12]
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005418:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800541a:	2b01      	cmp	r3, #1
 800541c:	d105      	bne.n	800542a <USB_CoreInit+0x5a>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f000 fad0 	bl	80059d0 <USB_CoreReset>
 8005430:	4603      	mov	r3, r0
 8005432:	73fb      	strb	r3, [r7, #15]
 8005434:	e03a      	b.n	80054ac <USB_CoreInit+0xdc>
  }
#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8005436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005438:	2b03      	cmp	r3, #3
 800543a:	d126      	bne.n	800548a <USB_CoreInit+0xba>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005440:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The UTMI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	68da      	ldr	r2, [r3, #12]
 800544c:	4b23      	ldr	r3, [pc, #140]	; (80054dc <USB_CoreInit+0x10c>)
 800544e:	4013      	ands	r3, r2
 8005450:	687a      	ldr	r2, [r7, #4]
 8005452:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	60da      	str	r2, [r3, #12]

    /* Select UTMI Interface */
    USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	f023 0210 	bic.w	r2, r3, #16
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	60da      	str	r2, [r3, #12]
    {
      return HAL_ERROR;
    }
#endif /* USBPHYC */

    if (cfg.use_external_vbus == 1U)
 800546c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800546e:	2b01      	cmp	r3, #1
 8005470:	d105      	bne.n	800547e <USB_CoreInit+0xae>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	68db      	ldr	r3, [r3, #12]
 8005476:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f000 faa6 	bl	80059d0 <USB_CoreReset>
 8005484:	4603      	mov	r3, r0
 8005486:	73fb      	strb	r3, [r7, #15]
 8005488:	e010      	b.n	80054ac <USB_CoreInit+0xdc>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	68db      	ldr	r3, [r3, #12]
 800548e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f000 fa9a 	bl	80059d0 <USB_CoreReset>
 800549c:	4603      	mov	r3, r0
 800549e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80054ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	d10b      	bne.n	80054ca <USB_CoreInit+0xfa>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	f043 0206 	orr.w	r2, r3, #6
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	f043 0220 	orr.w	r2, r3, #32
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80054ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3710      	adds	r7, #16
 80054d0:	46bd      	mov	sp, r7
 80054d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80054d6:	b004      	add	sp, #16
 80054d8:	4770      	bx	lr
 80054da:	bf00      	nop
 80054dc:	ffbdffbf 	.word	0xffbdffbf

080054e0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b083      	sub	sp, #12
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	f023 0201 	bic.w	r2, r3, #1
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80054f4:	2300      	movs	r3, #0
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	370c      	adds	r7, #12
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr

08005502 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005502:	b580      	push	{r7, lr}
 8005504:	b084      	sub	sp, #16
 8005506:	af00      	add	r7, sp, #0
 8005508:	6078      	str	r0, [r7, #4]
 800550a:	460b      	mov	r3, r1
 800550c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800550e:	2300      	movs	r3, #0
 8005510:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800551e:	78fb      	ldrb	r3, [r7, #3]
 8005520:	2b01      	cmp	r3, #1
 8005522:	d115      	bne.n	8005550 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	68db      	ldr	r3, [r3, #12]
 8005528:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005530:	2001      	movs	r0, #1
 8005532:	f7fc fcdb 	bl	8001eec <HAL_Delay>
      ms++;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	3301      	adds	r3, #1
 800553a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f000 fa39 	bl	80059b4 <USB_GetMode>
 8005542:	4603      	mov	r3, r0
 8005544:	2b01      	cmp	r3, #1
 8005546:	d01e      	beq.n	8005586 <USB_SetCurrentMode+0x84>
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2b31      	cmp	r3, #49	; 0x31
 800554c:	d9f0      	bls.n	8005530 <USB_SetCurrentMode+0x2e>
 800554e:	e01a      	b.n	8005586 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005550:	78fb      	ldrb	r3, [r7, #3]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d115      	bne.n	8005582 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005562:	2001      	movs	r0, #1
 8005564:	f7fc fcc2 	bl	8001eec <HAL_Delay>
      ms++;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	3301      	adds	r3, #1
 800556c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f000 fa20 	bl	80059b4 <USB_GetMode>
 8005574:	4603      	mov	r3, r0
 8005576:	2b00      	cmp	r3, #0
 8005578:	d005      	beq.n	8005586 <USB_SetCurrentMode+0x84>
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2b31      	cmp	r3, #49	; 0x31
 800557e:	d9f0      	bls.n	8005562 <USB_SetCurrentMode+0x60>
 8005580:	e001      	b.n	8005586 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	e005      	b.n	8005592 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2b32      	cmp	r3, #50	; 0x32
 800558a:	d101      	bne.n	8005590 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	e000      	b.n	8005592 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005590:	2300      	movs	r3, #0
}
 8005592:	4618      	mov	r0, r3
 8005594:	3710      	adds	r7, #16
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}
	...

0800559c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800559c:	b084      	sub	sp, #16
 800559e:	b580      	push	{r7, lr}
 80055a0:	b086      	sub	sp, #24
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	6078      	str	r0, [r7, #4]
 80055a6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80055aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80055ae:	2300      	movs	r3, #0
 80055b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80055b6:	2300      	movs	r3, #0
 80055b8:	613b      	str	r3, [r7, #16]
 80055ba:	e009      	b.n	80055d0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80055bc:	687a      	ldr	r2, [r7, #4]
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	3340      	adds	r3, #64	; 0x40
 80055c2:	009b      	lsls	r3, r3, #2
 80055c4:	4413      	add	r3, r2
 80055c6:	2200      	movs	r2, #0
 80055c8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	3301      	adds	r3, #1
 80055ce:	613b      	str	r3, [r7, #16]
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	2b0e      	cmp	r3, #14
 80055d4:	d9f2      	bls.n	80055bc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80055d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d11c      	bne.n	8005616 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	68fa      	ldr	r2, [r7, #12]
 80055e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055ea:	f043 0302 	orr.w	r3, r3, #2
 80055ee:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	601a      	str	r2, [r3, #0]
 8005614:	e005      	b.n	8005622 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800561a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005628:	461a      	mov	r2, r3
 800562a:	2300      	movs	r3, #0
 800562c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005634:	4619      	mov	r1, r3
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800563c:	461a      	mov	r2, r3
 800563e:	680b      	ldr	r3, [r1, #0]
 8005640:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005644:	2b01      	cmp	r3, #1
 8005646:	d10c      	bne.n	8005662 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800564a:	2b00      	cmp	r3, #0
 800564c:	d104      	bne.n	8005658 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800564e:	2100      	movs	r1, #0
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f000 f975 	bl	8005940 <USB_SetDevSpeed>
 8005656:	e018      	b.n	800568a <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005658:	2101      	movs	r1, #1
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f000 f970 	bl	8005940 <USB_SetDevSpeed>
 8005660:	e013      	b.n	800568a <USB_DevInit+0xee>
    }
  }
#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8005662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005664:	2b03      	cmp	r3, #3
 8005666:	d10c      	bne.n	8005682 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800566a:	2b00      	cmp	r3, #0
 800566c:	d104      	bne.n	8005678 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800566e:	2100      	movs	r1, #0
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f000 f965 	bl	8005940 <USB_SetDevSpeed>
 8005676:	e008      	b.n	800568a <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005678:	2101      	movs	r1, #1
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f000 f960 	bl	8005940 <USB_SetDevSpeed>
 8005680:	e003      	b.n	800568a <USB_DevInit+0xee>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005682:	2103      	movs	r1, #3
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f000 f95b 	bl	8005940 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800568a:	2110      	movs	r1, #16
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f000 f8f3 	bl	8005878 <USB_FlushTxFifo>
 8005692:	4603      	mov	r3, r0
 8005694:	2b00      	cmp	r3, #0
 8005696:	d001      	beq.n	800569c <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8005698:	2301      	movs	r3, #1
 800569a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f000 f91f 	bl	80058e0 <USB_FlushRxFifo>
 80056a2:	4603      	mov	r3, r0
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d001      	beq.n	80056ac <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056b2:	461a      	mov	r2, r3
 80056b4:	2300      	movs	r3, #0
 80056b6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056be:	461a      	mov	r2, r3
 80056c0:	2300      	movs	r3, #0
 80056c2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056ca:	461a      	mov	r2, r3
 80056cc:	2300      	movs	r3, #0
 80056ce:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80056d0:	2300      	movs	r3, #0
 80056d2:	613b      	str	r3, [r7, #16]
 80056d4:	e043      	b.n	800575e <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	015a      	lsls	r2, r3, #5
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	4413      	add	r3, r2
 80056de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056ec:	d118      	bne.n	8005720 <USB_DevInit+0x184>
    {
      if (i == 0U)
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d10a      	bne.n	800570a <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	015a      	lsls	r2, r3, #5
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	4413      	add	r3, r2
 80056fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005700:	461a      	mov	r2, r3
 8005702:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005706:	6013      	str	r3, [r2, #0]
 8005708:	e013      	b.n	8005732 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	015a      	lsls	r2, r3, #5
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	4413      	add	r3, r2
 8005712:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005716:	461a      	mov	r2, r3
 8005718:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800571c:	6013      	str	r3, [r2, #0]
 800571e:	e008      	b.n	8005732 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	015a      	lsls	r2, r3, #5
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	4413      	add	r3, r2
 8005728:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800572c:	461a      	mov	r2, r3
 800572e:	2300      	movs	r3, #0
 8005730:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	015a      	lsls	r2, r3, #5
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	4413      	add	r3, r2
 800573a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800573e:	461a      	mov	r2, r3
 8005740:	2300      	movs	r3, #0
 8005742:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	015a      	lsls	r2, r3, #5
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	4413      	add	r3, r2
 800574c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005750:	461a      	mov	r2, r3
 8005752:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005756:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	3301      	adds	r3, #1
 800575c:	613b      	str	r3, [r7, #16]
 800575e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005760:	693a      	ldr	r2, [r7, #16]
 8005762:	429a      	cmp	r2, r3
 8005764:	d3b7      	bcc.n	80056d6 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005766:	2300      	movs	r3, #0
 8005768:	613b      	str	r3, [r7, #16]
 800576a:	e043      	b.n	80057f4 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	015a      	lsls	r2, r3, #5
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	4413      	add	r3, r2
 8005774:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800577e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005782:	d118      	bne.n	80057b6 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d10a      	bne.n	80057a0 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	015a      	lsls	r2, r3, #5
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	4413      	add	r3, r2
 8005792:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005796:	461a      	mov	r2, r3
 8005798:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800579c:	6013      	str	r3, [r2, #0]
 800579e:	e013      	b.n	80057c8 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	015a      	lsls	r2, r3, #5
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	4413      	add	r3, r2
 80057a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057ac:	461a      	mov	r2, r3
 80057ae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80057b2:	6013      	str	r3, [r2, #0]
 80057b4:	e008      	b.n	80057c8 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	015a      	lsls	r2, r3, #5
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	4413      	add	r3, r2
 80057be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057c2:	461a      	mov	r2, r3
 80057c4:	2300      	movs	r3, #0
 80057c6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	015a      	lsls	r2, r3, #5
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	4413      	add	r3, r2
 80057d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057d4:	461a      	mov	r2, r3
 80057d6:	2300      	movs	r3, #0
 80057d8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	015a      	lsls	r2, r3, #5
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	4413      	add	r3, r2
 80057e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057e6:	461a      	mov	r2, r3
 80057e8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80057ec:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	3301      	adds	r3, #1
 80057f2:	613b      	str	r3, [r7, #16]
 80057f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f6:	693a      	ldr	r2, [r7, #16]
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d3b7      	bcc.n	800576c <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005802:	691b      	ldr	r3, [r3, #16]
 8005804:	68fa      	ldr	r2, [r7, #12]
 8005806:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800580a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800580e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800581c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800581e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005820:	2b00      	cmp	r3, #0
 8005822:	d105      	bne.n	8005830 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	699b      	ldr	r3, [r3, #24]
 8005828:	f043 0210 	orr.w	r2, r3, #16
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	699a      	ldr	r2, [r3, #24]
 8005834:	4b0e      	ldr	r3, [pc, #56]	; (8005870 <USB_DevInit+0x2d4>)
 8005836:	4313      	orrs	r3, r2
 8005838:	687a      	ldr	r2, [r7, #4]
 800583a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800583c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800583e:	2b00      	cmp	r3, #0
 8005840:	d005      	beq.n	800584e <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	699b      	ldr	r3, [r3, #24]
 8005846:	f043 0208 	orr.w	r2, r3, #8
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800584e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005850:	2b01      	cmp	r3, #1
 8005852:	d105      	bne.n	8005860 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	699a      	ldr	r2, [r3, #24]
 8005858:	4b06      	ldr	r3, [pc, #24]	; (8005874 <USB_DevInit+0x2d8>)
 800585a:	4313      	orrs	r3, r2
 800585c:	687a      	ldr	r2, [r7, #4]
 800585e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005860:	7dfb      	ldrb	r3, [r7, #23]
}
 8005862:	4618      	mov	r0, r3
 8005864:	3718      	adds	r7, #24
 8005866:	46bd      	mov	sp, r7
 8005868:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800586c:	b004      	add	sp, #16
 800586e:	4770      	bx	lr
 8005870:	803c3800 	.word	0x803c3800
 8005874:	40000004 	.word	0x40000004

08005878 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005878:	b480      	push	{r7}
 800587a:	b085      	sub	sp, #20
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005882:	2300      	movs	r3, #0
 8005884:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	3301      	adds	r3, #1
 800588a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	4a13      	ldr	r2, [pc, #76]	; (80058dc <USB_FlushTxFifo+0x64>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d901      	bls.n	8005898 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005894:	2303      	movs	r3, #3
 8005896:	e01b      	b.n	80058d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	691b      	ldr	r3, [r3, #16]
 800589c:	2b00      	cmp	r3, #0
 800589e:	daf2      	bge.n	8005886 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80058a0:	2300      	movs	r3, #0
 80058a2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	019b      	lsls	r3, r3, #6
 80058a8:	f043 0220 	orr.w	r2, r3, #32
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	3301      	adds	r3, #1
 80058b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	4a08      	ldr	r2, [pc, #32]	; (80058dc <USB_FlushTxFifo+0x64>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d901      	bls.n	80058c2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80058be:	2303      	movs	r3, #3
 80058c0:	e006      	b.n	80058d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	691b      	ldr	r3, [r3, #16]
 80058c6:	f003 0320 	and.w	r3, r3, #32
 80058ca:	2b20      	cmp	r3, #32
 80058cc:	d0f0      	beq.n	80058b0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80058ce:	2300      	movs	r3, #0
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3714      	adds	r7, #20
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr
 80058dc:	00030d40 	.word	0x00030d40

080058e0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b085      	sub	sp, #20
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80058e8:	2300      	movs	r3, #0
 80058ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	3301      	adds	r3, #1
 80058f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	4a11      	ldr	r2, [pc, #68]	; (800593c <USB_FlushRxFifo+0x5c>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d901      	bls.n	80058fe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80058fa:	2303      	movs	r3, #3
 80058fc:	e018      	b.n	8005930 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	691b      	ldr	r3, [r3, #16]
 8005902:	2b00      	cmp	r3, #0
 8005904:	daf2      	bge.n	80058ec <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005906:	2300      	movs	r3, #0
 8005908:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2210      	movs	r2, #16
 800590e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	3301      	adds	r3, #1
 8005914:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	4a08      	ldr	r2, [pc, #32]	; (800593c <USB_FlushRxFifo+0x5c>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d901      	bls.n	8005922 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800591e:	2303      	movs	r3, #3
 8005920:	e006      	b.n	8005930 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	691b      	ldr	r3, [r3, #16]
 8005926:	f003 0310 	and.w	r3, r3, #16
 800592a:	2b10      	cmp	r3, #16
 800592c:	d0f0      	beq.n	8005910 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800592e:	2300      	movs	r3, #0
}
 8005930:	4618      	mov	r0, r3
 8005932:	3714      	adds	r7, #20
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr
 800593c:	00030d40 	.word	0x00030d40

08005940 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005940:	b480      	push	{r7}
 8005942:	b085      	sub	sp, #20
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	460b      	mov	r3, r1
 800594a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005956:	681a      	ldr	r2, [r3, #0]
 8005958:	78fb      	ldrb	r3, [r7, #3]
 800595a:	68f9      	ldr	r1, [r7, #12]
 800595c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005960:	4313      	orrs	r3, r2
 8005962:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005964:	2300      	movs	r3, #0
}
 8005966:	4618      	mov	r0, r3
 8005968:	3714      	adds	r7, #20
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr

08005972 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005972:	b480      	push	{r7}
 8005974:	b085      	sub	sp, #20
 8005976:	af00      	add	r7, sp, #0
 8005978:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	68fa      	ldr	r2, [r7, #12]
 8005988:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800598c:	f023 0303 	bic.w	r3, r3, #3
 8005990:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	68fa      	ldr	r2, [r7, #12]
 800599c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059a0:	f043 0302 	orr.w	r3, r3, #2
 80059a4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80059a6:	2300      	movs	r3, #0
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3714      	adds	r7, #20
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr

080059b4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b083      	sub	sp, #12
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	695b      	ldr	r3, [r3, #20]
 80059c0:	f003 0301 	and.w	r3, r3, #1
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	370c      	adds	r7, #12
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr

080059d0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b085      	sub	sp, #20
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80059d8:	2300      	movs	r3, #0
 80059da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	3301      	adds	r3, #1
 80059e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	4a13      	ldr	r2, [pc, #76]	; (8005a34 <USB_CoreReset+0x64>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d901      	bls.n	80059ee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80059ea:	2303      	movs	r3, #3
 80059ec:	e01b      	b.n	8005a26 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	691b      	ldr	r3, [r3, #16]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	daf2      	bge.n	80059dc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80059f6:	2300      	movs	r3, #0
 80059f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	691b      	ldr	r3, [r3, #16]
 80059fe:	f043 0201 	orr.w	r2, r3, #1
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	3301      	adds	r3, #1
 8005a0a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	4a09      	ldr	r2, [pc, #36]	; (8005a34 <USB_CoreReset+0x64>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d901      	bls.n	8005a18 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005a14:	2303      	movs	r3, #3
 8005a16:	e006      	b.n	8005a26 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	691b      	ldr	r3, [r3, #16]
 8005a1c:	f003 0301 	and.w	r3, r3, #1
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	d0f0      	beq.n	8005a06 <USB_CoreReset+0x36>

  return HAL_OK;
 8005a24:	2300      	movs	r3, #0
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3714      	adds	r7, #20
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a30:	4770      	bx	lr
 8005a32:	bf00      	nop
 8005a34:	00030d40 	.word	0x00030d40

08005a38 <__cvt>:
 8005a38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a3c:	ec55 4b10 	vmov	r4, r5, d0
 8005a40:	2d00      	cmp	r5, #0
 8005a42:	460e      	mov	r6, r1
 8005a44:	4619      	mov	r1, r3
 8005a46:	462b      	mov	r3, r5
 8005a48:	bfbb      	ittet	lt
 8005a4a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005a4e:	461d      	movlt	r5, r3
 8005a50:	2300      	movge	r3, #0
 8005a52:	232d      	movlt	r3, #45	; 0x2d
 8005a54:	700b      	strb	r3, [r1, #0]
 8005a56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a58:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005a5c:	4691      	mov	r9, r2
 8005a5e:	f023 0820 	bic.w	r8, r3, #32
 8005a62:	bfbc      	itt	lt
 8005a64:	4622      	movlt	r2, r4
 8005a66:	4614      	movlt	r4, r2
 8005a68:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005a6c:	d005      	beq.n	8005a7a <__cvt+0x42>
 8005a6e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005a72:	d100      	bne.n	8005a76 <__cvt+0x3e>
 8005a74:	3601      	adds	r6, #1
 8005a76:	2102      	movs	r1, #2
 8005a78:	e000      	b.n	8005a7c <__cvt+0x44>
 8005a7a:	2103      	movs	r1, #3
 8005a7c:	ab03      	add	r3, sp, #12
 8005a7e:	9301      	str	r3, [sp, #4]
 8005a80:	ab02      	add	r3, sp, #8
 8005a82:	9300      	str	r3, [sp, #0]
 8005a84:	ec45 4b10 	vmov	d0, r4, r5
 8005a88:	4653      	mov	r3, sl
 8005a8a:	4632      	mov	r2, r6
 8005a8c:	f000 fe68 	bl	8006760 <_dtoa_r>
 8005a90:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005a94:	4607      	mov	r7, r0
 8005a96:	d102      	bne.n	8005a9e <__cvt+0x66>
 8005a98:	f019 0f01 	tst.w	r9, #1
 8005a9c:	d022      	beq.n	8005ae4 <__cvt+0xac>
 8005a9e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005aa2:	eb07 0906 	add.w	r9, r7, r6
 8005aa6:	d110      	bne.n	8005aca <__cvt+0x92>
 8005aa8:	783b      	ldrb	r3, [r7, #0]
 8005aaa:	2b30      	cmp	r3, #48	; 0x30
 8005aac:	d10a      	bne.n	8005ac4 <__cvt+0x8c>
 8005aae:	2200      	movs	r2, #0
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	4620      	mov	r0, r4
 8005ab4:	4629      	mov	r1, r5
 8005ab6:	f7fb f82f 	bl	8000b18 <__aeabi_dcmpeq>
 8005aba:	b918      	cbnz	r0, 8005ac4 <__cvt+0x8c>
 8005abc:	f1c6 0601 	rsb	r6, r6, #1
 8005ac0:	f8ca 6000 	str.w	r6, [sl]
 8005ac4:	f8da 3000 	ldr.w	r3, [sl]
 8005ac8:	4499      	add	r9, r3
 8005aca:	2200      	movs	r2, #0
 8005acc:	2300      	movs	r3, #0
 8005ace:	4620      	mov	r0, r4
 8005ad0:	4629      	mov	r1, r5
 8005ad2:	f7fb f821 	bl	8000b18 <__aeabi_dcmpeq>
 8005ad6:	b108      	cbz	r0, 8005adc <__cvt+0xa4>
 8005ad8:	f8cd 900c 	str.w	r9, [sp, #12]
 8005adc:	2230      	movs	r2, #48	; 0x30
 8005ade:	9b03      	ldr	r3, [sp, #12]
 8005ae0:	454b      	cmp	r3, r9
 8005ae2:	d307      	bcc.n	8005af4 <__cvt+0xbc>
 8005ae4:	9b03      	ldr	r3, [sp, #12]
 8005ae6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005ae8:	1bdb      	subs	r3, r3, r7
 8005aea:	4638      	mov	r0, r7
 8005aec:	6013      	str	r3, [r2, #0]
 8005aee:	b004      	add	sp, #16
 8005af0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005af4:	1c59      	adds	r1, r3, #1
 8005af6:	9103      	str	r1, [sp, #12]
 8005af8:	701a      	strb	r2, [r3, #0]
 8005afa:	e7f0      	b.n	8005ade <__cvt+0xa6>

08005afc <__exponent>:
 8005afc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005afe:	4603      	mov	r3, r0
 8005b00:	2900      	cmp	r1, #0
 8005b02:	bfb8      	it	lt
 8005b04:	4249      	neglt	r1, r1
 8005b06:	f803 2b02 	strb.w	r2, [r3], #2
 8005b0a:	bfb4      	ite	lt
 8005b0c:	222d      	movlt	r2, #45	; 0x2d
 8005b0e:	222b      	movge	r2, #43	; 0x2b
 8005b10:	2909      	cmp	r1, #9
 8005b12:	7042      	strb	r2, [r0, #1]
 8005b14:	dd2a      	ble.n	8005b6c <__exponent+0x70>
 8005b16:	f10d 0207 	add.w	r2, sp, #7
 8005b1a:	4617      	mov	r7, r2
 8005b1c:	260a      	movs	r6, #10
 8005b1e:	4694      	mov	ip, r2
 8005b20:	fb91 f5f6 	sdiv	r5, r1, r6
 8005b24:	fb06 1415 	mls	r4, r6, r5, r1
 8005b28:	3430      	adds	r4, #48	; 0x30
 8005b2a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005b2e:	460c      	mov	r4, r1
 8005b30:	2c63      	cmp	r4, #99	; 0x63
 8005b32:	f102 32ff 	add.w	r2, r2, #4294967295
 8005b36:	4629      	mov	r1, r5
 8005b38:	dcf1      	bgt.n	8005b1e <__exponent+0x22>
 8005b3a:	3130      	adds	r1, #48	; 0x30
 8005b3c:	f1ac 0402 	sub.w	r4, ip, #2
 8005b40:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005b44:	1c41      	adds	r1, r0, #1
 8005b46:	4622      	mov	r2, r4
 8005b48:	42ba      	cmp	r2, r7
 8005b4a:	d30a      	bcc.n	8005b62 <__exponent+0x66>
 8005b4c:	f10d 0209 	add.w	r2, sp, #9
 8005b50:	eba2 020c 	sub.w	r2, r2, ip
 8005b54:	42bc      	cmp	r4, r7
 8005b56:	bf88      	it	hi
 8005b58:	2200      	movhi	r2, #0
 8005b5a:	4413      	add	r3, r2
 8005b5c:	1a18      	subs	r0, r3, r0
 8005b5e:	b003      	add	sp, #12
 8005b60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b62:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005b66:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005b6a:	e7ed      	b.n	8005b48 <__exponent+0x4c>
 8005b6c:	2330      	movs	r3, #48	; 0x30
 8005b6e:	3130      	adds	r1, #48	; 0x30
 8005b70:	7083      	strb	r3, [r0, #2]
 8005b72:	70c1      	strb	r1, [r0, #3]
 8005b74:	1d03      	adds	r3, r0, #4
 8005b76:	e7f1      	b.n	8005b5c <__exponent+0x60>

08005b78 <_printf_float>:
 8005b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b7c:	ed2d 8b02 	vpush	{d8}
 8005b80:	b08d      	sub	sp, #52	; 0x34
 8005b82:	460c      	mov	r4, r1
 8005b84:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005b88:	4616      	mov	r6, r2
 8005b8a:	461f      	mov	r7, r3
 8005b8c:	4605      	mov	r5, r0
 8005b8e:	f000 fce7 	bl	8006560 <_localeconv_r>
 8005b92:	f8d0 a000 	ldr.w	sl, [r0]
 8005b96:	4650      	mov	r0, sl
 8005b98:	f7fa fb92 	bl	80002c0 <strlen>
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	930a      	str	r3, [sp, #40]	; 0x28
 8005ba0:	6823      	ldr	r3, [r4, #0]
 8005ba2:	9305      	str	r3, [sp, #20]
 8005ba4:	f8d8 3000 	ldr.w	r3, [r8]
 8005ba8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005bac:	3307      	adds	r3, #7
 8005bae:	f023 0307 	bic.w	r3, r3, #7
 8005bb2:	f103 0208 	add.w	r2, r3, #8
 8005bb6:	f8c8 2000 	str.w	r2, [r8]
 8005bba:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005bbe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005bc2:	9307      	str	r3, [sp, #28]
 8005bc4:	f8cd 8018 	str.w	r8, [sp, #24]
 8005bc8:	ee08 0a10 	vmov	s16, r0
 8005bcc:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8005bd0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005bd4:	4b9e      	ldr	r3, [pc, #632]	; (8005e50 <_printf_float+0x2d8>)
 8005bd6:	f04f 32ff 	mov.w	r2, #4294967295
 8005bda:	f7fa ffcf 	bl	8000b7c <__aeabi_dcmpun>
 8005bde:	bb88      	cbnz	r0, 8005c44 <_printf_float+0xcc>
 8005be0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005be4:	4b9a      	ldr	r3, [pc, #616]	; (8005e50 <_printf_float+0x2d8>)
 8005be6:	f04f 32ff 	mov.w	r2, #4294967295
 8005bea:	f7fa ffa9 	bl	8000b40 <__aeabi_dcmple>
 8005bee:	bb48      	cbnz	r0, 8005c44 <_printf_float+0xcc>
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	4640      	mov	r0, r8
 8005bf6:	4649      	mov	r1, r9
 8005bf8:	f7fa ff98 	bl	8000b2c <__aeabi_dcmplt>
 8005bfc:	b110      	cbz	r0, 8005c04 <_printf_float+0x8c>
 8005bfe:	232d      	movs	r3, #45	; 0x2d
 8005c00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c04:	4a93      	ldr	r2, [pc, #588]	; (8005e54 <_printf_float+0x2dc>)
 8005c06:	4b94      	ldr	r3, [pc, #592]	; (8005e58 <_printf_float+0x2e0>)
 8005c08:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005c0c:	bf94      	ite	ls
 8005c0e:	4690      	movls	r8, r2
 8005c10:	4698      	movhi	r8, r3
 8005c12:	2303      	movs	r3, #3
 8005c14:	6123      	str	r3, [r4, #16]
 8005c16:	9b05      	ldr	r3, [sp, #20]
 8005c18:	f023 0304 	bic.w	r3, r3, #4
 8005c1c:	6023      	str	r3, [r4, #0]
 8005c1e:	f04f 0900 	mov.w	r9, #0
 8005c22:	9700      	str	r7, [sp, #0]
 8005c24:	4633      	mov	r3, r6
 8005c26:	aa0b      	add	r2, sp, #44	; 0x2c
 8005c28:	4621      	mov	r1, r4
 8005c2a:	4628      	mov	r0, r5
 8005c2c:	f000 f9da 	bl	8005fe4 <_printf_common>
 8005c30:	3001      	adds	r0, #1
 8005c32:	f040 8090 	bne.w	8005d56 <_printf_float+0x1de>
 8005c36:	f04f 30ff 	mov.w	r0, #4294967295
 8005c3a:	b00d      	add	sp, #52	; 0x34
 8005c3c:	ecbd 8b02 	vpop	{d8}
 8005c40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c44:	4642      	mov	r2, r8
 8005c46:	464b      	mov	r3, r9
 8005c48:	4640      	mov	r0, r8
 8005c4a:	4649      	mov	r1, r9
 8005c4c:	f7fa ff96 	bl	8000b7c <__aeabi_dcmpun>
 8005c50:	b140      	cbz	r0, 8005c64 <_printf_float+0xec>
 8005c52:	464b      	mov	r3, r9
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	bfbc      	itt	lt
 8005c58:	232d      	movlt	r3, #45	; 0x2d
 8005c5a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005c5e:	4a7f      	ldr	r2, [pc, #508]	; (8005e5c <_printf_float+0x2e4>)
 8005c60:	4b7f      	ldr	r3, [pc, #508]	; (8005e60 <_printf_float+0x2e8>)
 8005c62:	e7d1      	b.n	8005c08 <_printf_float+0x90>
 8005c64:	6863      	ldr	r3, [r4, #4]
 8005c66:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005c6a:	9206      	str	r2, [sp, #24]
 8005c6c:	1c5a      	adds	r2, r3, #1
 8005c6e:	d13f      	bne.n	8005cf0 <_printf_float+0x178>
 8005c70:	2306      	movs	r3, #6
 8005c72:	6063      	str	r3, [r4, #4]
 8005c74:	9b05      	ldr	r3, [sp, #20]
 8005c76:	6861      	ldr	r1, [r4, #4]
 8005c78:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	9303      	str	r3, [sp, #12]
 8005c80:	ab0a      	add	r3, sp, #40	; 0x28
 8005c82:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005c86:	ab09      	add	r3, sp, #36	; 0x24
 8005c88:	ec49 8b10 	vmov	d0, r8, r9
 8005c8c:	9300      	str	r3, [sp, #0]
 8005c8e:	6022      	str	r2, [r4, #0]
 8005c90:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005c94:	4628      	mov	r0, r5
 8005c96:	f7ff fecf 	bl	8005a38 <__cvt>
 8005c9a:	9b06      	ldr	r3, [sp, #24]
 8005c9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005c9e:	2b47      	cmp	r3, #71	; 0x47
 8005ca0:	4680      	mov	r8, r0
 8005ca2:	d108      	bne.n	8005cb6 <_printf_float+0x13e>
 8005ca4:	1cc8      	adds	r0, r1, #3
 8005ca6:	db02      	blt.n	8005cae <_printf_float+0x136>
 8005ca8:	6863      	ldr	r3, [r4, #4]
 8005caa:	4299      	cmp	r1, r3
 8005cac:	dd41      	ble.n	8005d32 <_printf_float+0x1ba>
 8005cae:	f1ab 0302 	sub.w	r3, fp, #2
 8005cb2:	fa5f fb83 	uxtb.w	fp, r3
 8005cb6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005cba:	d820      	bhi.n	8005cfe <_printf_float+0x186>
 8005cbc:	3901      	subs	r1, #1
 8005cbe:	465a      	mov	r2, fp
 8005cc0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005cc4:	9109      	str	r1, [sp, #36]	; 0x24
 8005cc6:	f7ff ff19 	bl	8005afc <__exponent>
 8005cca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005ccc:	1813      	adds	r3, r2, r0
 8005cce:	2a01      	cmp	r2, #1
 8005cd0:	4681      	mov	r9, r0
 8005cd2:	6123      	str	r3, [r4, #16]
 8005cd4:	dc02      	bgt.n	8005cdc <_printf_float+0x164>
 8005cd6:	6822      	ldr	r2, [r4, #0]
 8005cd8:	07d2      	lsls	r2, r2, #31
 8005cda:	d501      	bpl.n	8005ce0 <_printf_float+0x168>
 8005cdc:	3301      	adds	r3, #1
 8005cde:	6123      	str	r3, [r4, #16]
 8005ce0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d09c      	beq.n	8005c22 <_printf_float+0xaa>
 8005ce8:	232d      	movs	r3, #45	; 0x2d
 8005cea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cee:	e798      	b.n	8005c22 <_printf_float+0xaa>
 8005cf0:	9a06      	ldr	r2, [sp, #24]
 8005cf2:	2a47      	cmp	r2, #71	; 0x47
 8005cf4:	d1be      	bne.n	8005c74 <_printf_float+0xfc>
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d1bc      	bne.n	8005c74 <_printf_float+0xfc>
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	e7b9      	b.n	8005c72 <_printf_float+0xfa>
 8005cfe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005d02:	d118      	bne.n	8005d36 <_printf_float+0x1be>
 8005d04:	2900      	cmp	r1, #0
 8005d06:	6863      	ldr	r3, [r4, #4]
 8005d08:	dd0b      	ble.n	8005d22 <_printf_float+0x1aa>
 8005d0a:	6121      	str	r1, [r4, #16]
 8005d0c:	b913      	cbnz	r3, 8005d14 <_printf_float+0x19c>
 8005d0e:	6822      	ldr	r2, [r4, #0]
 8005d10:	07d0      	lsls	r0, r2, #31
 8005d12:	d502      	bpl.n	8005d1a <_printf_float+0x1a2>
 8005d14:	3301      	adds	r3, #1
 8005d16:	440b      	add	r3, r1
 8005d18:	6123      	str	r3, [r4, #16]
 8005d1a:	65a1      	str	r1, [r4, #88]	; 0x58
 8005d1c:	f04f 0900 	mov.w	r9, #0
 8005d20:	e7de      	b.n	8005ce0 <_printf_float+0x168>
 8005d22:	b913      	cbnz	r3, 8005d2a <_printf_float+0x1b2>
 8005d24:	6822      	ldr	r2, [r4, #0]
 8005d26:	07d2      	lsls	r2, r2, #31
 8005d28:	d501      	bpl.n	8005d2e <_printf_float+0x1b6>
 8005d2a:	3302      	adds	r3, #2
 8005d2c:	e7f4      	b.n	8005d18 <_printf_float+0x1a0>
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e7f2      	b.n	8005d18 <_printf_float+0x1a0>
 8005d32:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005d36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d38:	4299      	cmp	r1, r3
 8005d3a:	db05      	blt.n	8005d48 <_printf_float+0x1d0>
 8005d3c:	6823      	ldr	r3, [r4, #0]
 8005d3e:	6121      	str	r1, [r4, #16]
 8005d40:	07d8      	lsls	r0, r3, #31
 8005d42:	d5ea      	bpl.n	8005d1a <_printf_float+0x1a2>
 8005d44:	1c4b      	adds	r3, r1, #1
 8005d46:	e7e7      	b.n	8005d18 <_printf_float+0x1a0>
 8005d48:	2900      	cmp	r1, #0
 8005d4a:	bfd4      	ite	le
 8005d4c:	f1c1 0202 	rsble	r2, r1, #2
 8005d50:	2201      	movgt	r2, #1
 8005d52:	4413      	add	r3, r2
 8005d54:	e7e0      	b.n	8005d18 <_printf_float+0x1a0>
 8005d56:	6823      	ldr	r3, [r4, #0]
 8005d58:	055a      	lsls	r2, r3, #21
 8005d5a:	d407      	bmi.n	8005d6c <_printf_float+0x1f4>
 8005d5c:	6923      	ldr	r3, [r4, #16]
 8005d5e:	4642      	mov	r2, r8
 8005d60:	4631      	mov	r1, r6
 8005d62:	4628      	mov	r0, r5
 8005d64:	47b8      	blx	r7
 8005d66:	3001      	adds	r0, #1
 8005d68:	d12c      	bne.n	8005dc4 <_printf_float+0x24c>
 8005d6a:	e764      	b.n	8005c36 <_printf_float+0xbe>
 8005d6c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005d70:	f240 80e0 	bls.w	8005f34 <_printf_float+0x3bc>
 8005d74:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005d78:	2200      	movs	r2, #0
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	f7fa fecc 	bl	8000b18 <__aeabi_dcmpeq>
 8005d80:	2800      	cmp	r0, #0
 8005d82:	d034      	beq.n	8005dee <_printf_float+0x276>
 8005d84:	4a37      	ldr	r2, [pc, #220]	; (8005e64 <_printf_float+0x2ec>)
 8005d86:	2301      	movs	r3, #1
 8005d88:	4631      	mov	r1, r6
 8005d8a:	4628      	mov	r0, r5
 8005d8c:	47b8      	blx	r7
 8005d8e:	3001      	adds	r0, #1
 8005d90:	f43f af51 	beq.w	8005c36 <_printf_float+0xbe>
 8005d94:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	db02      	blt.n	8005da2 <_printf_float+0x22a>
 8005d9c:	6823      	ldr	r3, [r4, #0]
 8005d9e:	07d8      	lsls	r0, r3, #31
 8005da0:	d510      	bpl.n	8005dc4 <_printf_float+0x24c>
 8005da2:	ee18 3a10 	vmov	r3, s16
 8005da6:	4652      	mov	r2, sl
 8005da8:	4631      	mov	r1, r6
 8005daa:	4628      	mov	r0, r5
 8005dac:	47b8      	blx	r7
 8005dae:	3001      	adds	r0, #1
 8005db0:	f43f af41 	beq.w	8005c36 <_printf_float+0xbe>
 8005db4:	f04f 0800 	mov.w	r8, #0
 8005db8:	f104 091a 	add.w	r9, r4, #26
 8005dbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005dbe:	3b01      	subs	r3, #1
 8005dc0:	4543      	cmp	r3, r8
 8005dc2:	dc09      	bgt.n	8005dd8 <_printf_float+0x260>
 8005dc4:	6823      	ldr	r3, [r4, #0]
 8005dc6:	079b      	lsls	r3, r3, #30
 8005dc8:	f100 8107 	bmi.w	8005fda <_printf_float+0x462>
 8005dcc:	68e0      	ldr	r0, [r4, #12]
 8005dce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005dd0:	4298      	cmp	r0, r3
 8005dd2:	bfb8      	it	lt
 8005dd4:	4618      	movlt	r0, r3
 8005dd6:	e730      	b.n	8005c3a <_printf_float+0xc2>
 8005dd8:	2301      	movs	r3, #1
 8005dda:	464a      	mov	r2, r9
 8005ddc:	4631      	mov	r1, r6
 8005dde:	4628      	mov	r0, r5
 8005de0:	47b8      	blx	r7
 8005de2:	3001      	adds	r0, #1
 8005de4:	f43f af27 	beq.w	8005c36 <_printf_float+0xbe>
 8005de8:	f108 0801 	add.w	r8, r8, #1
 8005dec:	e7e6      	b.n	8005dbc <_printf_float+0x244>
 8005dee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	dc39      	bgt.n	8005e68 <_printf_float+0x2f0>
 8005df4:	4a1b      	ldr	r2, [pc, #108]	; (8005e64 <_printf_float+0x2ec>)
 8005df6:	2301      	movs	r3, #1
 8005df8:	4631      	mov	r1, r6
 8005dfa:	4628      	mov	r0, r5
 8005dfc:	47b8      	blx	r7
 8005dfe:	3001      	adds	r0, #1
 8005e00:	f43f af19 	beq.w	8005c36 <_printf_float+0xbe>
 8005e04:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	d102      	bne.n	8005e12 <_printf_float+0x29a>
 8005e0c:	6823      	ldr	r3, [r4, #0]
 8005e0e:	07d9      	lsls	r1, r3, #31
 8005e10:	d5d8      	bpl.n	8005dc4 <_printf_float+0x24c>
 8005e12:	ee18 3a10 	vmov	r3, s16
 8005e16:	4652      	mov	r2, sl
 8005e18:	4631      	mov	r1, r6
 8005e1a:	4628      	mov	r0, r5
 8005e1c:	47b8      	blx	r7
 8005e1e:	3001      	adds	r0, #1
 8005e20:	f43f af09 	beq.w	8005c36 <_printf_float+0xbe>
 8005e24:	f04f 0900 	mov.w	r9, #0
 8005e28:	f104 0a1a 	add.w	sl, r4, #26
 8005e2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e2e:	425b      	negs	r3, r3
 8005e30:	454b      	cmp	r3, r9
 8005e32:	dc01      	bgt.n	8005e38 <_printf_float+0x2c0>
 8005e34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e36:	e792      	b.n	8005d5e <_printf_float+0x1e6>
 8005e38:	2301      	movs	r3, #1
 8005e3a:	4652      	mov	r2, sl
 8005e3c:	4631      	mov	r1, r6
 8005e3e:	4628      	mov	r0, r5
 8005e40:	47b8      	blx	r7
 8005e42:	3001      	adds	r0, #1
 8005e44:	f43f aef7 	beq.w	8005c36 <_printf_float+0xbe>
 8005e48:	f109 0901 	add.w	r9, r9, #1
 8005e4c:	e7ee      	b.n	8005e2c <_printf_float+0x2b4>
 8005e4e:	bf00      	nop
 8005e50:	7fefffff 	.word	0x7fefffff
 8005e54:	08008800 	.word	0x08008800
 8005e58:	08008804 	.word	0x08008804
 8005e5c:	08008808 	.word	0x08008808
 8005e60:	0800880c 	.word	0x0800880c
 8005e64:	08008810 	.word	0x08008810
 8005e68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e6a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	bfa8      	it	ge
 8005e70:	461a      	movge	r2, r3
 8005e72:	2a00      	cmp	r2, #0
 8005e74:	4691      	mov	r9, r2
 8005e76:	dc37      	bgt.n	8005ee8 <_printf_float+0x370>
 8005e78:	f04f 0b00 	mov.w	fp, #0
 8005e7c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005e80:	f104 021a 	add.w	r2, r4, #26
 8005e84:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005e86:	9305      	str	r3, [sp, #20]
 8005e88:	eba3 0309 	sub.w	r3, r3, r9
 8005e8c:	455b      	cmp	r3, fp
 8005e8e:	dc33      	bgt.n	8005ef8 <_printf_float+0x380>
 8005e90:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e94:	429a      	cmp	r2, r3
 8005e96:	db3b      	blt.n	8005f10 <_printf_float+0x398>
 8005e98:	6823      	ldr	r3, [r4, #0]
 8005e9a:	07da      	lsls	r2, r3, #31
 8005e9c:	d438      	bmi.n	8005f10 <_printf_float+0x398>
 8005e9e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005ea2:	eba2 0903 	sub.w	r9, r2, r3
 8005ea6:	9b05      	ldr	r3, [sp, #20]
 8005ea8:	1ad2      	subs	r2, r2, r3
 8005eaa:	4591      	cmp	r9, r2
 8005eac:	bfa8      	it	ge
 8005eae:	4691      	movge	r9, r2
 8005eb0:	f1b9 0f00 	cmp.w	r9, #0
 8005eb4:	dc35      	bgt.n	8005f22 <_printf_float+0x3aa>
 8005eb6:	f04f 0800 	mov.w	r8, #0
 8005eba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005ebe:	f104 0a1a 	add.w	sl, r4, #26
 8005ec2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ec6:	1a9b      	subs	r3, r3, r2
 8005ec8:	eba3 0309 	sub.w	r3, r3, r9
 8005ecc:	4543      	cmp	r3, r8
 8005ece:	f77f af79 	ble.w	8005dc4 <_printf_float+0x24c>
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	4652      	mov	r2, sl
 8005ed6:	4631      	mov	r1, r6
 8005ed8:	4628      	mov	r0, r5
 8005eda:	47b8      	blx	r7
 8005edc:	3001      	adds	r0, #1
 8005ede:	f43f aeaa 	beq.w	8005c36 <_printf_float+0xbe>
 8005ee2:	f108 0801 	add.w	r8, r8, #1
 8005ee6:	e7ec      	b.n	8005ec2 <_printf_float+0x34a>
 8005ee8:	4613      	mov	r3, r2
 8005eea:	4631      	mov	r1, r6
 8005eec:	4642      	mov	r2, r8
 8005eee:	4628      	mov	r0, r5
 8005ef0:	47b8      	blx	r7
 8005ef2:	3001      	adds	r0, #1
 8005ef4:	d1c0      	bne.n	8005e78 <_printf_float+0x300>
 8005ef6:	e69e      	b.n	8005c36 <_printf_float+0xbe>
 8005ef8:	2301      	movs	r3, #1
 8005efa:	4631      	mov	r1, r6
 8005efc:	4628      	mov	r0, r5
 8005efe:	9205      	str	r2, [sp, #20]
 8005f00:	47b8      	blx	r7
 8005f02:	3001      	adds	r0, #1
 8005f04:	f43f ae97 	beq.w	8005c36 <_printf_float+0xbe>
 8005f08:	9a05      	ldr	r2, [sp, #20]
 8005f0a:	f10b 0b01 	add.w	fp, fp, #1
 8005f0e:	e7b9      	b.n	8005e84 <_printf_float+0x30c>
 8005f10:	ee18 3a10 	vmov	r3, s16
 8005f14:	4652      	mov	r2, sl
 8005f16:	4631      	mov	r1, r6
 8005f18:	4628      	mov	r0, r5
 8005f1a:	47b8      	blx	r7
 8005f1c:	3001      	adds	r0, #1
 8005f1e:	d1be      	bne.n	8005e9e <_printf_float+0x326>
 8005f20:	e689      	b.n	8005c36 <_printf_float+0xbe>
 8005f22:	9a05      	ldr	r2, [sp, #20]
 8005f24:	464b      	mov	r3, r9
 8005f26:	4442      	add	r2, r8
 8005f28:	4631      	mov	r1, r6
 8005f2a:	4628      	mov	r0, r5
 8005f2c:	47b8      	blx	r7
 8005f2e:	3001      	adds	r0, #1
 8005f30:	d1c1      	bne.n	8005eb6 <_printf_float+0x33e>
 8005f32:	e680      	b.n	8005c36 <_printf_float+0xbe>
 8005f34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f36:	2a01      	cmp	r2, #1
 8005f38:	dc01      	bgt.n	8005f3e <_printf_float+0x3c6>
 8005f3a:	07db      	lsls	r3, r3, #31
 8005f3c:	d53a      	bpl.n	8005fb4 <_printf_float+0x43c>
 8005f3e:	2301      	movs	r3, #1
 8005f40:	4642      	mov	r2, r8
 8005f42:	4631      	mov	r1, r6
 8005f44:	4628      	mov	r0, r5
 8005f46:	47b8      	blx	r7
 8005f48:	3001      	adds	r0, #1
 8005f4a:	f43f ae74 	beq.w	8005c36 <_printf_float+0xbe>
 8005f4e:	ee18 3a10 	vmov	r3, s16
 8005f52:	4652      	mov	r2, sl
 8005f54:	4631      	mov	r1, r6
 8005f56:	4628      	mov	r0, r5
 8005f58:	47b8      	blx	r7
 8005f5a:	3001      	adds	r0, #1
 8005f5c:	f43f ae6b 	beq.w	8005c36 <_printf_float+0xbe>
 8005f60:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005f64:	2200      	movs	r2, #0
 8005f66:	2300      	movs	r3, #0
 8005f68:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005f6c:	f7fa fdd4 	bl	8000b18 <__aeabi_dcmpeq>
 8005f70:	b9d8      	cbnz	r0, 8005faa <_printf_float+0x432>
 8005f72:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005f76:	f108 0201 	add.w	r2, r8, #1
 8005f7a:	4631      	mov	r1, r6
 8005f7c:	4628      	mov	r0, r5
 8005f7e:	47b8      	blx	r7
 8005f80:	3001      	adds	r0, #1
 8005f82:	d10e      	bne.n	8005fa2 <_printf_float+0x42a>
 8005f84:	e657      	b.n	8005c36 <_printf_float+0xbe>
 8005f86:	2301      	movs	r3, #1
 8005f88:	4652      	mov	r2, sl
 8005f8a:	4631      	mov	r1, r6
 8005f8c:	4628      	mov	r0, r5
 8005f8e:	47b8      	blx	r7
 8005f90:	3001      	adds	r0, #1
 8005f92:	f43f ae50 	beq.w	8005c36 <_printf_float+0xbe>
 8005f96:	f108 0801 	add.w	r8, r8, #1
 8005f9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f9c:	3b01      	subs	r3, #1
 8005f9e:	4543      	cmp	r3, r8
 8005fa0:	dcf1      	bgt.n	8005f86 <_printf_float+0x40e>
 8005fa2:	464b      	mov	r3, r9
 8005fa4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005fa8:	e6da      	b.n	8005d60 <_printf_float+0x1e8>
 8005faa:	f04f 0800 	mov.w	r8, #0
 8005fae:	f104 0a1a 	add.w	sl, r4, #26
 8005fb2:	e7f2      	b.n	8005f9a <_printf_float+0x422>
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	4642      	mov	r2, r8
 8005fb8:	e7df      	b.n	8005f7a <_printf_float+0x402>
 8005fba:	2301      	movs	r3, #1
 8005fbc:	464a      	mov	r2, r9
 8005fbe:	4631      	mov	r1, r6
 8005fc0:	4628      	mov	r0, r5
 8005fc2:	47b8      	blx	r7
 8005fc4:	3001      	adds	r0, #1
 8005fc6:	f43f ae36 	beq.w	8005c36 <_printf_float+0xbe>
 8005fca:	f108 0801 	add.w	r8, r8, #1
 8005fce:	68e3      	ldr	r3, [r4, #12]
 8005fd0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005fd2:	1a5b      	subs	r3, r3, r1
 8005fd4:	4543      	cmp	r3, r8
 8005fd6:	dcf0      	bgt.n	8005fba <_printf_float+0x442>
 8005fd8:	e6f8      	b.n	8005dcc <_printf_float+0x254>
 8005fda:	f04f 0800 	mov.w	r8, #0
 8005fde:	f104 0919 	add.w	r9, r4, #25
 8005fe2:	e7f4      	b.n	8005fce <_printf_float+0x456>

08005fe4 <_printf_common>:
 8005fe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fe8:	4616      	mov	r6, r2
 8005fea:	4699      	mov	r9, r3
 8005fec:	688a      	ldr	r2, [r1, #8]
 8005fee:	690b      	ldr	r3, [r1, #16]
 8005ff0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	bfb8      	it	lt
 8005ff8:	4613      	movlt	r3, r2
 8005ffa:	6033      	str	r3, [r6, #0]
 8005ffc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006000:	4607      	mov	r7, r0
 8006002:	460c      	mov	r4, r1
 8006004:	b10a      	cbz	r2, 800600a <_printf_common+0x26>
 8006006:	3301      	adds	r3, #1
 8006008:	6033      	str	r3, [r6, #0]
 800600a:	6823      	ldr	r3, [r4, #0]
 800600c:	0699      	lsls	r1, r3, #26
 800600e:	bf42      	ittt	mi
 8006010:	6833      	ldrmi	r3, [r6, #0]
 8006012:	3302      	addmi	r3, #2
 8006014:	6033      	strmi	r3, [r6, #0]
 8006016:	6825      	ldr	r5, [r4, #0]
 8006018:	f015 0506 	ands.w	r5, r5, #6
 800601c:	d106      	bne.n	800602c <_printf_common+0x48>
 800601e:	f104 0a19 	add.w	sl, r4, #25
 8006022:	68e3      	ldr	r3, [r4, #12]
 8006024:	6832      	ldr	r2, [r6, #0]
 8006026:	1a9b      	subs	r3, r3, r2
 8006028:	42ab      	cmp	r3, r5
 800602a:	dc26      	bgt.n	800607a <_printf_common+0x96>
 800602c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006030:	1e13      	subs	r3, r2, #0
 8006032:	6822      	ldr	r2, [r4, #0]
 8006034:	bf18      	it	ne
 8006036:	2301      	movne	r3, #1
 8006038:	0692      	lsls	r2, r2, #26
 800603a:	d42b      	bmi.n	8006094 <_printf_common+0xb0>
 800603c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006040:	4649      	mov	r1, r9
 8006042:	4638      	mov	r0, r7
 8006044:	47c0      	blx	r8
 8006046:	3001      	adds	r0, #1
 8006048:	d01e      	beq.n	8006088 <_printf_common+0xa4>
 800604a:	6823      	ldr	r3, [r4, #0]
 800604c:	6922      	ldr	r2, [r4, #16]
 800604e:	f003 0306 	and.w	r3, r3, #6
 8006052:	2b04      	cmp	r3, #4
 8006054:	bf02      	ittt	eq
 8006056:	68e5      	ldreq	r5, [r4, #12]
 8006058:	6833      	ldreq	r3, [r6, #0]
 800605a:	1aed      	subeq	r5, r5, r3
 800605c:	68a3      	ldr	r3, [r4, #8]
 800605e:	bf0c      	ite	eq
 8006060:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006064:	2500      	movne	r5, #0
 8006066:	4293      	cmp	r3, r2
 8006068:	bfc4      	itt	gt
 800606a:	1a9b      	subgt	r3, r3, r2
 800606c:	18ed      	addgt	r5, r5, r3
 800606e:	2600      	movs	r6, #0
 8006070:	341a      	adds	r4, #26
 8006072:	42b5      	cmp	r5, r6
 8006074:	d11a      	bne.n	80060ac <_printf_common+0xc8>
 8006076:	2000      	movs	r0, #0
 8006078:	e008      	b.n	800608c <_printf_common+0xa8>
 800607a:	2301      	movs	r3, #1
 800607c:	4652      	mov	r2, sl
 800607e:	4649      	mov	r1, r9
 8006080:	4638      	mov	r0, r7
 8006082:	47c0      	blx	r8
 8006084:	3001      	adds	r0, #1
 8006086:	d103      	bne.n	8006090 <_printf_common+0xac>
 8006088:	f04f 30ff 	mov.w	r0, #4294967295
 800608c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006090:	3501      	adds	r5, #1
 8006092:	e7c6      	b.n	8006022 <_printf_common+0x3e>
 8006094:	18e1      	adds	r1, r4, r3
 8006096:	1c5a      	adds	r2, r3, #1
 8006098:	2030      	movs	r0, #48	; 0x30
 800609a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800609e:	4422      	add	r2, r4
 80060a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80060a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80060a8:	3302      	adds	r3, #2
 80060aa:	e7c7      	b.n	800603c <_printf_common+0x58>
 80060ac:	2301      	movs	r3, #1
 80060ae:	4622      	mov	r2, r4
 80060b0:	4649      	mov	r1, r9
 80060b2:	4638      	mov	r0, r7
 80060b4:	47c0      	blx	r8
 80060b6:	3001      	adds	r0, #1
 80060b8:	d0e6      	beq.n	8006088 <_printf_common+0xa4>
 80060ba:	3601      	adds	r6, #1
 80060bc:	e7d9      	b.n	8006072 <_printf_common+0x8e>
	...

080060c0 <_printf_i>:
 80060c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80060c4:	7e0f      	ldrb	r7, [r1, #24]
 80060c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80060c8:	2f78      	cmp	r7, #120	; 0x78
 80060ca:	4691      	mov	r9, r2
 80060cc:	4680      	mov	r8, r0
 80060ce:	460c      	mov	r4, r1
 80060d0:	469a      	mov	sl, r3
 80060d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80060d6:	d807      	bhi.n	80060e8 <_printf_i+0x28>
 80060d8:	2f62      	cmp	r7, #98	; 0x62
 80060da:	d80a      	bhi.n	80060f2 <_printf_i+0x32>
 80060dc:	2f00      	cmp	r7, #0
 80060de:	f000 80d4 	beq.w	800628a <_printf_i+0x1ca>
 80060e2:	2f58      	cmp	r7, #88	; 0x58
 80060e4:	f000 80c0 	beq.w	8006268 <_printf_i+0x1a8>
 80060e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80060ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80060f0:	e03a      	b.n	8006168 <_printf_i+0xa8>
 80060f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80060f6:	2b15      	cmp	r3, #21
 80060f8:	d8f6      	bhi.n	80060e8 <_printf_i+0x28>
 80060fa:	a101      	add	r1, pc, #4	; (adr r1, 8006100 <_printf_i+0x40>)
 80060fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006100:	08006159 	.word	0x08006159
 8006104:	0800616d 	.word	0x0800616d
 8006108:	080060e9 	.word	0x080060e9
 800610c:	080060e9 	.word	0x080060e9
 8006110:	080060e9 	.word	0x080060e9
 8006114:	080060e9 	.word	0x080060e9
 8006118:	0800616d 	.word	0x0800616d
 800611c:	080060e9 	.word	0x080060e9
 8006120:	080060e9 	.word	0x080060e9
 8006124:	080060e9 	.word	0x080060e9
 8006128:	080060e9 	.word	0x080060e9
 800612c:	08006271 	.word	0x08006271
 8006130:	08006199 	.word	0x08006199
 8006134:	0800622b 	.word	0x0800622b
 8006138:	080060e9 	.word	0x080060e9
 800613c:	080060e9 	.word	0x080060e9
 8006140:	08006293 	.word	0x08006293
 8006144:	080060e9 	.word	0x080060e9
 8006148:	08006199 	.word	0x08006199
 800614c:	080060e9 	.word	0x080060e9
 8006150:	080060e9 	.word	0x080060e9
 8006154:	08006233 	.word	0x08006233
 8006158:	682b      	ldr	r3, [r5, #0]
 800615a:	1d1a      	adds	r2, r3, #4
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	602a      	str	r2, [r5, #0]
 8006160:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006164:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006168:	2301      	movs	r3, #1
 800616a:	e09f      	b.n	80062ac <_printf_i+0x1ec>
 800616c:	6820      	ldr	r0, [r4, #0]
 800616e:	682b      	ldr	r3, [r5, #0]
 8006170:	0607      	lsls	r7, r0, #24
 8006172:	f103 0104 	add.w	r1, r3, #4
 8006176:	6029      	str	r1, [r5, #0]
 8006178:	d501      	bpl.n	800617e <_printf_i+0xbe>
 800617a:	681e      	ldr	r6, [r3, #0]
 800617c:	e003      	b.n	8006186 <_printf_i+0xc6>
 800617e:	0646      	lsls	r6, r0, #25
 8006180:	d5fb      	bpl.n	800617a <_printf_i+0xba>
 8006182:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006186:	2e00      	cmp	r6, #0
 8006188:	da03      	bge.n	8006192 <_printf_i+0xd2>
 800618a:	232d      	movs	r3, #45	; 0x2d
 800618c:	4276      	negs	r6, r6
 800618e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006192:	485a      	ldr	r0, [pc, #360]	; (80062fc <_printf_i+0x23c>)
 8006194:	230a      	movs	r3, #10
 8006196:	e012      	b.n	80061be <_printf_i+0xfe>
 8006198:	682b      	ldr	r3, [r5, #0]
 800619a:	6820      	ldr	r0, [r4, #0]
 800619c:	1d19      	adds	r1, r3, #4
 800619e:	6029      	str	r1, [r5, #0]
 80061a0:	0605      	lsls	r5, r0, #24
 80061a2:	d501      	bpl.n	80061a8 <_printf_i+0xe8>
 80061a4:	681e      	ldr	r6, [r3, #0]
 80061a6:	e002      	b.n	80061ae <_printf_i+0xee>
 80061a8:	0641      	lsls	r1, r0, #25
 80061aa:	d5fb      	bpl.n	80061a4 <_printf_i+0xe4>
 80061ac:	881e      	ldrh	r6, [r3, #0]
 80061ae:	4853      	ldr	r0, [pc, #332]	; (80062fc <_printf_i+0x23c>)
 80061b0:	2f6f      	cmp	r7, #111	; 0x6f
 80061b2:	bf0c      	ite	eq
 80061b4:	2308      	moveq	r3, #8
 80061b6:	230a      	movne	r3, #10
 80061b8:	2100      	movs	r1, #0
 80061ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80061be:	6865      	ldr	r5, [r4, #4]
 80061c0:	60a5      	str	r5, [r4, #8]
 80061c2:	2d00      	cmp	r5, #0
 80061c4:	bfa2      	ittt	ge
 80061c6:	6821      	ldrge	r1, [r4, #0]
 80061c8:	f021 0104 	bicge.w	r1, r1, #4
 80061cc:	6021      	strge	r1, [r4, #0]
 80061ce:	b90e      	cbnz	r6, 80061d4 <_printf_i+0x114>
 80061d0:	2d00      	cmp	r5, #0
 80061d2:	d04b      	beq.n	800626c <_printf_i+0x1ac>
 80061d4:	4615      	mov	r5, r2
 80061d6:	fbb6 f1f3 	udiv	r1, r6, r3
 80061da:	fb03 6711 	mls	r7, r3, r1, r6
 80061de:	5dc7      	ldrb	r7, [r0, r7]
 80061e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80061e4:	4637      	mov	r7, r6
 80061e6:	42bb      	cmp	r3, r7
 80061e8:	460e      	mov	r6, r1
 80061ea:	d9f4      	bls.n	80061d6 <_printf_i+0x116>
 80061ec:	2b08      	cmp	r3, #8
 80061ee:	d10b      	bne.n	8006208 <_printf_i+0x148>
 80061f0:	6823      	ldr	r3, [r4, #0]
 80061f2:	07de      	lsls	r6, r3, #31
 80061f4:	d508      	bpl.n	8006208 <_printf_i+0x148>
 80061f6:	6923      	ldr	r3, [r4, #16]
 80061f8:	6861      	ldr	r1, [r4, #4]
 80061fa:	4299      	cmp	r1, r3
 80061fc:	bfde      	ittt	le
 80061fe:	2330      	movle	r3, #48	; 0x30
 8006200:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006204:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006208:	1b52      	subs	r2, r2, r5
 800620a:	6122      	str	r2, [r4, #16]
 800620c:	f8cd a000 	str.w	sl, [sp]
 8006210:	464b      	mov	r3, r9
 8006212:	aa03      	add	r2, sp, #12
 8006214:	4621      	mov	r1, r4
 8006216:	4640      	mov	r0, r8
 8006218:	f7ff fee4 	bl	8005fe4 <_printf_common>
 800621c:	3001      	adds	r0, #1
 800621e:	d14a      	bne.n	80062b6 <_printf_i+0x1f6>
 8006220:	f04f 30ff 	mov.w	r0, #4294967295
 8006224:	b004      	add	sp, #16
 8006226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800622a:	6823      	ldr	r3, [r4, #0]
 800622c:	f043 0320 	orr.w	r3, r3, #32
 8006230:	6023      	str	r3, [r4, #0]
 8006232:	4833      	ldr	r0, [pc, #204]	; (8006300 <_printf_i+0x240>)
 8006234:	2778      	movs	r7, #120	; 0x78
 8006236:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800623a:	6823      	ldr	r3, [r4, #0]
 800623c:	6829      	ldr	r1, [r5, #0]
 800623e:	061f      	lsls	r7, r3, #24
 8006240:	f851 6b04 	ldr.w	r6, [r1], #4
 8006244:	d402      	bmi.n	800624c <_printf_i+0x18c>
 8006246:	065f      	lsls	r7, r3, #25
 8006248:	bf48      	it	mi
 800624a:	b2b6      	uxthmi	r6, r6
 800624c:	07df      	lsls	r7, r3, #31
 800624e:	bf48      	it	mi
 8006250:	f043 0320 	orrmi.w	r3, r3, #32
 8006254:	6029      	str	r1, [r5, #0]
 8006256:	bf48      	it	mi
 8006258:	6023      	strmi	r3, [r4, #0]
 800625a:	b91e      	cbnz	r6, 8006264 <_printf_i+0x1a4>
 800625c:	6823      	ldr	r3, [r4, #0]
 800625e:	f023 0320 	bic.w	r3, r3, #32
 8006262:	6023      	str	r3, [r4, #0]
 8006264:	2310      	movs	r3, #16
 8006266:	e7a7      	b.n	80061b8 <_printf_i+0xf8>
 8006268:	4824      	ldr	r0, [pc, #144]	; (80062fc <_printf_i+0x23c>)
 800626a:	e7e4      	b.n	8006236 <_printf_i+0x176>
 800626c:	4615      	mov	r5, r2
 800626e:	e7bd      	b.n	80061ec <_printf_i+0x12c>
 8006270:	682b      	ldr	r3, [r5, #0]
 8006272:	6826      	ldr	r6, [r4, #0]
 8006274:	6961      	ldr	r1, [r4, #20]
 8006276:	1d18      	adds	r0, r3, #4
 8006278:	6028      	str	r0, [r5, #0]
 800627a:	0635      	lsls	r5, r6, #24
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	d501      	bpl.n	8006284 <_printf_i+0x1c4>
 8006280:	6019      	str	r1, [r3, #0]
 8006282:	e002      	b.n	800628a <_printf_i+0x1ca>
 8006284:	0670      	lsls	r0, r6, #25
 8006286:	d5fb      	bpl.n	8006280 <_printf_i+0x1c0>
 8006288:	8019      	strh	r1, [r3, #0]
 800628a:	2300      	movs	r3, #0
 800628c:	6123      	str	r3, [r4, #16]
 800628e:	4615      	mov	r5, r2
 8006290:	e7bc      	b.n	800620c <_printf_i+0x14c>
 8006292:	682b      	ldr	r3, [r5, #0]
 8006294:	1d1a      	adds	r2, r3, #4
 8006296:	602a      	str	r2, [r5, #0]
 8006298:	681d      	ldr	r5, [r3, #0]
 800629a:	6862      	ldr	r2, [r4, #4]
 800629c:	2100      	movs	r1, #0
 800629e:	4628      	mov	r0, r5
 80062a0:	f7f9 ffbe 	bl	8000220 <memchr>
 80062a4:	b108      	cbz	r0, 80062aa <_printf_i+0x1ea>
 80062a6:	1b40      	subs	r0, r0, r5
 80062a8:	6060      	str	r0, [r4, #4]
 80062aa:	6863      	ldr	r3, [r4, #4]
 80062ac:	6123      	str	r3, [r4, #16]
 80062ae:	2300      	movs	r3, #0
 80062b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062b4:	e7aa      	b.n	800620c <_printf_i+0x14c>
 80062b6:	6923      	ldr	r3, [r4, #16]
 80062b8:	462a      	mov	r2, r5
 80062ba:	4649      	mov	r1, r9
 80062bc:	4640      	mov	r0, r8
 80062be:	47d0      	blx	sl
 80062c0:	3001      	adds	r0, #1
 80062c2:	d0ad      	beq.n	8006220 <_printf_i+0x160>
 80062c4:	6823      	ldr	r3, [r4, #0]
 80062c6:	079b      	lsls	r3, r3, #30
 80062c8:	d413      	bmi.n	80062f2 <_printf_i+0x232>
 80062ca:	68e0      	ldr	r0, [r4, #12]
 80062cc:	9b03      	ldr	r3, [sp, #12]
 80062ce:	4298      	cmp	r0, r3
 80062d0:	bfb8      	it	lt
 80062d2:	4618      	movlt	r0, r3
 80062d4:	e7a6      	b.n	8006224 <_printf_i+0x164>
 80062d6:	2301      	movs	r3, #1
 80062d8:	4632      	mov	r2, r6
 80062da:	4649      	mov	r1, r9
 80062dc:	4640      	mov	r0, r8
 80062de:	47d0      	blx	sl
 80062e0:	3001      	adds	r0, #1
 80062e2:	d09d      	beq.n	8006220 <_printf_i+0x160>
 80062e4:	3501      	adds	r5, #1
 80062e6:	68e3      	ldr	r3, [r4, #12]
 80062e8:	9903      	ldr	r1, [sp, #12]
 80062ea:	1a5b      	subs	r3, r3, r1
 80062ec:	42ab      	cmp	r3, r5
 80062ee:	dcf2      	bgt.n	80062d6 <_printf_i+0x216>
 80062f0:	e7eb      	b.n	80062ca <_printf_i+0x20a>
 80062f2:	2500      	movs	r5, #0
 80062f4:	f104 0619 	add.w	r6, r4, #25
 80062f8:	e7f5      	b.n	80062e6 <_printf_i+0x226>
 80062fa:	bf00      	nop
 80062fc:	08008812 	.word	0x08008812
 8006300:	08008823 	.word	0x08008823

08006304 <std>:
 8006304:	2300      	movs	r3, #0
 8006306:	b510      	push	{r4, lr}
 8006308:	4604      	mov	r4, r0
 800630a:	e9c0 3300 	strd	r3, r3, [r0]
 800630e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006312:	6083      	str	r3, [r0, #8]
 8006314:	8181      	strh	r1, [r0, #12]
 8006316:	6643      	str	r3, [r0, #100]	; 0x64
 8006318:	81c2      	strh	r2, [r0, #14]
 800631a:	6183      	str	r3, [r0, #24]
 800631c:	4619      	mov	r1, r3
 800631e:	2208      	movs	r2, #8
 8006320:	305c      	adds	r0, #92	; 0x5c
 8006322:	f000 f914 	bl	800654e <memset>
 8006326:	4b0d      	ldr	r3, [pc, #52]	; (800635c <std+0x58>)
 8006328:	6263      	str	r3, [r4, #36]	; 0x24
 800632a:	4b0d      	ldr	r3, [pc, #52]	; (8006360 <std+0x5c>)
 800632c:	62a3      	str	r3, [r4, #40]	; 0x28
 800632e:	4b0d      	ldr	r3, [pc, #52]	; (8006364 <std+0x60>)
 8006330:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006332:	4b0d      	ldr	r3, [pc, #52]	; (8006368 <std+0x64>)
 8006334:	6323      	str	r3, [r4, #48]	; 0x30
 8006336:	4b0d      	ldr	r3, [pc, #52]	; (800636c <std+0x68>)
 8006338:	6224      	str	r4, [r4, #32]
 800633a:	429c      	cmp	r4, r3
 800633c:	d006      	beq.n	800634c <std+0x48>
 800633e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006342:	4294      	cmp	r4, r2
 8006344:	d002      	beq.n	800634c <std+0x48>
 8006346:	33d0      	adds	r3, #208	; 0xd0
 8006348:	429c      	cmp	r4, r3
 800634a:	d105      	bne.n	8006358 <std+0x54>
 800634c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006350:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006354:	f000 b978 	b.w	8006648 <__retarget_lock_init_recursive>
 8006358:	bd10      	pop	{r4, pc}
 800635a:	bf00      	nop
 800635c:	080064c9 	.word	0x080064c9
 8006360:	080064eb 	.word	0x080064eb
 8006364:	08006523 	.word	0x08006523
 8006368:	08006547 	.word	0x08006547
 800636c:	200009bc 	.word	0x200009bc

08006370 <stdio_exit_handler>:
 8006370:	4a02      	ldr	r2, [pc, #8]	; (800637c <stdio_exit_handler+0xc>)
 8006372:	4903      	ldr	r1, [pc, #12]	; (8006380 <stdio_exit_handler+0x10>)
 8006374:	4803      	ldr	r0, [pc, #12]	; (8006384 <stdio_exit_handler+0x14>)
 8006376:	f000 b869 	b.w	800644c <_fwalk_sglue>
 800637a:	bf00      	nop
 800637c:	2000000c 	.word	0x2000000c
 8006380:	08007ff9 	.word	0x08007ff9
 8006384:	20000018 	.word	0x20000018

08006388 <cleanup_stdio>:
 8006388:	6841      	ldr	r1, [r0, #4]
 800638a:	4b0c      	ldr	r3, [pc, #48]	; (80063bc <cleanup_stdio+0x34>)
 800638c:	4299      	cmp	r1, r3
 800638e:	b510      	push	{r4, lr}
 8006390:	4604      	mov	r4, r0
 8006392:	d001      	beq.n	8006398 <cleanup_stdio+0x10>
 8006394:	f001 fe30 	bl	8007ff8 <_fflush_r>
 8006398:	68a1      	ldr	r1, [r4, #8]
 800639a:	4b09      	ldr	r3, [pc, #36]	; (80063c0 <cleanup_stdio+0x38>)
 800639c:	4299      	cmp	r1, r3
 800639e:	d002      	beq.n	80063a6 <cleanup_stdio+0x1e>
 80063a0:	4620      	mov	r0, r4
 80063a2:	f001 fe29 	bl	8007ff8 <_fflush_r>
 80063a6:	68e1      	ldr	r1, [r4, #12]
 80063a8:	4b06      	ldr	r3, [pc, #24]	; (80063c4 <cleanup_stdio+0x3c>)
 80063aa:	4299      	cmp	r1, r3
 80063ac:	d004      	beq.n	80063b8 <cleanup_stdio+0x30>
 80063ae:	4620      	mov	r0, r4
 80063b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063b4:	f001 be20 	b.w	8007ff8 <_fflush_r>
 80063b8:	bd10      	pop	{r4, pc}
 80063ba:	bf00      	nop
 80063bc:	200009bc 	.word	0x200009bc
 80063c0:	20000a24 	.word	0x20000a24
 80063c4:	20000a8c 	.word	0x20000a8c

080063c8 <global_stdio_init.part.0>:
 80063c8:	b510      	push	{r4, lr}
 80063ca:	4b0b      	ldr	r3, [pc, #44]	; (80063f8 <global_stdio_init.part.0+0x30>)
 80063cc:	4c0b      	ldr	r4, [pc, #44]	; (80063fc <global_stdio_init.part.0+0x34>)
 80063ce:	4a0c      	ldr	r2, [pc, #48]	; (8006400 <global_stdio_init.part.0+0x38>)
 80063d0:	601a      	str	r2, [r3, #0]
 80063d2:	4620      	mov	r0, r4
 80063d4:	2200      	movs	r2, #0
 80063d6:	2104      	movs	r1, #4
 80063d8:	f7ff ff94 	bl	8006304 <std>
 80063dc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80063e0:	2201      	movs	r2, #1
 80063e2:	2109      	movs	r1, #9
 80063e4:	f7ff ff8e 	bl	8006304 <std>
 80063e8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80063ec:	2202      	movs	r2, #2
 80063ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063f2:	2112      	movs	r1, #18
 80063f4:	f7ff bf86 	b.w	8006304 <std>
 80063f8:	20000af4 	.word	0x20000af4
 80063fc:	200009bc 	.word	0x200009bc
 8006400:	08006371 	.word	0x08006371

08006404 <__sfp_lock_acquire>:
 8006404:	4801      	ldr	r0, [pc, #4]	; (800640c <__sfp_lock_acquire+0x8>)
 8006406:	f000 b920 	b.w	800664a <__retarget_lock_acquire_recursive>
 800640a:	bf00      	nop
 800640c:	20000afd 	.word	0x20000afd

08006410 <__sfp_lock_release>:
 8006410:	4801      	ldr	r0, [pc, #4]	; (8006418 <__sfp_lock_release+0x8>)
 8006412:	f000 b91b 	b.w	800664c <__retarget_lock_release_recursive>
 8006416:	bf00      	nop
 8006418:	20000afd 	.word	0x20000afd

0800641c <__sinit>:
 800641c:	b510      	push	{r4, lr}
 800641e:	4604      	mov	r4, r0
 8006420:	f7ff fff0 	bl	8006404 <__sfp_lock_acquire>
 8006424:	6a23      	ldr	r3, [r4, #32]
 8006426:	b11b      	cbz	r3, 8006430 <__sinit+0x14>
 8006428:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800642c:	f7ff bff0 	b.w	8006410 <__sfp_lock_release>
 8006430:	4b04      	ldr	r3, [pc, #16]	; (8006444 <__sinit+0x28>)
 8006432:	6223      	str	r3, [r4, #32]
 8006434:	4b04      	ldr	r3, [pc, #16]	; (8006448 <__sinit+0x2c>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d1f5      	bne.n	8006428 <__sinit+0xc>
 800643c:	f7ff ffc4 	bl	80063c8 <global_stdio_init.part.0>
 8006440:	e7f2      	b.n	8006428 <__sinit+0xc>
 8006442:	bf00      	nop
 8006444:	08006389 	.word	0x08006389
 8006448:	20000af4 	.word	0x20000af4

0800644c <_fwalk_sglue>:
 800644c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006450:	4607      	mov	r7, r0
 8006452:	4688      	mov	r8, r1
 8006454:	4614      	mov	r4, r2
 8006456:	2600      	movs	r6, #0
 8006458:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800645c:	f1b9 0901 	subs.w	r9, r9, #1
 8006460:	d505      	bpl.n	800646e <_fwalk_sglue+0x22>
 8006462:	6824      	ldr	r4, [r4, #0]
 8006464:	2c00      	cmp	r4, #0
 8006466:	d1f7      	bne.n	8006458 <_fwalk_sglue+0xc>
 8006468:	4630      	mov	r0, r6
 800646a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800646e:	89ab      	ldrh	r3, [r5, #12]
 8006470:	2b01      	cmp	r3, #1
 8006472:	d907      	bls.n	8006484 <_fwalk_sglue+0x38>
 8006474:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006478:	3301      	adds	r3, #1
 800647a:	d003      	beq.n	8006484 <_fwalk_sglue+0x38>
 800647c:	4629      	mov	r1, r5
 800647e:	4638      	mov	r0, r7
 8006480:	47c0      	blx	r8
 8006482:	4306      	orrs	r6, r0
 8006484:	3568      	adds	r5, #104	; 0x68
 8006486:	e7e9      	b.n	800645c <_fwalk_sglue+0x10>

08006488 <siprintf>:
 8006488:	b40e      	push	{r1, r2, r3}
 800648a:	b500      	push	{lr}
 800648c:	b09c      	sub	sp, #112	; 0x70
 800648e:	ab1d      	add	r3, sp, #116	; 0x74
 8006490:	9002      	str	r0, [sp, #8]
 8006492:	9006      	str	r0, [sp, #24]
 8006494:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006498:	4809      	ldr	r0, [pc, #36]	; (80064c0 <siprintf+0x38>)
 800649a:	9107      	str	r1, [sp, #28]
 800649c:	9104      	str	r1, [sp, #16]
 800649e:	4909      	ldr	r1, [pc, #36]	; (80064c4 <siprintf+0x3c>)
 80064a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80064a4:	9105      	str	r1, [sp, #20]
 80064a6:	6800      	ldr	r0, [r0, #0]
 80064a8:	9301      	str	r3, [sp, #4]
 80064aa:	a902      	add	r1, sp, #8
 80064ac:	f001 fc20 	bl	8007cf0 <_svfiprintf_r>
 80064b0:	9b02      	ldr	r3, [sp, #8]
 80064b2:	2200      	movs	r2, #0
 80064b4:	701a      	strb	r2, [r3, #0]
 80064b6:	b01c      	add	sp, #112	; 0x70
 80064b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80064bc:	b003      	add	sp, #12
 80064be:	4770      	bx	lr
 80064c0:	20000064 	.word	0x20000064
 80064c4:	ffff0208 	.word	0xffff0208

080064c8 <__sread>:
 80064c8:	b510      	push	{r4, lr}
 80064ca:	460c      	mov	r4, r1
 80064cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064d0:	f000 f86c 	bl	80065ac <_read_r>
 80064d4:	2800      	cmp	r0, #0
 80064d6:	bfab      	itete	ge
 80064d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80064da:	89a3      	ldrhlt	r3, [r4, #12]
 80064dc:	181b      	addge	r3, r3, r0
 80064de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80064e2:	bfac      	ite	ge
 80064e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80064e6:	81a3      	strhlt	r3, [r4, #12]
 80064e8:	bd10      	pop	{r4, pc}

080064ea <__swrite>:
 80064ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064ee:	461f      	mov	r7, r3
 80064f0:	898b      	ldrh	r3, [r1, #12]
 80064f2:	05db      	lsls	r3, r3, #23
 80064f4:	4605      	mov	r5, r0
 80064f6:	460c      	mov	r4, r1
 80064f8:	4616      	mov	r6, r2
 80064fa:	d505      	bpl.n	8006508 <__swrite+0x1e>
 80064fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006500:	2302      	movs	r3, #2
 8006502:	2200      	movs	r2, #0
 8006504:	f000 f840 	bl	8006588 <_lseek_r>
 8006508:	89a3      	ldrh	r3, [r4, #12]
 800650a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800650e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006512:	81a3      	strh	r3, [r4, #12]
 8006514:	4632      	mov	r2, r6
 8006516:	463b      	mov	r3, r7
 8006518:	4628      	mov	r0, r5
 800651a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800651e:	f000 b857 	b.w	80065d0 <_write_r>

08006522 <__sseek>:
 8006522:	b510      	push	{r4, lr}
 8006524:	460c      	mov	r4, r1
 8006526:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800652a:	f000 f82d 	bl	8006588 <_lseek_r>
 800652e:	1c43      	adds	r3, r0, #1
 8006530:	89a3      	ldrh	r3, [r4, #12]
 8006532:	bf15      	itete	ne
 8006534:	6560      	strne	r0, [r4, #84]	; 0x54
 8006536:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800653a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800653e:	81a3      	strheq	r3, [r4, #12]
 8006540:	bf18      	it	ne
 8006542:	81a3      	strhne	r3, [r4, #12]
 8006544:	bd10      	pop	{r4, pc}

08006546 <__sclose>:
 8006546:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800654a:	f000 b80d 	b.w	8006568 <_close_r>

0800654e <memset>:
 800654e:	4402      	add	r2, r0
 8006550:	4603      	mov	r3, r0
 8006552:	4293      	cmp	r3, r2
 8006554:	d100      	bne.n	8006558 <memset+0xa>
 8006556:	4770      	bx	lr
 8006558:	f803 1b01 	strb.w	r1, [r3], #1
 800655c:	e7f9      	b.n	8006552 <memset+0x4>
	...

08006560 <_localeconv_r>:
 8006560:	4800      	ldr	r0, [pc, #0]	; (8006564 <_localeconv_r+0x4>)
 8006562:	4770      	bx	lr
 8006564:	20000158 	.word	0x20000158

08006568 <_close_r>:
 8006568:	b538      	push	{r3, r4, r5, lr}
 800656a:	4d06      	ldr	r5, [pc, #24]	; (8006584 <_close_r+0x1c>)
 800656c:	2300      	movs	r3, #0
 800656e:	4604      	mov	r4, r0
 8006570:	4608      	mov	r0, r1
 8006572:	602b      	str	r3, [r5, #0]
 8006574:	f7fb fbb7 	bl	8001ce6 <_close>
 8006578:	1c43      	adds	r3, r0, #1
 800657a:	d102      	bne.n	8006582 <_close_r+0x1a>
 800657c:	682b      	ldr	r3, [r5, #0]
 800657e:	b103      	cbz	r3, 8006582 <_close_r+0x1a>
 8006580:	6023      	str	r3, [r4, #0]
 8006582:	bd38      	pop	{r3, r4, r5, pc}
 8006584:	20000af8 	.word	0x20000af8

08006588 <_lseek_r>:
 8006588:	b538      	push	{r3, r4, r5, lr}
 800658a:	4d07      	ldr	r5, [pc, #28]	; (80065a8 <_lseek_r+0x20>)
 800658c:	4604      	mov	r4, r0
 800658e:	4608      	mov	r0, r1
 8006590:	4611      	mov	r1, r2
 8006592:	2200      	movs	r2, #0
 8006594:	602a      	str	r2, [r5, #0]
 8006596:	461a      	mov	r2, r3
 8006598:	f7fb fbcc 	bl	8001d34 <_lseek>
 800659c:	1c43      	adds	r3, r0, #1
 800659e:	d102      	bne.n	80065a6 <_lseek_r+0x1e>
 80065a0:	682b      	ldr	r3, [r5, #0]
 80065a2:	b103      	cbz	r3, 80065a6 <_lseek_r+0x1e>
 80065a4:	6023      	str	r3, [r4, #0]
 80065a6:	bd38      	pop	{r3, r4, r5, pc}
 80065a8:	20000af8 	.word	0x20000af8

080065ac <_read_r>:
 80065ac:	b538      	push	{r3, r4, r5, lr}
 80065ae:	4d07      	ldr	r5, [pc, #28]	; (80065cc <_read_r+0x20>)
 80065b0:	4604      	mov	r4, r0
 80065b2:	4608      	mov	r0, r1
 80065b4:	4611      	mov	r1, r2
 80065b6:	2200      	movs	r2, #0
 80065b8:	602a      	str	r2, [r5, #0]
 80065ba:	461a      	mov	r2, r3
 80065bc:	f7fb fb5a 	bl	8001c74 <_read>
 80065c0:	1c43      	adds	r3, r0, #1
 80065c2:	d102      	bne.n	80065ca <_read_r+0x1e>
 80065c4:	682b      	ldr	r3, [r5, #0]
 80065c6:	b103      	cbz	r3, 80065ca <_read_r+0x1e>
 80065c8:	6023      	str	r3, [r4, #0]
 80065ca:	bd38      	pop	{r3, r4, r5, pc}
 80065cc:	20000af8 	.word	0x20000af8

080065d0 <_write_r>:
 80065d0:	b538      	push	{r3, r4, r5, lr}
 80065d2:	4d07      	ldr	r5, [pc, #28]	; (80065f0 <_write_r+0x20>)
 80065d4:	4604      	mov	r4, r0
 80065d6:	4608      	mov	r0, r1
 80065d8:	4611      	mov	r1, r2
 80065da:	2200      	movs	r2, #0
 80065dc:	602a      	str	r2, [r5, #0]
 80065de:	461a      	mov	r2, r3
 80065e0:	f7fb fb65 	bl	8001cae <_write>
 80065e4:	1c43      	adds	r3, r0, #1
 80065e6:	d102      	bne.n	80065ee <_write_r+0x1e>
 80065e8:	682b      	ldr	r3, [r5, #0]
 80065ea:	b103      	cbz	r3, 80065ee <_write_r+0x1e>
 80065ec:	6023      	str	r3, [r4, #0]
 80065ee:	bd38      	pop	{r3, r4, r5, pc}
 80065f0:	20000af8 	.word	0x20000af8

080065f4 <__errno>:
 80065f4:	4b01      	ldr	r3, [pc, #4]	; (80065fc <__errno+0x8>)
 80065f6:	6818      	ldr	r0, [r3, #0]
 80065f8:	4770      	bx	lr
 80065fa:	bf00      	nop
 80065fc:	20000064 	.word	0x20000064

08006600 <__libc_init_array>:
 8006600:	b570      	push	{r4, r5, r6, lr}
 8006602:	4d0d      	ldr	r5, [pc, #52]	; (8006638 <__libc_init_array+0x38>)
 8006604:	4c0d      	ldr	r4, [pc, #52]	; (800663c <__libc_init_array+0x3c>)
 8006606:	1b64      	subs	r4, r4, r5
 8006608:	10a4      	asrs	r4, r4, #2
 800660a:	2600      	movs	r6, #0
 800660c:	42a6      	cmp	r6, r4
 800660e:	d109      	bne.n	8006624 <__libc_init_array+0x24>
 8006610:	4d0b      	ldr	r5, [pc, #44]	; (8006640 <__libc_init_array+0x40>)
 8006612:	4c0c      	ldr	r4, [pc, #48]	; (8006644 <__libc_init_array+0x44>)
 8006614:	f002 f894 	bl	8008740 <_init>
 8006618:	1b64      	subs	r4, r4, r5
 800661a:	10a4      	asrs	r4, r4, #2
 800661c:	2600      	movs	r6, #0
 800661e:	42a6      	cmp	r6, r4
 8006620:	d105      	bne.n	800662e <__libc_init_array+0x2e>
 8006622:	bd70      	pop	{r4, r5, r6, pc}
 8006624:	f855 3b04 	ldr.w	r3, [r5], #4
 8006628:	4798      	blx	r3
 800662a:	3601      	adds	r6, #1
 800662c:	e7ee      	b.n	800660c <__libc_init_array+0xc>
 800662e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006632:	4798      	blx	r3
 8006634:	3601      	adds	r6, #1
 8006636:	e7f2      	b.n	800661e <__libc_init_array+0x1e>
 8006638:	08008b7c 	.word	0x08008b7c
 800663c:	08008b7c 	.word	0x08008b7c
 8006640:	08008b7c 	.word	0x08008b7c
 8006644:	08008b80 	.word	0x08008b80

08006648 <__retarget_lock_init_recursive>:
 8006648:	4770      	bx	lr

0800664a <__retarget_lock_acquire_recursive>:
 800664a:	4770      	bx	lr

0800664c <__retarget_lock_release_recursive>:
 800664c:	4770      	bx	lr

0800664e <quorem>:
 800664e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006652:	6903      	ldr	r3, [r0, #16]
 8006654:	690c      	ldr	r4, [r1, #16]
 8006656:	42a3      	cmp	r3, r4
 8006658:	4607      	mov	r7, r0
 800665a:	db7e      	blt.n	800675a <quorem+0x10c>
 800665c:	3c01      	subs	r4, #1
 800665e:	f101 0814 	add.w	r8, r1, #20
 8006662:	f100 0514 	add.w	r5, r0, #20
 8006666:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800666a:	9301      	str	r3, [sp, #4]
 800666c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006670:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006674:	3301      	adds	r3, #1
 8006676:	429a      	cmp	r2, r3
 8006678:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800667c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006680:	fbb2 f6f3 	udiv	r6, r2, r3
 8006684:	d331      	bcc.n	80066ea <quorem+0x9c>
 8006686:	f04f 0e00 	mov.w	lr, #0
 800668a:	4640      	mov	r0, r8
 800668c:	46ac      	mov	ip, r5
 800668e:	46f2      	mov	sl, lr
 8006690:	f850 2b04 	ldr.w	r2, [r0], #4
 8006694:	b293      	uxth	r3, r2
 8006696:	fb06 e303 	mla	r3, r6, r3, lr
 800669a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800669e:	0c1a      	lsrs	r2, r3, #16
 80066a0:	b29b      	uxth	r3, r3
 80066a2:	ebaa 0303 	sub.w	r3, sl, r3
 80066a6:	f8dc a000 	ldr.w	sl, [ip]
 80066aa:	fa13 f38a 	uxtah	r3, r3, sl
 80066ae:	fb06 220e 	mla	r2, r6, lr, r2
 80066b2:	9300      	str	r3, [sp, #0]
 80066b4:	9b00      	ldr	r3, [sp, #0]
 80066b6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80066ba:	b292      	uxth	r2, r2
 80066bc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80066c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80066c4:	f8bd 3000 	ldrh.w	r3, [sp]
 80066c8:	4581      	cmp	r9, r0
 80066ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80066ce:	f84c 3b04 	str.w	r3, [ip], #4
 80066d2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80066d6:	d2db      	bcs.n	8006690 <quorem+0x42>
 80066d8:	f855 300b 	ldr.w	r3, [r5, fp]
 80066dc:	b92b      	cbnz	r3, 80066ea <quorem+0x9c>
 80066de:	9b01      	ldr	r3, [sp, #4]
 80066e0:	3b04      	subs	r3, #4
 80066e2:	429d      	cmp	r5, r3
 80066e4:	461a      	mov	r2, r3
 80066e6:	d32c      	bcc.n	8006742 <quorem+0xf4>
 80066e8:	613c      	str	r4, [r7, #16]
 80066ea:	4638      	mov	r0, r7
 80066ec:	f001 f9a6 	bl	8007a3c <__mcmp>
 80066f0:	2800      	cmp	r0, #0
 80066f2:	db22      	blt.n	800673a <quorem+0xec>
 80066f4:	3601      	adds	r6, #1
 80066f6:	4629      	mov	r1, r5
 80066f8:	2000      	movs	r0, #0
 80066fa:	f858 2b04 	ldr.w	r2, [r8], #4
 80066fe:	f8d1 c000 	ldr.w	ip, [r1]
 8006702:	b293      	uxth	r3, r2
 8006704:	1ac3      	subs	r3, r0, r3
 8006706:	0c12      	lsrs	r2, r2, #16
 8006708:	fa13 f38c 	uxtah	r3, r3, ip
 800670c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006710:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006714:	b29b      	uxth	r3, r3
 8006716:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800671a:	45c1      	cmp	r9, r8
 800671c:	f841 3b04 	str.w	r3, [r1], #4
 8006720:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006724:	d2e9      	bcs.n	80066fa <quorem+0xac>
 8006726:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800672a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800672e:	b922      	cbnz	r2, 800673a <quorem+0xec>
 8006730:	3b04      	subs	r3, #4
 8006732:	429d      	cmp	r5, r3
 8006734:	461a      	mov	r2, r3
 8006736:	d30a      	bcc.n	800674e <quorem+0x100>
 8006738:	613c      	str	r4, [r7, #16]
 800673a:	4630      	mov	r0, r6
 800673c:	b003      	add	sp, #12
 800673e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006742:	6812      	ldr	r2, [r2, #0]
 8006744:	3b04      	subs	r3, #4
 8006746:	2a00      	cmp	r2, #0
 8006748:	d1ce      	bne.n	80066e8 <quorem+0x9a>
 800674a:	3c01      	subs	r4, #1
 800674c:	e7c9      	b.n	80066e2 <quorem+0x94>
 800674e:	6812      	ldr	r2, [r2, #0]
 8006750:	3b04      	subs	r3, #4
 8006752:	2a00      	cmp	r2, #0
 8006754:	d1f0      	bne.n	8006738 <quorem+0xea>
 8006756:	3c01      	subs	r4, #1
 8006758:	e7eb      	b.n	8006732 <quorem+0xe4>
 800675a:	2000      	movs	r0, #0
 800675c:	e7ee      	b.n	800673c <quorem+0xee>
	...

08006760 <_dtoa_r>:
 8006760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006764:	ed2d 8b04 	vpush	{d8-d9}
 8006768:	69c5      	ldr	r5, [r0, #28]
 800676a:	b093      	sub	sp, #76	; 0x4c
 800676c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006770:	ec57 6b10 	vmov	r6, r7, d0
 8006774:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006778:	9107      	str	r1, [sp, #28]
 800677a:	4604      	mov	r4, r0
 800677c:	920a      	str	r2, [sp, #40]	; 0x28
 800677e:	930d      	str	r3, [sp, #52]	; 0x34
 8006780:	b975      	cbnz	r5, 80067a0 <_dtoa_r+0x40>
 8006782:	2010      	movs	r0, #16
 8006784:	f000 fe2a 	bl	80073dc <malloc>
 8006788:	4602      	mov	r2, r0
 800678a:	61e0      	str	r0, [r4, #28]
 800678c:	b920      	cbnz	r0, 8006798 <_dtoa_r+0x38>
 800678e:	4bae      	ldr	r3, [pc, #696]	; (8006a48 <_dtoa_r+0x2e8>)
 8006790:	21ef      	movs	r1, #239	; 0xef
 8006792:	48ae      	ldr	r0, [pc, #696]	; (8006a4c <_dtoa_r+0x2ec>)
 8006794:	f001 fc90 	bl	80080b8 <__assert_func>
 8006798:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800679c:	6005      	str	r5, [r0, #0]
 800679e:	60c5      	str	r5, [r0, #12]
 80067a0:	69e3      	ldr	r3, [r4, #28]
 80067a2:	6819      	ldr	r1, [r3, #0]
 80067a4:	b151      	cbz	r1, 80067bc <_dtoa_r+0x5c>
 80067a6:	685a      	ldr	r2, [r3, #4]
 80067a8:	604a      	str	r2, [r1, #4]
 80067aa:	2301      	movs	r3, #1
 80067ac:	4093      	lsls	r3, r2
 80067ae:	608b      	str	r3, [r1, #8]
 80067b0:	4620      	mov	r0, r4
 80067b2:	f000 ff07 	bl	80075c4 <_Bfree>
 80067b6:	69e3      	ldr	r3, [r4, #28]
 80067b8:	2200      	movs	r2, #0
 80067ba:	601a      	str	r2, [r3, #0]
 80067bc:	1e3b      	subs	r3, r7, #0
 80067be:	bfbb      	ittet	lt
 80067c0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80067c4:	9303      	strlt	r3, [sp, #12]
 80067c6:	2300      	movge	r3, #0
 80067c8:	2201      	movlt	r2, #1
 80067ca:	bfac      	ite	ge
 80067cc:	f8c8 3000 	strge.w	r3, [r8]
 80067d0:	f8c8 2000 	strlt.w	r2, [r8]
 80067d4:	4b9e      	ldr	r3, [pc, #632]	; (8006a50 <_dtoa_r+0x2f0>)
 80067d6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80067da:	ea33 0308 	bics.w	r3, r3, r8
 80067de:	d11b      	bne.n	8006818 <_dtoa_r+0xb8>
 80067e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80067e2:	f242 730f 	movw	r3, #9999	; 0x270f
 80067e6:	6013      	str	r3, [r2, #0]
 80067e8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80067ec:	4333      	orrs	r3, r6
 80067ee:	f000 8593 	beq.w	8007318 <_dtoa_r+0xbb8>
 80067f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80067f4:	b963      	cbnz	r3, 8006810 <_dtoa_r+0xb0>
 80067f6:	4b97      	ldr	r3, [pc, #604]	; (8006a54 <_dtoa_r+0x2f4>)
 80067f8:	e027      	b.n	800684a <_dtoa_r+0xea>
 80067fa:	4b97      	ldr	r3, [pc, #604]	; (8006a58 <_dtoa_r+0x2f8>)
 80067fc:	9300      	str	r3, [sp, #0]
 80067fe:	3308      	adds	r3, #8
 8006800:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006802:	6013      	str	r3, [r2, #0]
 8006804:	9800      	ldr	r0, [sp, #0]
 8006806:	b013      	add	sp, #76	; 0x4c
 8006808:	ecbd 8b04 	vpop	{d8-d9}
 800680c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006810:	4b90      	ldr	r3, [pc, #576]	; (8006a54 <_dtoa_r+0x2f4>)
 8006812:	9300      	str	r3, [sp, #0]
 8006814:	3303      	adds	r3, #3
 8006816:	e7f3      	b.n	8006800 <_dtoa_r+0xa0>
 8006818:	ed9d 7b02 	vldr	d7, [sp, #8]
 800681c:	2200      	movs	r2, #0
 800681e:	ec51 0b17 	vmov	r0, r1, d7
 8006822:	eeb0 8a47 	vmov.f32	s16, s14
 8006826:	eef0 8a67 	vmov.f32	s17, s15
 800682a:	2300      	movs	r3, #0
 800682c:	f7fa f974 	bl	8000b18 <__aeabi_dcmpeq>
 8006830:	4681      	mov	r9, r0
 8006832:	b160      	cbz	r0, 800684e <_dtoa_r+0xee>
 8006834:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006836:	2301      	movs	r3, #1
 8006838:	6013      	str	r3, [r2, #0]
 800683a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800683c:	2b00      	cmp	r3, #0
 800683e:	f000 8568 	beq.w	8007312 <_dtoa_r+0xbb2>
 8006842:	4b86      	ldr	r3, [pc, #536]	; (8006a5c <_dtoa_r+0x2fc>)
 8006844:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006846:	6013      	str	r3, [r2, #0]
 8006848:	3b01      	subs	r3, #1
 800684a:	9300      	str	r3, [sp, #0]
 800684c:	e7da      	b.n	8006804 <_dtoa_r+0xa4>
 800684e:	aa10      	add	r2, sp, #64	; 0x40
 8006850:	a911      	add	r1, sp, #68	; 0x44
 8006852:	4620      	mov	r0, r4
 8006854:	eeb0 0a48 	vmov.f32	s0, s16
 8006858:	eef0 0a68 	vmov.f32	s1, s17
 800685c:	f001 f994 	bl	8007b88 <__d2b>
 8006860:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006864:	4682      	mov	sl, r0
 8006866:	2d00      	cmp	r5, #0
 8006868:	d07f      	beq.n	800696a <_dtoa_r+0x20a>
 800686a:	ee18 3a90 	vmov	r3, s17
 800686e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006872:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006876:	ec51 0b18 	vmov	r0, r1, d8
 800687a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800687e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006882:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006886:	4619      	mov	r1, r3
 8006888:	2200      	movs	r2, #0
 800688a:	4b75      	ldr	r3, [pc, #468]	; (8006a60 <_dtoa_r+0x300>)
 800688c:	f7f9 fd24 	bl	80002d8 <__aeabi_dsub>
 8006890:	a367      	add	r3, pc, #412	; (adr r3, 8006a30 <_dtoa_r+0x2d0>)
 8006892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006896:	f7f9 fed7 	bl	8000648 <__aeabi_dmul>
 800689a:	a367      	add	r3, pc, #412	; (adr r3, 8006a38 <_dtoa_r+0x2d8>)
 800689c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068a0:	f7f9 fd1c 	bl	80002dc <__adddf3>
 80068a4:	4606      	mov	r6, r0
 80068a6:	4628      	mov	r0, r5
 80068a8:	460f      	mov	r7, r1
 80068aa:	f7f9 fe63 	bl	8000574 <__aeabi_i2d>
 80068ae:	a364      	add	r3, pc, #400	; (adr r3, 8006a40 <_dtoa_r+0x2e0>)
 80068b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b4:	f7f9 fec8 	bl	8000648 <__aeabi_dmul>
 80068b8:	4602      	mov	r2, r0
 80068ba:	460b      	mov	r3, r1
 80068bc:	4630      	mov	r0, r6
 80068be:	4639      	mov	r1, r7
 80068c0:	f7f9 fd0c 	bl	80002dc <__adddf3>
 80068c4:	4606      	mov	r6, r0
 80068c6:	460f      	mov	r7, r1
 80068c8:	f7fa f96e 	bl	8000ba8 <__aeabi_d2iz>
 80068cc:	2200      	movs	r2, #0
 80068ce:	4683      	mov	fp, r0
 80068d0:	2300      	movs	r3, #0
 80068d2:	4630      	mov	r0, r6
 80068d4:	4639      	mov	r1, r7
 80068d6:	f7fa f929 	bl	8000b2c <__aeabi_dcmplt>
 80068da:	b148      	cbz	r0, 80068f0 <_dtoa_r+0x190>
 80068dc:	4658      	mov	r0, fp
 80068de:	f7f9 fe49 	bl	8000574 <__aeabi_i2d>
 80068e2:	4632      	mov	r2, r6
 80068e4:	463b      	mov	r3, r7
 80068e6:	f7fa f917 	bl	8000b18 <__aeabi_dcmpeq>
 80068ea:	b908      	cbnz	r0, 80068f0 <_dtoa_r+0x190>
 80068ec:	f10b 3bff 	add.w	fp, fp, #4294967295
 80068f0:	f1bb 0f16 	cmp.w	fp, #22
 80068f4:	d857      	bhi.n	80069a6 <_dtoa_r+0x246>
 80068f6:	4b5b      	ldr	r3, [pc, #364]	; (8006a64 <_dtoa_r+0x304>)
 80068f8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80068fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006900:	ec51 0b18 	vmov	r0, r1, d8
 8006904:	f7fa f912 	bl	8000b2c <__aeabi_dcmplt>
 8006908:	2800      	cmp	r0, #0
 800690a:	d04e      	beq.n	80069aa <_dtoa_r+0x24a>
 800690c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006910:	2300      	movs	r3, #0
 8006912:	930c      	str	r3, [sp, #48]	; 0x30
 8006914:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006916:	1b5b      	subs	r3, r3, r5
 8006918:	1e5a      	subs	r2, r3, #1
 800691a:	bf45      	ittet	mi
 800691c:	f1c3 0301 	rsbmi	r3, r3, #1
 8006920:	9305      	strmi	r3, [sp, #20]
 8006922:	2300      	movpl	r3, #0
 8006924:	2300      	movmi	r3, #0
 8006926:	9206      	str	r2, [sp, #24]
 8006928:	bf54      	ite	pl
 800692a:	9305      	strpl	r3, [sp, #20]
 800692c:	9306      	strmi	r3, [sp, #24]
 800692e:	f1bb 0f00 	cmp.w	fp, #0
 8006932:	db3c      	blt.n	80069ae <_dtoa_r+0x24e>
 8006934:	9b06      	ldr	r3, [sp, #24]
 8006936:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800693a:	445b      	add	r3, fp
 800693c:	9306      	str	r3, [sp, #24]
 800693e:	2300      	movs	r3, #0
 8006940:	9308      	str	r3, [sp, #32]
 8006942:	9b07      	ldr	r3, [sp, #28]
 8006944:	2b09      	cmp	r3, #9
 8006946:	d868      	bhi.n	8006a1a <_dtoa_r+0x2ba>
 8006948:	2b05      	cmp	r3, #5
 800694a:	bfc4      	itt	gt
 800694c:	3b04      	subgt	r3, #4
 800694e:	9307      	strgt	r3, [sp, #28]
 8006950:	9b07      	ldr	r3, [sp, #28]
 8006952:	f1a3 0302 	sub.w	r3, r3, #2
 8006956:	bfcc      	ite	gt
 8006958:	2500      	movgt	r5, #0
 800695a:	2501      	movle	r5, #1
 800695c:	2b03      	cmp	r3, #3
 800695e:	f200 8085 	bhi.w	8006a6c <_dtoa_r+0x30c>
 8006962:	e8df f003 	tbb	[pc, r3]
 8006966:	3b2e      	.short	0x3b2e
 8006968:	5839      	.short	0x5839
 800696a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800696e:	441d      	add	r5, r3
 8006970:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006974:	2b20      	cmp	r3, #32
 8006976:	bfc1      	itttt	gt
 8006978:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800697c:	fa08 f803 	lslgt.w	r8, r8, r3
 8006980:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8006984:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006988:	bfd6      	itet	le
 800698a:	f1c3 0320 	rsble	r3, r3, #32
 800698e:	ea48 0003 	orrgt.w	r0, r8, r3
 8006992:	fa06 f003 	lslle.w	r0, r6, r3
 8006996:	f7f9 fddd 	bl	8000554 <__aeabi_ui2d>
 800699a:	2201      	movs	r2, #1
 800699c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80069a0:	3d01      	subs	r5, #1
 80069a2:	920e      	str	r2, [sp, #56]	; 0x38
 80069a4:	e76f      	b.n	8006886 <_dtoa_r+0x126>
 80069a6:	2301      	movs	r3, #1
 80069a8:	e7b3      	b.n	8006912 <_dtoa_r+0x1b2>
 80069aa:	900c      	str	r0, [sp, #48]	; 0x30
 80069ac:	e7b2      	b.n	8006914 <_dtoa_r+0x1b4>
 80069ae:	9b05      	ldr	r3, [sp, #20]
 80069b0:	eba3 030b 	sub.w	r3, r3, fp
 80069b4:	9305      	str	r3, [sp, #20]
 80069b6:	f1cb 0300 	rsb	r3, fp, #0
 80069ba:	9308      	str	r3, [sp, #32]
 80069bc:	2300      	movs	r3, #0
 80069be:	930b      	str	r3, [sp, #44]	; 0x2c
 80069c0:	e7bf      	b.n	8006942 <_dtoa_r+0x1e2>
 80069c2:	2300      	movs	r3, #0
 80069c4:	9309      	str	r3, [sp, #36]	; 0x24
 80069c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	dc52      	bgt.n	8006a72 <_dtoa_r+0x312>
 80069cc:	2301      	movs	r3, #1
 80069ce:	9301      	str	r3, [sp, #4]
 80069d0:	9304      	str	r3, [sp, #16]
 80069d2:	461a      	mov	r2, r3
 80069d4:	920a      	str	r2, [sp, #40]	; 0x28
 80069d6:	e00b      	b.n	80069f0 <_dtoa_r+0x290>
 80069d8:	2301      	movs	r3, #1
 80069da:	e7f3      	b.n	80069c4 <_dtoa_r+0x264>
 80069dc:	2300      	movs	r3, #0
 80069de:	9309      	str	r3, [sp, #36]	; 0x24
 80069e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069e2:	445b      	add	r3, fp
 80069e4:	9301      	str	r3, [sp, #4]
 80069e6:	3301      	adds	r3, #1
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	9304      	str	r3, [sp, #16]
 80069ec:	bfb8      	it	lt
 80069ee:	2301      	movlt	r3, #1
 80069f0:	69e0      	ldr	r0, [r4, #28]
 80069f2:	2100      	movs	r1, #0
 80069f4:	2204      	movs	r2, #4
 80069f6:	f102 0614 	add.w	r6, r2, #20
 80069fa:	429e      	cmp	r6, r3
 80069fc:	d93d      	bls.n	8006a7a <_dtoa_r+0x31a>
 80069fe:	6041      	str	r1, [r0, #4]
 8006a00:	4620      	mov	r0, r4
 8006a02:	f000 fd9f 	bl	8007544 <_Balloc>
 8006a06:	9000      	str	r0, [sp, #0]
 8006a08:	2800      	cmp	r0, #0
 8006a0a:	d139      	bne.n	8006a80 <_dtoa_r+0x320>
 8006a0c:	4b16      	ldr	r3, [pc, #88]	; (8006a68 <_dtoa_r+0x308>)
 8006a0e:	4602      	mov	r2, r0
 8006a10:	f240 11af 	movw	r1, #431	; 0x1af
 8006a14:	e6bd      	b.n	8006792 <_dtoa_r+0x32>
 8006a16:	2301      	movs	r3, #1
 8006a18:	e7e1      	b.n	80069de <_dtoa_r+0x27e>
 8006a1a:	2501      	movs	r5, #1
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	9307      	str	r3, [sp, #28]
 8006a20:	9509      	str	r5, [sp, #36]	; 0x24
 8006a22:	f04f 33ff 	mov.w	r3, #4294967295
 8006a26:	9301      	str	r3, [sp, #4]
 8006a28:	9304      	str	r3, [sp, #16]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	2312      	movs	r3, #18
 8006a2e:	e7d1      	b.n	80069d4 <_dtoa_r+0x274>
 8006a30:	636f4361 	.word	0x636f4361
 8006a34:	3fd287a7 	.word	0x3fd287a7
 8006a38:	8b60c8b3 	.word	0x8b60c8b3
 8006a3c:	3fc68a28 	.word	0x3fc68a28
 8006a40:	509f79fb 	.word	0x509f79fb
 8006a44:	3fd34413 	.word	0x3fd34413
 8006a48:	08008841 	.word	0x08008841
 8006a4c:	08008858 	.word	0x08008858
 8006a50:	7ff00000 	.word	0x7ff00000
 8006a54:	0800883d 	.word	0x0800883d
 8006a58:	08008834 	.word	0x08008834
 8006a5c:	08008811 	.word	0x08008811
 8006a60:	3ff80000 	.word	0x3ff80000
 8006a64:	08008948 	.word	0x08008948
 8006a68:	080088b0 	.word	0x080088b0
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	9309      	str	r3, [sp, #36]	; 0x24
 8006a70:	e7d7      	b.n	8006a22 <_dtoa_r+0x2c2>
 8006a72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a74:	9301      	str	r3, [sp, #4]
 8006a76:	9304      	str	r3, [sp, #16]
 8006a78:	e7ba      	b.n	80069f0 <_dtoa_r+0x290>
 8006a7a:	3101      	adds	r1, #1
 8006a7c:	0052      	lsls	r2, r2, #1
 8006a7e:	e7ba      	b.n	80069f6 <_dtoa_r+0x296>
 8006a80:	69e3      	ldr	r3, [r4, #28]
 8006a82:	9a00      	ldr	r2, [sp, #0]
 8006a84:	601a      	str	r2, [r3, #0]
 8006a86:	9b04      	ldr	r3, [sp, #16]
 8006a88:	2b0e      	cmp	r3, #14
 8006a8a:	f200 80a8 	bhi.w	8006bde <_dtoa_r+0x47e>
 8006a8e:	2d00      	cmp	r5, #0
 8006a90:	f000 80a5 	beq.w	8006bde <_dtoa_r+0x47e>
 8006a94:	f1bb 0f00 	cmp.w	fp, #0
 8006a98:	dd38      	ble.n	8006b0c <_dtoa_r+0x3ac>
 8006a9a:	4bc0      	ldr	r3, [pc, #768]	; (8006d9c <_dtoa_r+0x63c>)
 8006a9c:	f00b 020f 	and.w	r2, fp, #15
 8006aa0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006aa4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006aa8:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006aac:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006ab0:	d019      	beq.n	8006ae6 <_dtoa_r+0x386>
 8006ab2:	4bbb      	ldr	r3, [pc, #748]	; (8006da0 <_dtoa_r+0x640>)
 8006ab4:	ec51 0b18 	vmov	r0, r1, d8
 8006ab8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006abc:	f7f9 feee 	bl	800089c <__aeabi_ddiv>
 8006ac0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ac4:	f008 080f 	and.w	r8, r8, #15
 8006ac8:	2503      	movs	r5, #3
 8006aca:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006da0 <_dtoa_r+0x640>
 8006ace:	f1b8 0f00 	cmp.w	r8, #0
 8006ad2:	d10a      	bne.n	8006aea <_dtoa_r+0x38a>
 8006ad4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ad8:	4632      	mov	r2, r6
 8006ada:	463b      	mov	r3, r7
 8006adc:	f7f9 fede 	bl	800089c <__aeabi_ddiv>
 8006ae0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ae4:	e02b      	b.n	8006b3e <_dtoa_r+0x3de>
 8006ae6:	2502      	movs	r5, #2
 8006ae8:	e7ef      	b.n	8006aca <_dtoa_r+0x36a>
 8006aea:	f018 0f01 	tst.w	r8, #1
 8006aee:	d008      	beq.n	8006b02 <_dtoa_r+0x3a2>
 8006af0:	4630      	mov	r0, r6
 8006af2:	4639      	mov	r1, r7
 8006af4:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006af8:	f7f9 fda6 	bl	8000648 <__aeabi_dmul>
 8006afc:	3501      	adds	r5, #1
 8006afe:	4606      	mov	r6, r0
 8006b00:	460f      	mov	r7, r1
 8006b02:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006b06:	f109 0908 	add.w	r9, r9, #8
 8006b0a:	e7e0      	b.n	8006ace <_dtoa_r+0x36e>
 8006b0c:	f000 809f 	beq.w	8006c4e <_dtoa_r+0x4ee>
 8006b10:	f1cb 0600 	rsb	r6, fp, #0
 8006b14:	4ba1      	ldr	r3, [pc, #644]	; (8006d9c <_dtoa_r+0x63c>)
 8006b16:	4fa2      	ldr	r7, [pc, #648]	; (8006da0 <_dtoa_r+0x640>)
 8006b18:	f006 020f 	and.w	r2, r6, #15
 8006b1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b24:	ec51 0b18 	vmov	r0, r1, d8
 8006b28:	f7f9 fd8e 	bl	8000648 <__aeabi_dmul>
 8006b2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b30:	1136      	asrs	r6, r6, #4
 8006b32:	2300      	movs	r3, #0
 8006b34:	2502      	movs	r5, #2
 8006b36:	2e00      	cmp	r6, #0
 8006b38:	d17e      	bne.n	8006c38 <_dtoa_r+0x4d8>
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d1d0      	bne.n	8006ae0 <_dtoa_r+0x380>
 8006b3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006b40:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	f000 8084 	beq.w	8006c52 <_dtoa_r+0x4f2>
 8006b4a:	4b96      	ldr	r3, [pc, #600]	; (8006da4 <_dtoa_r+0x644>)
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	4640      	mov	r0, r8
 8006b50:	4649      	mov	r1, r9
 8006b52:	f7f9 ffeb 	bl	8000b2c <__aeabi_dcmplt>
 8006b56:	2800      	cmp	r0, #0
 8006b58:	d07b      	beq.n	8006c52 <_dtoa_r+0x4f2>
 8006b5a:	9b04      	ldr	r3, [sp, #16]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d078      	beq.n	8006c52 <_dtoa_r+0x4f2>
 8006b60:	9b01      	ldr	r3, [sp, #4]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	dd39      	ble.n	8006bda <_dtoa_r+0x47a>
 8006b66:	4b90      	ldr	r3, [pc, #576]	; (8006da8 <_dtoa_r+0x648>)
 8006b68:	2200      	movs	r2, #0
 8006b6a:	4640      	mov	r0, r8
 8006b6c:	4649      	mov	r1, r9
 8006b6e:	f7f9 fd6b 	bl	8000648 <__aeabi_dmul>
 8006b72:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b76:	9e01      	ldr	r6, [sp, #4]
 8006b78:	f10b 37ff 	add.w	r7, fp, #4294967295
 8006b7c:	3501      	adds	r5, #1
 8006b7e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006b82:	4628      	mov	r0, r5
 8006b84:	f7f9 fcf6 	bl	8000574 <__aeabi_i2d>
 8006b88:	4642      	mov	r2, r8
 8006b8a:	464b      	mov	r3, r9
 8006b8c:	f7f9 fd5c 	bl	8000648 <__aeabi_dmul>
 8006b90:	4b86      	ldr	r3, [pc, #536]	; (8006dac <_dtoa_r+0x64c>)
 8006b92:	2200      	movs	r2, #0
 8006b94:	f7f9 fba2 	bl	80002dc <__adddf3>
 8006b98:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006b9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ba0:	9303      	str	r3, [sp, #12]
 8006ba2:	2e00      	cmp	r6, #0
 8006ba4:	d158      	bne.n	8006c58 <_dtoa_r+0x4f8>
 8006ba6:	4b82      	ldr	r3, [pc, #520]	; (8006db0 <_dtoa_r+0x650>)
 8006ba8:	2200      	movs	r2, #0
 8006baa:	4640      	mov	r0, r8
 8006bac:	4649      	mov	r1, r9
 8006bae:	f7f9 fb93 	bl	80002d8 <__aeabi_dsub>
 8006bb2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006bb6:	4680      	mov	r8, r0
 8006bb8:	4689      	mov	r9, r1
 8006bba:	f7f9 ffd5 	bl	8000b68 <__aeabi_dcmpgt>
 8006bbe:	2800      	cmp	r0, #0
 8006bc0:	f040 8296 	bne.w	80070f0 <_dtoa_r+0x990>
 8006bc4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006bc8:	4640      	mov	r0, r8
 8006bca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006bce:	4649      	mov	r1, r9
 8006bd0:	f7f9 ffac 	bl	8000b2c <__aeabi_dcmplt>
 8006bd4:	2800      	cmp	r0, #0
 8006bd6:	f040 8289 	bne.w	80070ec <_dtoa_r+0x98c>
 8006bda:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006bde:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	f2c0 814e 	blt.w	8006e82 <_dtoa_r+0x722>
 8006be6:	f1bb 0f0e 	cmp.w	fp, #14
 8006bea:	f300 814a 	bgt.w	8006e82 <_dtoa_r+0x722>
 8006bee:	4b6b      	ldr	r3, [pc, #428]	; (8006d9c <_dtoa_r+0x63c>)
 8006bf0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006bf4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006bf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	f280 80dc 	bge.w	8006db8 <_dtoa_r+0x658>
 8006c00:	9b04      	ldr	r3, [sp, #16]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	f300 80d8 	bgt.w	8006db8 <_dtoa_r+0x658>
 8006c08:	f040 826f 	bne.w	80070ea <_dtoa_r+0x98a>
 8006c0c:	4b68      	ldr	r3, [pc, #416]	; (8006db0 <_dtoa_r+0x650>)
 8006c0e:	2200      	movs	r2, #0
 8006c10:	4640      	mov	r0, r8
 8006c12:	4649      	mov	r1, r9
 8006c14:	f7f9 fd18 	bl	8000648 <__aeabi_dmul>
 8006c18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006c1c:	f7f9 ff9a 	bl	8000b54 <__aeabi_dcmpge>
 8006c20:	9e04      	ldr	r6, [sp, #16]
 8006c22:	4637      	mov	r7, r6
 8006c24:	2800      	cmp	r0, #0
 8006c26:	f040 8245 	bne.w	80070b4 <_dtoa_r+0x954>
 8006c2a:	9d00      	ldr	r5, [sp, #0]
 8006c2c:	2331      	movs	r3, #49	; 0x31
 8006c2e:	f805 3b01 	strb.w	r3, [r5], #1
 8006c32:	f10b 0b01 	add.w	fp, fp, #1
 8006c36:	e241      	b.n	80070bc <_dtoa_r+0x95c>
 8006c38:	07f2      	lsls	r2, r6, #31
 8006c3a:	d505      	bpl.n	8006c48 <_dtoa_r+0x4e8>
 8006c3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c40:	f7f9 fd02 	bl	8000648 <__aeabi_dmul>
 8006c44:	3501      	adds	r5, #1
 8006c46:	2301      	movs	r3, #1
 8006c48:	1076      	asrs	r6, r6, #1
 8006c4a:	3708      	adds	r7, #8
 8006c4c:	e773      	b.n	8006b36 <_dtoa_r+0x3d6>
 8006c4e:	2502      	movs	r5, #2
 8006c50:	e775      	b.n	8006b3e <_dtoa_r+0x3de>
 8006c52:	9e04      	ldr	r6, [sp, #16]
 8006c54:	465f      	mov	r7, fp
 8006c56:	e792      	b.n	8006b7e <_dtoa_r+0x41e>
 8006c58:	9900      	ldr	r1, [sp, #0]
 8006c5a:	4b50      	ldr	r3, [pc, #320]	; (8006d9c <_dtoa_r+0x63c>)
 8006c5c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006c60:	4431      	add	r1, r6
 8006c62:	9102      	str	r1, [sp, #8]
 8006c64:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c66:	eeb0 9a47 	vmov.f32	s18, s14
 8006c6a:	eef0 9a67 	vmov.f32	s19, s15
 8006c6e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006c72:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006c76:	2900      	cmp	r1, #0
 8006c78:	d044      	beq.n	8006d04 <_dtoa_r+0x5a4>
 8006c7a:	494e      	ldr	r1, [pc, #312]	; (8006db4 <_dtoa_r+0x654>)
 8006c7c:	2000      	movs	r0, #0
 8006c7e:	f7f9 fe0d 	bl	800089c <__aeabi_ddiv>
 8006c82:	ec53 2b19 	vmov	r2, r3, d9
 8006c86:	f7f9 fb27 	bl	80002d8 <__aeabi_dsub>
 8006c8a:	9d00      	ldr	r5, [sp, #0]
 8006c8c:	ec41 0b19 	vmov	d9, r0, r1
 8006c90:	4649      	mov	r1, r9
 8006c92:	4640      	mov	r0, r8
 8006c94:	f7f9 ff88 	bl	8000ba8 <__aeabi_d2iz>
 8006c98:	4606      	mov	r6, r0
 8006c9a:	f7f9 fc6b 	bl	8000574 <__aeabi_i2d>
 8006c9e:	4602      	mov	r2, r0
 8006ca0:	460b      	mov	r3, r1
 8006ca2:	4640      	mov	r0, r8
 8006ca4:	4649      	mov	r1, r9
 8006ca6:	f7f9 fb17 	bl	80002d8 <__aeabi_dsub>
 8006caa:	3630      	adds	r6, #48	; 0x30
 8006cac:	f805 6b01 	strb.w	r6, [r5], #1
 8006cb0:	ec53 2b19 	vmov	r2, r3, d9
 8006cb4:	4680      	mov	r8, r0
 8006cb6:	4689      	mov	r9, r1
 8006cb8:	f7f9 ff38 	bl	8000b2c <__aeabi_dcmplt>
 8006cbc:	2800      	cmp	r0, #0
 8006cbe:	d164      	bne.n	8006d8a <_dtoa_r+0x62a>
 8006cc0:	4642      	mov	r2, r8
 8006cc2:	464b      	mov	r3, r9
 8006cc4:	4937      	ldr	r1, [pc, #220]	; (8006da4 <_dtoa_r+0x644>)
 8006cc6:	2000      	movs	r0, #0
 8006cc8:	f7f9 fb06 	bl	80002d8 <__aeabi_dsub>
 8006ccc:	ec53 2b19 	vmov	r2, r3, d9
 8006cd0:	f7f9 ff2c 	bl	8000b2c <__aeabi_dcmplt>
 8006cd4:	2800      	cmp	r0, #0
 8006cd6:	f040 80b6 	bne.w	8006e46 <_dtoa_r+0x6e6>
 8006cda:	9b02      	ldr	r3, [sp, #8]
 8006cdc:	429d      	cmp	r5, r3
 8006cde:	f43f af7c 	beq.w	8006bda <_dtoa_r+0x47a>
 8006ce2:	4b31      	ldr	r3, [pc, #196]	; (8006da8 <_dtoa_r+0x648>)
 8006ce4:	ec51 0b19 	vmov	r0, r1, d9
 8006ce8:	2200      	movs	r2, #0
 8006cea:	f7f9 fcad 	bl	8000648 <__aeabi_dmul>
 8006cee:	4b2e      	ldr	r3, [pc, #184]	; (8006da8 <_dtoa_r+0x648>)
 8006cf0:	ec41 0b19 	vmov	d9, r0, r1
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	4640      	mov	r0, r8
 8006cf8:	4649      	mov	r1, r9
 8006cfa:	f7f9 fca5 	bl	8000648 <__aeabi_dmul>
 8006cfe:	4680      	mov	r8, r0
 8006d00:	4689      	mov	r9, r1
 8006d02:	e7c5      	b.n	8006c90 <_dtoa_r+0x530>
 8006d04:	ec51 0b17 	vmov	r0, r1, d7
 8006d08:	f7f9 fc9e 	bl	8000648 <__aeabi_dmul>
 8006d0c:	9b02      	ldr	r3, [sp, #8]
 8006d0e:	9d00      	ldr	r5, [sp, #0]
 8006d10:	930f      	str	r3, [sp, #60]	; 0x3c
 8006d12:	ec41 0b19 	vmov	d9, r0, r1
 8006d16:	4649      	mov	r1, r9
 8006d18:	4640      	mov	r0, r8
 8006d1a:	f7f9 ff45 	bl	8000ba8 <__aeabi_d2iz>
 8006d1e:	4606      	mov	r6, r0
 8006d20:	f7f9 fc28 	bl	8000574 <__aeabi_i2d>
 8006d24:	3630      	adds	r6, #48	; 0x30
 8006d26:	4602      	mov	r2, r0
 8006d28:	460b      	mov	r3, r1
 8006d2a:	4640      	mov	r0, r8
 8006d2c:	4649      	mov	r1, r9
 8006d2e:	f7f9 fad3 	bl	80002d8 <__aeabi_dsub>
 8006d32:	f805 6b01 	strb.w	r6, [r5], #1
 8006d36:	9b02      	ldr	r3, [sp, #8]
 8006d38:	429d      	cmp	r5, r3
 8006d3a:	4680      	mov	r8, r0
 8006d3c:	4689      	mov	r9, r1
 8006d3e:	f04f 0200 	mov.w	r2, #0
 8006d42:	d124      	bne.n	8006d8e <_dtoa_r+0x62e>
 8006d44:	4b1b      	ldr	r3, [pc, #108]	; (8006db4 <_dtoa_r+0x654>)
 8006d46:	ec51 0b19 	vmov	r0, r1, d9
 8006d4a:	f7f9 fac7 	bl	80002dc <__adddf3>
 8006d4e:	4602      	mov	r2, r0
 8006d50:	460b      	mov	r3, r1
 8006d52:	4640      	mov	r0, r8
 8006d54:	4649      	mov	r1, r9
 8006d56:	f7f9 ff07 	bl	8000b68 <__aeabi_dcmpgt>
 8006d5a:	2800      	cmp	r0, #0
 8006d5c:	d173      	bne.n	8006e46 <_dtoa_r+0x6e6>
 8006d5e:	ec53 2b19 	vmov	r2, r3, d9
 8006d62:	4914      	ldr	r1, [pc, #80]	; (8006db4 <_dtoa_r+0x654>)
 8006d64:	2000      	movs	r0, #0
 8006d66:	f7f9 fab7 	bl	80002d8 <__aeabi_dsub>
 8006d6a:	4602      	mov	r2, r0
 8006d6c:	460b      	mov	r3, r1
 8006d6e:	4640      	mov	r0, r8
 8006d70:	4649      	mov	r1, r9
 8006d72:	f7f9 fedb 	bl	8000b2c <__aeabi_dcmplt>
 8006d76:	2800      	cmp	r0, #0
 8006d78:	f43f af2f 	beq.w	8006bda <_dtoa_r+0x47a>
 8006d7c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006d7e:	1e6b      	subs	r3, r5, #1
 8006d80:	930f      	str	r3, [sp, #60]	; 0x3c
 8006d82:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006d86:	2b30      	cmp	r3, #48	; 0x30
 8006d88:	d0f8      	beq.n	8006d7c <_dtoa_r+0x61c>
 8006d8a:	46bb      	mov	fp, r7
 8006d8c:	e04a      	b.n	8006e24 <_dtoa_r+0x6c4>
 8006d8e:	4b06      	ldr	r3, [pc, #24]	; (8006da8 <_dtoa_r+0x648>)
 8006d90:	f7f9 fc5a 	bl	8000648 <__aeabi_dmul>
 8006d94:	4680      	mov	r8, r0
 8006d96:	4689      	mov	r9, r1
 8006d98:	e7bd      	b.n	8006d16 <_dtoa_r+0x5b6>
 8006d9a:	bf00      	nop
 8006d9c:	08008948 	.word	0x08008948
 8006da0:	08008920 	.word	0x08008920
 8006da4:	3ff00000 	.word	0x3ff00000
 8006da8:	40240000 	.word	0x40240000
 8006dac:	401c0000 	.word	0x401c0000
 8006db0:	40140000 	.word	0x40140000
 8006db4:	3fe00000 	.word	0x3fe00000
 8006db8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006dbc:	9d00      	ldr	r5, [sp, #0]
 8006dbe:	4642      	mov	r2, r8
 8006dc0:	464b      	mov	r3, r9
 8006dc2:	4630      	mov	r0, r6
 8006dc4:	4639      	mov	r1, r7
 8006dc6:	f7f9 fd69 	bl	800089c <__aeabi_ddiv>
 8006dca:	f7f9 feed 	bl	8000ba8 <__aeabi_d2iz>
 8006dce:	9001      	str	r0, [sp, #4]
 8006dd0:	f7f9 fbd0 	bl	8000574 <__aeabi_i2d>
 8006dd4:	4642      	mov	r2, r8
 8006dd6:	464b      	mov	r3, r9
 8006dd8:	f7f9 fc36 	bl	8000648 <__aeabi_dmul>
 8006ddc:	4602      	mov	r2, r0
 8006dde:	460b      	mov	r3, r1
 8006de0:	4630      	mov	r0, r6
 8006de2:	4639      	mov	r1, r7
 8006de4:	f7f9 fa78 	bl	80002d8 <__aeabi_dsub>
 8006de8:	9e01      	ldr	r6, [sp, #4]
 8006dea:	9f04      	ldr	r7, [sp, #16]
 8006dec:	3630      	adds	r6, #48	; 0x30
 8006dee:	f805 6b01 	strb.w	r6, [r5], #1
 8006df2:	9e00      	ldr	r6, [sp, #0]
 8006df4:	1bae      	subs	r6, r5, r6
 8006df6:	42b7      	cmp	r7, r6
 8006df8:	4602      	mov	r2, r0
 8006dfa:	460b      	mov	r3, r1
 8006dfc:	d134      	bne.n	8006e68 <_dtoa_r+0x708>
 8006dfe:	f7f9 fa6d 	bl	80002dc <__adddf3>
 8006e02:	4642      	mov	r2, r8
 8006e04:	464b      	mov	r3, r9
 8006e06:	4606      	mov	r6, r0
 8006e08:	460f      	mov	r7, r1
 8006e0a:	f7f9 fead 	bl	8000b68 <__aeabi_dcmpgt>
 8006e0e:	b9c8      	cbnz	r0, 8006e44 <_dtoa_r+0x6e4>
 8006e10:	4642      	mov	r2, r8
 8006e12:	464b      	mov	r3, r9
 8006e14:	4630      	mov	r0, r6
 8006e16:	4639      	mov	r1, r7
 8006e18:	f7f9 fe7e 	bl	8000b18 <__aeabi_dcmpeq>
 8006e1c:	b110      	cbz	r0, 8006e24 <_dtoa_r+0x6c4>
 8006e1e:	9b01      	ldr	r3, [sp, #4]
 8006e20:	07db      	lsls	r3, r3, #31
 8006e22:	d40f      	bmi.n	8006e44 <_dtoa_r+0x6e4>
 8006e24:	4651      	mov	r1, sl
 8006e26:	4620      	mov	r0, r4
 8006e28:	f000 fbcc 	bl	80075c4 <_Bfree>
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006e30:	702b      	strb	r3, [r5, #0]
 8006e32:	f10b 0301 	add.w	r3, fp, #1
 8006e36:	6013      	str	r3, [r2, #0]
 8006e38:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	f43f ace2 	beq.w	8006804 <_dtoa_r+0xa4>
 8006e40:	601d      	str	r5, [r3, #0]
 8006e42:	e4df      	b.n	8006804 <_dtoa_r+0xa4>
 8006e44:	465f      	mov	r7, fp
 8006e46:	462b      	mov	r3, r5
 8006e48:	461d      	mov	r5, r3
 8006e4a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006e4e:	2a39      	cmp	r2, #57	; 0x39
 8006e50:	d106      	bne.n	8006e60 <_dtoa_r+0x700>
 8006e52:	9a00      	ldr	r2, [sp, #0]
 8006e54:	429a      	cmp	r2, r3
 8006e56:	d1f7      	bne.n	8006e48 <_dtoa_r+0x6e8>
 8006e58:	9900      	ldr	r1, [sp, #0]
 8006e5a:	2230      	movs	r2, #48	; 0x30
 8006e5c:	3701      	adds	r7, #1
 8006e5e:	700a      	strb	r2, [r1, #0]
 8006e60:	781a      	ldrb	r2, [r3, #0]
 8006e62:	3201      	adds	r2, #1
 8006e64:	701a      	strb	r2, [r3, #0]
 8006e66:	e790      	b.n	8006d8a <_dtoa_r+0x62a>
 8006e68:	4ba3      	ldr	r3, [pc, #652]	; (80070f8 <_dtoa_r+0x998>)
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	f7f9 fbec 	bl	8000648 <__aeabi_dmul>
 8006e70:	2200      	movs	r2, #0
 8006e72:	2300      	movs	r3, #0
 8006e74:	4606      	mov	r6, r0
 8006e76:	460f      	mov	r7, r1
 8006e78:	f7f9 fe4e 	bl	8000b18 <__aeabi_dcmpeq>
 8006e7c:	2800      	cmp	r0, #0
 8006e7e:	d09e      	beq.n	8006dbe <_dtoa_r+0x65e>
 8006e80:	e7d0      	b.n	8006e24 <_dtoa_r+0x6c4>
 8006e82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e84:	2a00      	cmp	r2, #0
 8006e86:	f000 80ca 	beq.w	800701e <_dtoa_r+0x8be>
 8006e8a:	9a07      	ldr	r2, [sp, #28]
 8006e8c:	2a01      	cmp	r2, #1
 8006e8e:	f300 80ad 	bgt.w	8006fec <_dtoa_r+0x88c>
 8006e92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006e94:	2a00      	cmp	r2, #0
 8006e96:	f000 80a5 	beq.w	8006fe4 <_dtoa_r+0x884>
 8006e9a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006e9e:	9e08      	ldr	r6, [sp, #32]
 8006ea0:	9d05      	ldr	r5, [sp, #20]
 8006ea2:	9a05      	ldr	r2, [sp, #20]
 8006ea4:	441a      	add	r2, r3
 8006ea6:	9205      	str	r2, [sp, #20]
 8006ea8:	9a06      	ldr	r2, [sp, #24]
 8006eaa:	2101      	movs	r1, #1
 8006eac:	441a      	add	r2, r3
 8006eae:	4620      	mov	r0, r4
 8006eb0:	9206      	str	r2, [sp, #24]
 8006eb2:	f000 fc3d 	bl	8007730 <__i2b>
 8006eb6:	4607      	mov	r7, r0
 8006eb8:	b165      	cbz	r5, 8006ed4 <_dtoa_r+0x774>
 8006eba:	9b06      	ldr	r3, [sp, #24]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	dd09      	ble.n	8006ed4 <_dtoa_r+0x774>
 8006ec0:	42ab      	cmp	r3, r5
 8006ec2:	9a05      	ldr	r2, [sp, #20]
 8006ec4:	bfa8      	it	ge
 8006ec6:	462b      	movge	r3, r5
 8006ec8:	1ad2      	subs	r2, r2, r3
 8006eca:	9205      	str	r2, [sp, #20]
 8006ecc:	9a06      	ldr	r2, [sp, #24]
 8006ece:	1aed      	subs	r5, r5, r3
 8006ed0:	1ad3      	subs	r3, r2, r3
 8006ed2:	9306      	str	r3, [sp, #24]
 8006ed4:	9b08      	ldr	r3, [sp, #32]
 8006ed6:	b1f3      	cbz	r3, 8006f16 <_dtoa_r+0x7b6>
 8006ed8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	f000 80a3 	beq.w	8007026 <_dtoa_r+0x8c6>
 8006ee0:	2e00      	cmp	r6, #0
 8006ee2:	dd10      	ble.n	8006f06 <_dtoa_r+0x7a6>
 8006ee4:	4639      	mov	r1, r7
 8006ee6:	4632      	mov	r2, r6
 8006ee8:	4620      	mov	r0, r4
 8006eea:	f000 fce1 	bl	80078b0 <__pow5mult>
 8006eee:	4652      	mov	r2, sl
 8006ef0:	4601      	mov	r1, r0
 8006ef2:	4607      	mov	r7, r0
 8006ef4:	4620      	mov	r0, r4
 8006ef6:	f000 fc31 	bl	800775c <__multiply>
 8006efa:	4651      	mov	r1, sl
 8006efc:	4680      	mov	r8, r0
 8006efe:	4620      	mov	r0, r4
 8006f00:	f000 fb60 	bl	80075c4 <_Bfree>
 8006f04:	46c2      	mov	sl, r8
 8006f06:	9b08      	ldr	r3, [sp, #32]
 8006f08:	1b9a      	subs	r2, r3, r6
 8006f0a:	d004      	beq.n	8006f16 <_dtoa_r+0x7b6>
 8006f0c:	4651      	mov	r1, sl
 8006f0e:	4620      	mov	r0, r4
 8006f10:	f000 fcce 	bl	80078b0 <__pow5mult>
 8006f14:	4682      	mov	sl, r0
 8006f16:	2101      	movs	r1, #1
 8006f18:	4620      	mov	r0, r4
 8006f1a:	f000 fc09 	bl	8007730 <__i2b>
 8006f1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	4606      	mov	r6, r0
 8006f24:	f340 8081 	ble.w	800702a <_dtoa_r+0x8ca>
 8006f28:	461a      	mov	r2, r3
 8006f2a:	4601      	mov	r1, r0
 8006f2c:	4620      	mov	r0, r4
 8006f2e:	f000 fcbf 	bl	80078b0 <__pow5mult>
 8006f32:	9b07      	ldr	r3, [sp, #28]
 8006f34:	2b01      	cmp	r3, #1
 8006f36:	4606      	mov	r6, r0
 8006f38:	dd7a      	ble.n	8007030 <_dtoa_r+0x8d0>
 8006f3a:	f04f 0800 	mov.w	r8, #0
 8006f3e:	6933      	ldr	r3, [r6, #16]
 8006f40:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006f44:	6918      	ldr	r0, [r3, #16]
 8006f46:	f000 fba5 	bl	8007694 <__hi0bits>
 8006f4a:	f1c0 0020 	rsb	r0, r0, #32
 8006f4e:	9b06      	ldr	r3, [sp, #24]
 8006f50:	4418      	add	r0, r3
 8006f52:	f010 001f 	ands.w	r0, r0, #31
 8006f56:	f000 8094 	beq.w	8007082 <_dtoa_r+0x922>
 8006f5a:	f1c0 0320 	rsb	r3, r0, #32
 8006f5e:	2b04      	cmp	r3, #4
 8006f60:	f340 8085 	ble.w	800706e <_dtoa_r+0x90e>
 8006f64:	9b05      	ldr	r3, [sp, #20]
 8006f66:	f1c0 001c 	rsb	r0, r0, #28
 8006f6a:	4403      	add	r3, r0
 8006f6c:	9305      	str	r3, [sp, #20]
 8006f6e:	9b06      	ldr	r3, [sp, #24]
 8006f70:	4403      	add	r3, r0
 8006f72:	4405      	add	r5, r0
 8006f74:	9306      	str	r3, [sp, #24]
 8006f76:	9b05      	ldr	r3, [sp, #20]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	dd05      	ble.n	8006f88 <_dtoa_r+0x828>
 8006f7c:	4651      	mov	r1, sl
 8006f7e:	461a      	mov	r2, r3
 8006f80:	4620      	mov	r0, r4
 8006f82:	f000 fcef 	bl	8007964 <__lshift>
 8006f86:	4682      	mov	sl, r0
 8006f88:	9b06      	ldr	r3, [sp, #24]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	dd05      	ble.n	8006f9a <_dtoa_r+0x83a>
 8006f8e:	4631      	mov	r1, r6
 8006f90:	461a      	mov	r2, r3
 8006f92:	4620      	mov	r0, r4
 8006f94:	f000 fce6 	bl	8007964 <__lshift>
 8006f98:	4606      	mov	r6, r0
 8006f9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d072      	beq.n	8007086 <_dtoa_r+0x926>
 8006fa0:	4631      	mov	r1, r6
 8006fa2:	4650      	mov	r0, sl
 8006fa4:	f000 fd4a 	bl	8007a3c <__mcmp>
 8006fa8:	2800      	cmp	r0, #0
 8006faa:	da6c      	bge.n	8007086 <_dtoa_r+0x926>
 8006fac:	2300      	movs	r3, #0
 8006fae:	4651      	mov	r1, sl
 8006fb0:	220a      	movs	r2, #10
 8006fb2:	4620      	mov	r0, r4
 8006fb4:	f000 fb28 	bl	8007608 <__multadd>
 8006fb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fba:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006fbe:	4682      	mov	sl, r0
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	f000 81b0 	beq.w	8007326 <_dtoa_r+0xbc6>
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	4639      	mov	r1, r7
 8006fca:	220a      	movs	r2, #10
 8006fcc:	4620      	mov	r0, r4
 8006fce:	f000 fb1b 	bl	8007608 <__multadd>
 8006fd2:	9b01      	ldr	r3, [sp, #4]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	4607      	mov	r7, r0
 8006fd8:	f300 8096 	bgt.w	8007108 <_dtoa_r+0x9a8>
 8006fdc:	9b07      	ldr	r3, [sp, #28]
 8006fde:	2b02      	cmp	r3, #2
 8006fe0:	dc59      	bgt.n	8007096 <_dtoa_r+0x936>
 8006fe2:	e091      	b.n	8007108 <_dtoa_r+0x9a8>
 8006fe4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006fe6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006fea:	e758      	b.n	8006e9e <_dtoa_r+0x73e>
 8006fec:	9b04      	ldr	r3, [sp, #16]
 8006fee:	1e5e      	subs	r6, r3, #1
 8006ff0:	9b08      	ldr	r3, [sp, #32]
 8006ff2:	42b3      	cmp	r3, r6
 8006ff4:	bfbf      	itttt	lt
 8006ff6:	9b08      	ldrlt	r3, [sp, #32]
 8006ff8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8006ffa:	9608      	strlt	r6, [sp, #32]
 8006ffc:	1af3      	sublt	r3, r6, r3
 8006ffe:	bfb4      	ite	lt
 8007000:	18d2      	addlt	r2, r2, r3
 8007002:	1b9e      	subge	r6, r3, r6
 8007004:	9b04      	ldr	r3, [sp, #16]
 8007006:	bfbc      	itt	lt
 8007008:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800700a:	2600      	movlt	r6, #0
 800700c:	2b00      	cmp	r3, #0
 800700e:	bfb7      	itett	lt
 8007010:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8007014:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8007018:	1a9d      	sublt	r5, r3, r2
 800701a:	2300      	movlt	r3, #0
 800701c:	e741      	b.n	8006ea2 <_dtoa_r+0x742>
 800701e:	9e08      	ldr	r6, [sp, #32]
 8007020:	9d05      	ldr	r5, [sp, #20]
 8007022:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007024:	e748      	b.n	8006eb8 <_dtoa_r+0x758>
 8007026:	9a08      	ldr	r2, [sp, #32]
 8007028:	e770      	b.n	8006f0c <_dtoa_r+0x7ac>
 800702a:	9b07      	ldr	r3, [sp, #28]
 800702c:	2b01      	cmp	r3, #1
 800702e:	dc19      	bgt.n	8007064 <_dtoa_r+0x904>
 8007030:	9b02      	ldr	r3, [sp, #8]
 8007032:	b9bb      	cbnz	r3, 8007064 <_dtoa_r+0x904>
 8007034:	9b03      	ldr	r3, [sp, #12]
 8007036:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800703a:	b99b      	cbnz	r3, 8007064 <_dtoa_r+0x904>
 800703c:	9b03      	ldr	r3, [sp, #12]
 800703e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007042:	0d1b      	lsrs	r3, r3, #20
 8007044:	051b      	lsls	r3, r3, #20
 8007046:	b183      	cbz	r3, 800706a <_dtoa_r+0x90a>
 8007048:	9b05      	ldr	r3, [sp, #20]
 800704a:	3301      	adds	r3, #1
 800704c:	9305      	str	r3, [sp, #20]
 800704e:	9b06      	ldr	r3, [sp, #24]
 8007050:	3301      	adds	r3, #1
 8007052:	9306      	str	r3, [sp, #24]
 8007054:	f04f 0801 	mov.w	r8, #1
 8007058:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800705a:	2b00      	cmp	r3, #0
 800705c:	f47f af6f 	bne.w	8006f3e <_dtoa_r+0x7de>
 8007060:	2001      	movs	r0, #1
 8007062:	e774      	b.n	8006f4e <_dtoa_r+0x7ee>
 8007064:	f04f 0800 	mov.w	r8, #0
 8007068:	e7f6      	b.n	8007058 <_dtoa_r+0x8f8>
 800706a:	4698      	mov	r8, r3
 800706c:	e7f4      	b.n	8007058 <_dtoa_r+0x8f8>
 800706e:	d082      	beq.n	8006f76 <_dtoa_r+0x816>
 8007070:	9a05      	ldr	r2, [sp, #20]
 8007072:	331c      	adds	r3, #28
 8007074:	441a      	add	r2, r3
 8007076:	9205      	str	r2, [sp, #20]
 8007078:	9a06      	ldr	r2, [sp, #24]
 800707a:	441a      	add	r2, r3
 800707c:	441d      	add	r5, r3
 800707e:	9206      	str	r2, [sp, #24]
 8007080:	e779      	b.n	8006f76 <_dtoa_r+0x816>
 8007082:	4603      	mov	r3, r0
 8007084:	e7f4      	b.n	8007070 <_dtoa_r+0x910>
 8007086:	9b04      	ldr	r3, [sp, #16]
 8007088:	2b00      	cmp	r3, #0
 800708a:	dc37      	bgt.n	80070fc <_dtoa_r+0x99c>
 800708c:	9b07      	ldr	r3, [sp, #28]
 800708e:	2b02      	cmp	r3, #2
 8007090:	dd34      	ble.n	80070fc <_dtoa_r+0x99c>
 8007092:	9b04      	ldr	r3, [sp, #16]
 8007094:	9301      	str	r3, [sp, #4]
 8007096:	9b01      	ldr	r3, [sp, #4]
 8007098:	b963      	cbnz	r3, 80070b4 <_dtoa_r+0x954>
 800709a:	4631      	mov	r1, r6
 800709c:	2205      	movs	r2, #5
 800709e:	4620      	mov	r0, r4
 80070a0:	f000 fab2 	bl	8007608 <__multadd>
 80070a4:	4601      	mov	r1, r0
 80070a6:	4606      	mov	r6, r0
 80070a8:	4650      	mov	r0, sl
 80070aa:	f000 fcc7 	bl	8007a3c <__mcmp>
 80070ae:	2800      	cmp	r0, #0
 80070b0:	f73f adbb 	bgt.w	8006c2a <_dtoa_r+0x4ca>
 80070b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070b6:	9d00      	ldr	r5, [sp, #0]
 80070b8:	ea6f 0b03 	mvn.w	fp, r3
 80070bc:	f04f 0800 	mov.w	r8, #0
 80070c0:	4631      	mov	r1, r6
 80070c2:	4620      	mov	r0, r4
 80070c4:	f000 fa7e 	bl	80075c4 <_Bfree>
 80070c8:	2f00      	cmp	r7, #0
 80070ca:	f43f aeab 	beq.w	8006e24 <_dtoa_r+0x6c4>
 80070ce:	f1b8 0f00 	cmp.w	r8, #0
 80070d2:	d005      	beq.n	80070e0 <_dtoa_r+0x980>
 80070d4:	45b8      	cmp	r8, r7
 80070d6:	d003      	beq.n	80070e0 <_dtoa_r+0x980>
 80070d8:	4641      	mov	r1, r8
 80070da:	4620      	mov	r0, r4
 80070dc:	f000 fa72 	bl	80075c4 <_Bfree>
 80070e0:	4639      	mov	r1, r7
 80070e2:	4620      	mov	r0, r4
 80070e4:	f000 fa6e 	bl	80075c4 <_Bfree>
 80070e8:	e69c      	b.n	8006e24 <_dtoa_r+0x6c4>
 80070ea:	2600      	movs	r6, #0
 80070ec:	4637      	mov	r7, r6
 80070ee:	e7e1      	b.n	80070b4 <_dtoa_r+0x954>
 80070f0:	46bb      	mov	fp, r7
 80070f2:	4637      	mov	r7, r6
 80070f4:	e599      	b.n	8006c2a <_dtoa_r+0x4ca>
 80070f6:	bf00      	nop
 80070f8:	40240000 	.word	0x40240000
 80070fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070fe:	2b00      	cmp	r3, #0
 8007100:	f000 80c8 	beq.w	8007294 <_dtoa_r+0xb34>
 8007104:	9b04      	ldr	r3, [sp, #16]
 8007106:	9301      	str	r3, [sp, #4]
 8007108:	2d00      	cmp	r5, #0
 800710a:	dd05      	ble.n	8007118 <_dtoa_r+0x9b8>
 800710c:	4639      	mov	r1, r7
 800710e:	462a      	mov	r2, r5
 8007110:	4620      	mov	r0, r4
 8007112:	f000 fc27 	bl	8007964 <__lshift>
 8007116:	4607      	mov	r7, r0
 8007118:	f1b8 0f00 	cmp.w	r8, #0
 800711c:	d05b      	beq.n	80071d6 <_dtoa_r+0xa76>
 800711e:	6879      	ldr	r1, [r7, #4]
 8007120:	4620      	mov	r0, r4
 8007122:	f000 fa0f 	bl	8007544 <_Balloc>
 8007126:	4605      	mov	r5, r0
 8007128:	b928      	cbnz	r0, 8007136 <_dtoa_r+0x9d6>
 800712a:	4b83      	ldr	r3, [pc, #524]	; (8007338 <_dtoa_r+0xbd8>)
 800712c:	4602      	mov	r2, r0
 800712e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007132:	f7ff bb2e 	b.w	8006792 <_dtoa_r+0x32>
 8007136:	693a      	ldr	r2, [r7, #16]
 8007138:	3202      	adds	r2, #2
 800713a:	0092      	lsls	r2, r2, #2
 800713c:	f107 010c 	add.w	r1, r7, #12
 8007140:	300c      	adds	r0, #12
 8007142:	f000 ffab 	bl	800809c <memcpy>
 8007146:	2201      	movs	r2, #1
 8007148:	4629      	mov	r1, r5
 800714a:	4620      	mov	r0, r4
 800714c:	f000 fc0a 	bl	8007964 <__lshift>
 8007150:	9b00      	ldr	r3, [sp, #0]
 8007152:	3301      	adds	r3, #1
 8007154:	9304      	str	r3, [sp, #16]
 8007156:	e9dd 2300 	ldrd	r2, r3, [sp]
 800715a:	4413      	add	r3, r2
 800715c:	9308      	str	r3, [sp, #32]
 800715e:	9b02      	ldr	r3, [sp, #8]
 8007160:	f003 0301 	and.w	r3, r3, #1
 8007164:	46b8      	mov	r8, r7
 8007166:	9306      	str	r3, [sp, #24]
 8007168:	4607      	mov	r7, r0
 800716a:	9b04      	ldr	r3, [sp, #16]
 800716c:	4631      	mov	r1, r6
 800716e:	3b01      	subs	r3, #1
 8007170:	4650      	mov	r0, sl
 8007172:	9301      	str	r3, [sp, #4]
 8007174:	f7ff fa6b 	bl	800664e <quorem>
 8007178:	4641      	mov	r1, r8
 800717a:	9002      	str	r0, [sp, #8]
 800717c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007180:	4650      	mov	r0, sl
 8007182:	f000 fc5b 	bl	8007a3c <__mcmp>
 8007186:	463a      	mov	r2, r7
 8007188:	9005      	str	r0, [sp, #20]
 800718a:	4631      	mov	r1, r6
 800718c:	4620      	mov	r0, r4
 800718e:	f000 fc71 	bl	8007a74 <__mdiff>
 8007192:	68c2      	ldr	r2, [r0, #12]
 8007194:	4605      	mov	r5, r0
 8007196:	bb02      	cbnz	r2, 80071da <_dtoa_r+0xa7a>
 8007198:	4601      	mov	r1, r0
 800719a:	4650      	mov	r0, sl
 800719c:	f000 fc4e 	bl	8007a3c <__mcmp>
 80071a0:	4602      	mov	r2, r0
 80071a2:	4629      	mov	r1, r5
 80071a4:	4620      	mov	r0, r4
 80071a6:	9209      	str	r2, [sp, #36]	; 0x24
 80071a8:	f000 fa0c 	bl	80075c4 <_Bfree>
 80071ac:	9b07      	ldr	r3, [sp, #28]
 80071ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80071b0:	9d04      	ldr	r5, [sp, #16]
 80071b2:	ea43 0102 	orr.w	r1, r3, r2
 80071b6:	9b06      	ldr	r3, [sp, #24]
 80071b8:	4319      	orrs	r1, r3
 80071ba:	d110      	bne.n	80071de <_dtoa_r+0xa7e>
 80071bc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80071c0:	d029      	beq.n	8007216 <_dtoa_r+0xab6>
 80071c2:	9b05      	ldr	r3, [sp, #20]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	dd02      	ble.n	80071ce <_dtoa_r+0xa6e>
 80071c8:	9b02      	ldr	r3, [sp, #8]
 80071ca:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80071ce:	9b01      	ldr	r3, [sp, #4]
 80071d0:	f883 9000 	strb.w	r9, [r3]
 80071d4:	e774      	b.n	80070c0 <_dtoa_r+0x960>
 80071d6:	4638      	mov	r0, r7
 80071d8:	e7ba      	b.n	8007150 <_dtoa_r+0x9f0>
 80071da:	2201      	movs	r2, #1
 80071dc:	e7e1      	b.n	80071a2 <_dtoa_r+0xa42>
 80071de:	9b05      	ldr	r3, [sp, #20]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	db04      	blt.n	80071ee <_dtoa_r+0xa8e>
 80071e4:	9907      	ldr	r1, [sp, #28]
 80071e6:	430b      	orrs	r3, r1
 80071e8:	9906      	ldr	r1, [sp, #24]
 80071ea:	430b      	orrs	r3, r1
 80071ec:	d120      	bne.n	8007230 <_dtoa_r+0xad0>
 80071ee:	2a00      	cmp	r2, #0
 80071f0:	dded      	ble.n	80071ce <_dtoa_r+0xa6e>
 80071f2:	4651      	mov	r1, sl
 80071f4:	2201      	movs	r2, #1
 80071f6:	4620      	mov	r0, r4
 80071f8:	f000 fbb4 	bl	8007964 <__lshift>
 80071fc:	4631      	mov	r1, r6
 80071fe:	4682      	mov	sl, r0
 8007200:	f000 fc1c 	bl	8007a3c <__mcmp>
 8007204:	2800      	cmp	r0, #0
 8007206:	dc03      	bgt.n	8007210 <_dtoa_r+0xab0>
 8007208:	d1e1      	bne.n	80071ce <_dtoa_r+0xa6e>
 800720a:	f019 0f01 	tst.w	r9, #1
 800720e:	d0de      	beq.n	80071ce <_dtoa_r+0xa6e>
 8007210:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007214:	d1d8      	bne.n	80071c8 <_dtoa_r+0xa68>
 8007216:	9a01      	ldr	r2, [sp, #4]
 8007218:	2339      	movs	r3, #57	; 0x39
 800721a:	7013      	strb	r3, [r2, #0]
 800721c:	462b      	mov	r3, r5
 800721e:	461d      	mov	r5, r3
 8007220:	3b01      	subs	r3, #1
 8007222:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007226:	2a39      	cmp	r2, #57	; 0x39
 8007228:	d06c      	beq.n	8007304 <_dtoa_r+0xba4>
 800722a:	3201      	adds	r2, #1
 800722c:	701a      	strb	r2, [r3, #0]
 800722e:	e747      	b.n	80070c0 <_dtoa_r+0x960>
 8007230:	2a00      	cmp	r2, #0
 8007232:	dd07      	ble.n	8007244 <_dtoa_r+0xae4>
 8007234:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007238:	d0ed      	beq.n	8007216 <_dtoa_r+0xab6>
 800723a:	9a01      	ldr	r2, [sp, #4]
 800723c:	f109 0301 	add.w	r3, r9, #1
 8007240:	7013      	strb	r3, [r2, #0]
 8007242:	e73d      	b.n	80070c0 <_dtoa_r+0x960>
 8007244:	9b04      	ldr	r3, [sp, #16]
 8007246:	9a08      	ldr	r2, [sp, #32]
 8007248:	f803 9c01 	strb.w	r9, [r3, #-1]
 800724c:	4293      	cmp	r3, r2
 800724e:	d043      	beq.n	80072d8 <_dtoa_r+0xb78>
 8007250:	4651      	mov	r1, sl
 8007252:	2300      	movs	r3, #0
 8007254:	220a      	movs	r2, #10
 8007256:	4620      	mov	r0, r4
 8007258:	f000 f9d6 	bl	8007608 <__multadd>
 800725c:	45b8      	cmp	r8, r7
 800725e:	4682      	mov	sl, r0
 8007260:	f04f 0300 	mov.w	r3, #0
 8007264:	f04f 020a 	mov.w	r2, #10
 8007268:	4641      	mov	r1, r8
 800726a:	4620      	mov	r0, r4
 800726c:	d107      	bne.n	800727e <_dtoa_r+0xb1e>
 800726e:	f000 f9cb 	bl	8007608 <__multadd>
 8007272:	4680      	mov	r8, r0
 8007274:	4607      	mov	r7, r0
 8007276:	9b04      	ldr	r3, [sp, #16]
 8007278:	3301      	adds	r3, #1
 800727a:	9304      	str	r3, [sp, #16]
 800727c:	e775      	b.n	800716a <_dtoa_r+0xa0a>
 800727e:	f000 f9c3 	bl	8007608 <__multadd>
 8007282:	4639      	mov	r1, r7
 8007284:	4680      	mov	r8, r0
 8007286:	2300      	movs	r3, #0
 8007288:	220a      	movs	r2, #10
 800728a:	4620      	mov	r0, r4
 800728c:	f000 f9bc 	bl	8007608 <__multadd>
 8007290:	4607      	mov	r7, r0
 8007292:	e7f0      	b.n	8007276 <_dtoa_r+0xb16>
 8007294:	9b04      	ldr	r3, [sp, #16]
 8007296:	9301      	str	r3, [sp, #4]
 8007298:	9d00      	ldr	r5, [sp, #0]
 800729a:	4631      	mov	r1, r6
 800729c:	4650      	mov	r0, sl
 800729e:	f7ff f9d6 	bl	800664e <quorem>
 80072a2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80072a6:	9b00      	ldr	r3, [sp, #0]
 80072a8:	f805 9b01 	strb.w	r9, [r5], #1
 80072ac:	1aea      	subs	r2, r5, r3
 80072ae:	9b01      	ldr	r3, [sp, #4]
 80072b0:	4293      	cmp	r3, r2
 80072b2:	dd07      	ble.n	80072c4 <_dtoa_r+0xb64>
 80072b4:	4651      	mov	r1, sl
 80072b6:	2300      	movs	r3, #0
 80072b8:	220a      	movs	r2, #10
 80072ba:	4620      	mov	r0, r4
 80072bc:	f000 f9a4 	bl	8007608 <__multadd>
 80072c0:	4682      	mov	sl, r0
 80072c2:	e7ea      	b.n	800729a <_dtoa_r+0xb3a>
 80072c4:	9b01      	ldr	r3, [sp, #4]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	bfc8      	it	gt
 80072ca:	461d      	movgt	r5, r3
 80072cc:	9b00      	ldr	r3, [sp, #0]
 80072ce:	bfd8      	it	le
 80072d0:	2501      	movle	r5, #1
 80072d2:	441d      	add	r5, r3
 80072d4:	f04f 0800 	mov.w	r8, #0
 80072d8:	4651      	mov	r1, sl
 80072da:	2201      	movs	r2, #1
 80072dc:	4620      	mov	r0, r4
 80072de:	f000 fb41 	bl	8007964 <__lshift>
 80072e2:	4631      	mov	r1, r6
 80072e4:	4682      	mov	sl, r0
 80072e6:	f000 fba9 	bl	8007a3c <__mcmp>
 80072ea:	2800      	cmp	r0, #0
 80072ec:	dc96      	bgt.n	800721c <_dtoa_r+0xabc>
 80072ee:	d102      	bne.n	80072f6 <_dtoa_r+0xb96>
 80072f0:	f019 0f01 	tst.w	r9, #1
 80072f4:	d192      	bne.n	800721c <_dtoa_r+0xabc>
 80072f6:	462b      	mov	r3, r5
 80072f8:	461d      	mov	r5, r3
 80072fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80072fe:	2a30      	cmp	r2, #48	; 0x30
 8007300:	d0fa      	beq.n	80072f8 <_dtoa_r+0xb98>
 8007302:	e6dd      	b.n	80070c0 <_dtoa_r+0x960>
 8007304:	9a00      	ldr	r2, [sp, #0]
 8007306:	429a      	cmp	r2, r3
 8007308:	d189      	bne.n	800721e <_dtoa_r+0xabe>
 800730a:	f10b 0b01 	add.w	fp, fp, #1
 800730e:	2331      	movs	r3, #49	; 0x31
 8007310:	e796      	b.n	8007240 <_dtoa_r+0xae0>
 8007312:	4b0a      	ldr	r3, [pc, #40]	; (800733c <_dtoa_r+0xbdc>)
 8007314:	f7ff ba99 	b.w	800684a <_dtoa_r+0xea>
 8007318:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800731a:	2b00      	cmp	r3, #0
 800731c:	f47f aa6d 	bne.w	80067fa <_dtoa_r+0x9a>
 8007320:	4b07      	ldr	r3, [pc, #28]	; (8007340 <_dtoa_r+0xbe0>)
 8007322:	f7ff ba92 	b.w	800684a <_dtoa_r+0xea>
 8007326:	9b01      	ldr	r3, [sp, #4]
 8007328:	2b00      	cmp	r3, #0
 800732a:	dcb5      	bgt.n	8007298 <_dtoa_r+0xb38>
 800732c:	9b07      	ldr	r3, [sp, #28]
 800732e:	2b02      	cmp	r3, #2
 8007330:	f73f aeb1 	bgt.w	8007096 <_dtoa_r+0x936>
 8007334:	e7b0      	b.n	8007298 <_dtoa_r+0xb38>
 8007336:	bf00      	nop
 8007338:	080088b0 	.word	0x080088b0
 800733c:	08008810 	.word	0x08008810
 8007340:	08008834 	.word	0x08008834

08007344 <_free_r>:
 8007344:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007346:	2900      	cmp	r1, #0
 8007348:	d044      	beq.n	80073d4 <_free_r+0x90>
 800734a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800734e:	9001      	str	r0, [sp, #4]
 8007350:	2b00      	cmp	r3, #0
 8007352:	f1a1 0404 	sub.w	r4, r1, #4
 8007356:	bfb8      	it	lt
 8007358:	18e4      	addlt	r4, r4, r3
 800735a:	f000 f8e7 	bl	800752c <__malloc_lock>
 800735e:	4a1e      	ldr	r2, [pc, #120]	; (80073d8 <_free_r+0x94>)
 8007360:	9801      	ldr	r0, [sp, #4]
 8007362:	6813      	ldr	r3, [r2, #0]
 8007364:	b933      	cbnz	r3, 8007374 <_free_r+0x30>
 8007366:	6063      	str	r3, [r4, #4]
 8007368:	6014      	str	r4, [r2, #0]
 800736a:	b003      	add	sp, #12
 800736c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007370:	f000 b8e2 	b.w	8007538 <__malloc_unlock>
 8007374:	42a3      	cmp	r3, r4
 8007376:	d908      	bls.n	800738a <_free_r+0x46>
 8007378:	6825      	ldr	r5, [r4, #0]
 800737a:	1961      	adds	r1, r4, r5
 800737c:	428b      	cmp	r3, r1
 800737e:	bf01      	itttt	eq
 8007380:	6819      	ldreq	r1, [r3, #0]
 8007382:	685b      	ldreq	r3, [r3, #4]
 8007384:	1949      	addeq	r1, r1, r5
 8007386:	6021      	streq	r1, [r4, #0]
 8007388:	e7ed      	b.n	8007366 <_free_r+0x22>
 800738a:	461a      	mov	r2, r3
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	b10b      	cbz	r3, 8007394 <_free_r+0x50>
 8007390:	42a3      	cmp	r3, r4
 8007392:	d9fa      	bls.n	800738a <_free_r+0x46>
 8007394:	6811      	ldr	r1, [r2, #0]
 8007396:	1855      	adds	r5, r2, r1
 8007398:	42a5      	cmp	r5, r4
 800739a:	d10b      	bne.n	80073b4 <_free_r+0x70>
 800739c:	6824      	ldr	r4, [r4, #0]
 800739e:	4421      	add	r1, r4
 80073a0:	1854      	adds	r4, r2, r1
 80073a2:	42a3      	cmp	r3, r4
 80073a4:	6011      	str	r1, [r2, #0]
 80073a6:	d1e0      	bne.n	800736a <_free_r+0x26>
 80073a8:	681c      	ldr	r4, [r3, #0]
 80073aa:	685b      	ldr	r3, [r3, #4]
 80073ac:	6053      	str	r3, [r2, #4]
 80073ae:	440c      	add	r4, r1
 80073b0:	6014      	str	r4, [r2, #0]
 80073b2:	e7da      	b.n	800736a <_free_r+0x26>
 80073b4:	d902      	bls.n	80073bc <_free_r+0x78>
 80073b6:	230c      	movs	r3, #12
 80073b8:	6003      	str	r3, [r0, #0]
 80073ba:	e7d6      	b.n	800736a <_free_r+0x26>
 80073bc:	6825      	ldr	r5, [r4, #0]
 80073be:	1961      	adds	r1, r4, r5
 80073c0:	428b      	cmp	r3, r1
 80073c2:	bf04      	itt	eq
 80073c4:	6819      	ldreq	r1, [r3, #0]
 80073c6:	685b      	ldreq	r3, [r3, #4]
 80073c8:	6063      	str	r3, [r4, #4]
 80073ca:	bf04      	itt	eq
 80073cc:	1949      	addeq	r1, r1, r5
 80073ce:	6021      	streq	r1, [r4, #0]
 80073d0:	6054      	str	r4, [r2, #4]
 80073d2:	e7ca      	b.n	800736a <_free_r+0x26>
 80073d4:	b003      	add	sp, #12
 80073d6:	bd30      	pop	{r4, r5, pc}
 80073d8:	20000b00 	.word	0x20000b00

080073dc <malloc>:
 80073dc:	4b02      	ldr	r3, [pc, #8]	; (80073e8 <malloc+0xc>)
 80073de:	4601      	mov	r1, r0
 80073e0:	6818      	ldr	r0, [r3, #0]
 80073e2:	f000 b823 	b.w	800742c <_malloc_r>
 80073e6:	bf00      	nop
 80073e8:	20000064 	.word	0x20000064

080073ec <sbrk_aligned>:
 80073ec:	b570      	push	{r4, r5, r6, lr}
 80073ee:	4e0e      	ldr	r6, [pc, #56]	; (8007428 <sbrk_aligned+0x3c>)
 80073f0:	460c      	mov	r4, r1
 80073f2:	6831      	ldr	r1, [r6, #0]
 80073f4:	4605      	mov	r5, r0
 80073f6:	b911      	cbnz	r1, 80073fe <sbrk_aligned+0x12>
 80073f8:	f000 fe40 	bl	800807c <_sbrk_r>
 80073fc:	6030      	str	r0, [r6, #0]
 80073fe:	4621      	mov	r1, r4
 8007400:	4628      	mov	r0, r5
 8007402:	f000 fe3b 	bl	800807c <_sbrk_r>
 8007406:	1c43      	adds	r3, r0, #1
 8007408:	d00a      	beq.n	8007420 <sbrk_aligned+0x34>
 800740a:	1cc4      	adds	r4, r0, #3
 800740c:	f024 0403 	bic.w	r4, r4, #3
 8007410:	42a0      	cmp	r0, r4
 8007412:	d007      	beq.n	8007424 <sbrk_aligned+0x38>
 8007414:	1a21      	subs	r1, r4, r0
 8007416:	4628      	mov	r0, r5
 8007418:	f000 fe30 	bl	800807c <_sbrk_r>
 800741c:	3001      	adds	r0, #1
 800741e:	d101      	bne.n	8007424 <sbrk_aligned+0x38>
 8007420:	f04f 34ff 	mov.w	r4, #4294967295
 8007424:	4620      	mov	r0, r4
 8007426:	bd70      	pop	{r4, r5, r6, pc}
 8007428:	20000b04 	.word	0x20000b04

0800742c <_malloc_r>:
 800742c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007430:	1ccd      	adds	r5, r1, #3
 8007432:	f025 0503 	bic.w	r5, r5, #3
 8007436:	3508      	adds	r5, #8
 8007438:	2d0c      	cmp	r5, #12
 800743a:	bf38      	it	cc
 800743c:	250c      	movcc	r5, #12
 800743e:	2d00      	cmp	r5, #0
 8007440:	4607      	mov	r7, r0
 8007442:	db01      	blt.n	8007448 <_malloc_r+0x1c>
 8007444:	42a9      	cmp	r1, r5
 8007446:	d905      	bls.n	8007454 <_malloc_r+0x28>
 8007448:	230c      	movs	r3, #12
 800744a:	603b      	str	r3, [r7, #0]
 800744c:	2600      	movs	r6, #0
 800744e:	4630      	mov	r0, r6
 8007450:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007454:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007528 <_malloc_r+0xfc>
 8007458:	f000 f868 	bl	800752c <__malloc_lock>
 800745c:	f8d8 3000 	ldr.w	r3, [r8]
 8007460:	461c      	mov	r4, r3
 8007462:	bb5c      	cbnz	r4, 80074bc <_malloc_r+0x90>
 8007464:	4629      	mov	r1, r5
 8007466:	4638      	mov	r0, r7
 8007468:	f7ff ffc0 	bl	80073ec <sbrk_aligned>
 800746c:	1c43      	adds	r3, r0, #1
 800746e:	4604      	mov	r4, r0
 8007470:	d155      	bne.n	800751e <_malloc_r+0xf2>
 8007472:	f8d8 4000 	ldr.w	r4, [r8]
 8007476:	4626      	mov	r6, r4
 8007478:	2e00      	cmp	r6, #0
 800747a:	d145      	bne.n	8007508 <_malloc_r+0xdc>
 800747c:	2c00      	cmp	r4, #0
 800747e:	d048      	beq.n	8007512 <_malloc_r+0xe6>
 8007480:	6823      	ldr	r3, [r4, #0]
 8007482:	4631      	mov	r1, r6
 8007484:	4638      	mov	r0, r7
 8007486:	eb04 0903 	add.w	r9, r4, r3
 800748a:	f000 fdf7 	bl	800807c <_sbrk_r>
 800748e:	4581      	cmp	r9, r0
 8007490:	d13f      	bne.n	8007512 <_malloc_r+0xe6>
 8007492:	6821      	ldr	r1, [r4, #0]
 8007494:	1a6d      	subs	r5, r5, r1
 8007496:	4629      	mov	r1, r5
 8007498:	4638      	mov	r0, r7
 800749a:	f7ff ffa7 	bl	80073ec <sbrk_aligned>
 800749e:	3001      	adds	r0, #1
 80074a0:	d037      	beq.n	8007512 <_malloc_r+0xe6>
 80074a2:	6823      	ldr	r3, [r4, #0]
 80074a4:	442b      	add	r3, r5
 80074a6:	6023      	str	r3, [r4, #0]
 80074a8:	f8d8 3000 	ldr.w	r3, [r8]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d038      	beq.n	8007522 <_malloc_r+0xf6>
 80074b0:	685a      	ldr	r2, [r3, #4]
 80074b2:	42a2      	cmp	r2, r4
 80074b4:	d12b      	bne.n	800750e <_malloc_r+0xe2>
 80074b6:	2200      	movs	r2, #0
 80074b8:	605a      	str	r2, [r3, #4]
 80074ba:	e00f      	b.n	80074dc <_malloc_r+0xb0>
 80074bc:	6822      	ldr	r2, [r4, #0]
 80074be:	1b52      	subs	r2, r2, r5
 80074c0:	d41f      	bmi.n	8007502 <_malloc_r+0xd6>
 80074c2:	2a0b      	cmp	r2, #11
 80074c4:	d917      	bls.n	80074f6 <_malloc_r+0xca>
 80074c6:	1961      	adds	r1, r4, r5
 80074c8:	42a3      	cmp	r3, r4
 80074ca:	6025      	str	r5, [r4, #0]
 80074cc:	bf18      	it	ne
 80074ce:	6059      	strne	r1, [r3, #4]
 80074d0:	6863      	ldr	r3, [r4, #4]
 80074d2:	bf08      	it	eq
 80074d4:	f8c8 1000 	streq.w	r1, [r8]
 80074d8:	5162      	str	r2, [r4, r5]
 80074da:	604b      	str	r3, [r1, #4]
 80074dc:	4638      	mov	r0, r7
 80074de:	f104 060b 	add.w	r6, r4, #11
 80074e2:	f000 f829 	bl	8007538 <__malloc_unlock>
 80074e6:	f026 0607 	bic.w	r6, r6, #7
 80074ea:	1d23      	adds	r3, r4, #4
 80074ec:	1af2      	subs	r2, r6, r3
 80074ee:	d0ae      	beq.n	800744e <_malloc_r+0x22>
 80074f0:	1b9b      	subs	r3, r3, r6
 80074f2:	50a3      	str	r3, [r4, r2]
 80074f4:	e7ab      	b.n	800744e <_malloc_r+0x22>
 80074f6:	42a3      	cmp	r3, r4
 80074f8:	6862      	ldr	r2, [r4, #4]
 80074fa:	d1dd      	bne.n	80074b8 <_malloc_r+0x8c>
 80074fc:	f8c8 2000 	str.w	r2, [r8]
 8007500:	e7ec      	b.n	80074dc <_malloc_r+0xb0>
 8007502:	4623      	mov	r3, r4
 8007504:	6864      	ldr	r4, [r4, #4]
 8007506:	e7ac      	b.n	8007462 <_malloc_r+0x36>
 8007508:	4634      	mov	r4, r6
 800750a:	6876      	ldr	r6, [r6, #4]
 800750c:	e7b4      	b.n	8007478 <_malloc_r+0x4c>
 800750e:	4613      	mov	r3, r2
 8007510:	e7cc      	b.n	80074ac <_malloc_r+0x80>
 8007512:	230c      	movs	r3, #12
 8007514:	603b      	str	r3, [r7, #0]
 8007516:	4638      	mov	r0, r7
 8007518:	f000 f80e 	bl	8007538 <__malloc_unlock>
 800751c:	e797      	b.n	800744e <_malloc_r+0x22>
 800751e:	6025      	str	r5, [r4, #0]
 8007520:	e7dc      	b.n	80074dc <_malloc_r+0xb0>
 8007522:	605b      	str	r3, [r3, #4]
 8007524:	deff      	udf	#255	; 0xff
 8007526:	bf00      	nop
 8007528:	20000b00 	.word	0x20000b00

0800752c <__malloc_lock>:
 800752c:	4801      	ldr	r0, [pc, #4]	; (8007534 <__malloc_lock+0x8>)
 800752e:	f7ff b88c 	b.w	800664a <__retarget_lock_acquire_recursive>
 8007532:	bf00      	nop
 8007534:	20000afc 	.word	0x20000afc

08007538 <__malloc_unlock>:
 8007538:	4801      	ldr	r0, [pc, #4]	; (8007540 <__malloc_unlock+0x8>)
 800753a:	f7ff b887 	b.w	800664c <__retarget_lock_release_recursive>
 800753e:	bf00      	nop
 8007540:	20000afc 	.word	0x20000afc

08007544 <_Balloc>:
 8007544:	b570      	push	{r4, r5, r6, lr}
 8007546:	69c6      	ldr	r6, [r0, #28]
 8007548:	4604      	mov	r4, r0
 800754a:	460d      	mov	r5, r1
 800754c:	b976      	cbnz	r6, 800756c <_Balloc+0x28>
 800754e:	2010      	movs	r0, #16
 8007550:	f7ff ff44 	bl	80073dc <malloc>
 8007554:	4602      	mov	r2, r0
 8007556:	61e0      	str	r0, [r4, #28]
 8007558:	b920      	cbnz	r0, 8007564 <_Balloc+0x20>
 800755a:	4b18      	ldr	r3, [pc, #96]	; (80075bc <_Balloc+0x78>)
 800755c:	4818      	ldr	r0, [pc, #96]	; (80075c0 <_Balloc+0x7c>)
 800755e:	216b      	movs	r1, #107	; 0x6b
 8007560:	f000 fdaa 	bl	80080b8 <__assert_func>
 8007564:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007568:	6006      	str	r6, [r0, #0]
 800756a:	60c6      	str	r6, [r0, #12]
 800756c:	69e6      	ldr	r6, [r4, #28]
 800756e:	68f3      	ldr	r3, [r6, #12]
 8007570:	b183      	cbz	r3, 8007594 <_Balloc+0x50>
 8007572:	69e3      	ldr	r3, [r4, #28]
 8007574:	68db      	ldr	r3, [r3, #12]
 8007576:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800757a:	b9b8      	cbnz	r0, 80075ac <_Balloc+0x68>
 800757c:	2101      	movs	r1, #1
 800757e:	fa01 f605 	lsl.w	r6, r1, r5
 8007582:	1d72      	adds	r2, r6, #5
 8007584:	0092      	lsls	r2, r2, #2
 8007586:	4620      	mov	r0, r4
 8007588:	f000 fdb4 	bl	80080f4 <_calloc_r>
 800758c:	b160      	cbz	r0, 80075a8 <_Balloc+0x64>
 800758e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007592:	e00e      	b.n	80075b2 <_Balloc+0x6e>
 8007594:	2221      	movs	r2, #33	; 0x21
 8007596:	2104      	movs	r1, #4
 8007598:	4620      	mov	r0, r4
 800759a:	f000 fdab 	bl	80080f4 <_calloc_r>
 800759e:	69e3      	ldr	r3, [r4, #28]
 80075a0:	60f0      	str	r0, [r6, #12]
 80075a2:	68db      	ldr	r3, [r3, #12]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d1e4      	bne.n	8007572 <_Balloc+0x2e>
 80075a8:	2000      	movs	r0, #0
 80075aa:	bd70      	pop	{r4, r5, r6, pc}
 80075ac:	6802      	ldr	r2, [r0, #0]
 80075ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80075b2:	2300      	movs	r3, #0
 80075b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80075b8:	e7f7      	b.n	80075aa <_Balloc+0x66>
 80075ba:	bf00      	nop
 80075bc:	08008841 	.word	0x08008841
 80075c0:	080088c1 	.word	0x080088c1

080075c4 <_Bfree>:
 80075c4:	b570      	push	{r4, r5, r6, lr}
 80075c6:	69c6      	ldr	r6, [r0, #28]
 80075c8:	4605      	mov	r5, r0
 80075ca:	460c      	mov	r4, r1
 80075cc:	b976      	cbnz	r6, 80075ec <_Bfree+0x28>
 80075ce:	2010      	movs	r0, #16
 80075d0:	f7ff ff04 	bl	80073dc <malloc>
 80075d4:	4602      	mov	r2, r0
 80075d6:	61e8      	str	r0, [r5, #28]
 80075d8:	b920      	cbnz	r0, 80075e4 <_Bfree+0x20>
 80075da:	4b09      	ldr	r3, [pc, #36]	; (8007600 <_Bfree+0x3c>)
 80075dc:	4809      	ldr	r0, [pc, #36]	; (8007604 <_Bfree+0x40>)
 80075de:	218f      	movs	r1, #143	; 0x8f
 80075e0:	f000 fd6a 	bl	80080b8 <__assert_func>
 80075e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80075e8:	6006      	str	r6, [r0, #0]
 80075ea:	60c6      	str	r6, [r0, #12]
 80075ec:	b13c      	cbz	r4, 80075fe <_Bfree+0x3a>
 80075ee:	69eb      	ldr	r3, [r5, #28]
 80075f0:	6862      	ldr	r2, [r4, #4]
 80075f2:	68db      	ldr	r3, [r3, #12]
 80075f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80075f8:	6021      	str	r1, [r4, #0]
 80075fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80075fe:	bd70      	pop	{r4, r5, r6, pc}
 8007600:	08008841 	.word	0x08008841
 8007604:	080088c1 	.word	0x080088c1

08007608 <__multadd>:
 8007608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800760c:	690d      	ldr	r5, [r1, #16]
 800760e:	4607      	mov	r7, r0
 8007610:	460c      	mov	r4, r1
 8007612:	461e      	mov	r6, r3
 8007614:	f101 0c14 	add.w	ip, r1, #20
 8007618:	2000      	movs	r0, #0
 800761a:	f8dc 3000 	ldr.w	r3, [ip]
 800761e:	b299      	uxth	r1, r3
 8007620:	fb02 6101 	mla	r1, r2, r1, r6
 8007624:	0c1e      	lsrs	r6, r3, #16
 8007626:	0c0b      	lsrs	r3, r1, #16
 8007628:	fb02 3306 	mla	r3, r2, r6, r3
 800762c:	b289      	uxth	r1, r1
 800762e:	3001      	adds	r0, #1
 8007630:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007634:	4285      	cmp	r5, r0
 8007636:	f84c 1b04 	str.w	r1, [ip], #4
 800763a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800763e:	dcec      	bgt.n	800761a <__multadd+0x12>
 8007640:	b30e      	cbz	r6, 8007686 <__multadd+0x7e>
 8007642:	68a3      	ldr	r3, [r4, #8]
 8007644:	42ab      	cmp	r3, r5
 8007646:	dc19      	bgt.n	800767c <__multadd+0x74>
 8007648:	6861      	ldr	r1, [r4, #4]
 800764a:	4638      	mov	r0, r7
 800764c:	3101      	adds	r1, #1
 800764e:	f7ff ff79 	bl	8007544 <_Balloc>
 8007652:	4680      	mov	r8, r0
 8007654:	b928      	cbnz	r0, 8007662 <__multadd+0x5a>
 8007656:	4602      	mov	r2, r0
 8007658:	4b0c      	ldr	r3, [pc, #48]	; (800768c <__multadd+0x84>)
 800765a:	480d      	ldr	r0, [pc, #52]	; (8007690 <__multadd+0x88>)
 800765c:	21ba      	movs	r1, #186	; 0xba
 800765e:	f000 fd2b 	bl	80080b8 <__assert_func>
 8007662:	6922      	ldr	r2, [r4, #16]
 8007664:	3202      	adds	r2, #2
 8007666:	f104 010c 	add.w	r1, r4, #12
 800766a:	0092      	lsls	r2, r2, #2
 800766c:	300c      	adds	r0, #12
 800766e:	f000 fd15 	bl	800809c <memcpy>
 8007672:	4621      	mov	r1, r4
 8007674:	4638      	mov	r0, r7
 8007676:	f7ff ffa5 	bl	80075c4 <_Bfree>
 800767a:	4644      	mov	r4, r8
 800767c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007680:	3501      	adds	r5, #1
 8007682:	615e      	str	r6, [r3, #20]
 8007684:	6125      	str	r5, [r4, #16]
 8007686:	4620      	mov	r0, r4
 8007688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800768c:	080088b0 	.word	0x080088b0
 8007690:	080088c1 	.word	0x080088c1

08007694 <__hi0bits>:
 8007694:	0c03      	lsrs	r3, r0, #16
 8007696:	041b      	lsls	r3, r3, #16
 8007698:	b9d3      	cbnz	r3, 80076d0 <__hi0bits+0x3c>
 800769a:	0400      	lsls	r0, r0, #16
 800769c:	2310      	movs	r3, #16
 800769e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80076a2:	bf04      	itt	eq
 80076a4:	0200      	lsleq	r0, r0, #8
 80076a6:	3308      	addeq	r3, #8
 80076a8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80076ac:	bf04      	itt	eq
 80076ae:	0100      	lsleq	r0, r0, #4
 80076b0:	3304      	addeq	r3, #4
 80076b2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80076b6:	bf04      	itt	eq
 80076b8:	0080      	lsleq	r0, r0, #2
 80076ba:	3302      	addeq	r3, #2
 80076bc:	2800      	cmp	r0, #0
 80076be:	db05      	blt.n	80076cc <__hi0bits+0x38>
 80076c0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80076c4:	f103 0301 	add.w	r3, r3, #1
 80076c8:	bf08      	it	eq
 80076ca:	2320      	moveq	r3, #32
 80076cc:	4618      	mov	r0, r3
 80076ce:	4770      	bx	lr
 80076d0:	2300      	movs	r3, #0
 80076d2:	e7e4      	b.n	800769e <__hi0bits+0xa>

080076d4 <__lo0bits>:
 80076d4:	6803      	ldr	r3, [r0, #0]
 80076d6:	f013 0207 	ands.w	r2, r3, #7
 80076da:	d00c      	beq.n	80076f6 <__lo0bits+0x22>
 80076dc:	07d9      	lsls	r1, r3, #31
 80076de:	d422      	bmi.n	8007726 <__lo0bits+0x52>
 80076e0:	079a      	lsls	r2, r3, #30
 80076e2:	bf49      	itett	mi
 80076e4:	085b      	lsrmi	r3, r3, #1
 80076e6:	089b      	lsrpl	r3, r3, #2
 80076e8:	6003      	strmi	r3, [r0, #0]
 80076ea:	2201      	movmi	r2, #1
 80076ec:	bf5c      	itt	pl
 80076ee:	6003      	strpl	r3, [r0, #0]
 80076f0:	2202      	movpl	r2, #2
 80076f2:	4610      	mov	r0, r2
 80076f4:	4770      	bx	lr
 80076f6:	b299      	uxth	r1, r3
 80076f8:	b909      	cbnz	r1, 80076fe <__lo0bits+0x2a>
 80076fa:	0c1b      	lsrs	r3, r3, #16
 80076fc:	2210      	movs	r2, #16
 80076fe:	b2d9      	uxtb	r1, r3
 8007700:	b909      	cbnz	r1, 8007706 <__lo0bits+0x32>
 8007702:	3208      	adds	r2, #8
 8007704:	0a1b      	lsrs	r3, r3, #8
 8007706:	0719      	lsls	r1, r3, #28
 8007708:	bf04      	itt	eq
 800770a:	091b      	lsreq	r3, r3, #4
 800770c:	3204      	addeq	r2, #4
 800770e:	0799      	lsls	r1, r3, #30
 8007710:	bf04      	itt	eq
 8007712:	089b      	lsreq	r3, r3, #2
 8007714:	3202      	addeq	r2, #2
 8007716:	07d9      	lsls	r1, r3, #31
 8007718:	d403      	bmi.n	8007722 <__lo0bits+0x4e>
 800771a:	085b      	lsrs	r3, r3, #1
 800771c:	f102 0201 	add.w	r2, r2, #1
 8007720:	d003      	beq.n	800772a <__lo0bits+0x56>
 8007722:	6003      	str	r3, [r0, #0]
 8007724:	e7e5      	b.n	80076f2 <__lo0bits+0x1e>
 8007726:	2200      	movs	r2, #0
 8007728:	e7e3      	b.n	80076f2 <__lo0bits+0x1e>
 800772a:	2220      	movs	r2, #32
 800772c:	e7e1      	b.n	80076f2 <__lo0bits+0x1e>
	...

08007730 <__i2b>:
 8007730:	b510      	push	{r4, lr}
 8007732:	460c      	mov	r4, r1
 8007734:	2101      	movs	r1, #1
 8007736:	f7ff ff05 	bl	8007544 <_Balloc>
 800773a:	4602      	mov	r2, r0
 800773c:	b928      	cbnz	r0, 800774a <__i2b+0x1a>
 800773e:	4b05      	ldr	r3, [pc, #20]	; (8007754 <__i2b+0x24>)
 8007740:	4805      	ldr	r0, [pc, #20]	; (8007758 <__i2b+0x28>)
 8007742:	f240 1145 	movw	r1, #325	; 0x145
 8007746:	f000 fcb7 	bl	80080b8 <__assert_func>
 800774a:	2301      	movs	r3, #1
 800774c:	6144      	str	r4, [r0, #20]
 800774e:	6103      	str	r3, [r0, #16]
 8007750:	bd10      	pop	{r4, pc}
 8007752:	bf00      	nop
 8007754:	080088b0 	.word	0x080088b0
 8007758:	080088c1 	.word	0x080088c1

0800775c <__multiply>:
 800775c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007760:	4691      	mov	r9, r2
 8007762:	690a      	ldr	r2, [r1, #16]
 8007764:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007768:	429a      	cmp	r2, r3
 800776a:	bfb8      	it	lt
 800776c:	460b      	movlt	r3, r1
 800776e:	460c      	mov	r4, r1
 8007770:	bfbc      	itt	lt
 8007772:	464c      	movlt	r4, r9
 8007774:	4699      	movlt	r9, r3
 8007776:	6927      	ldr	r7, [r4, #16]
 8007778:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800777c:	68a3      	ldr	r3, [r4, #8]
 800777e:	6861      	ldr	r1, [r4, #4]
 8007780:	eb07 060a 	add.w	r6, r7, sl
 8007784:	42b3      	cmp	r3, r6
 8007786:	b085      	sub	sp, #20
 8007788:	bfb8      	it	lt
 800778a:	3101      	addlt	r1, #1
 800778c:	f7ff feda 	bl	8007544 <_Balloc>
 8007790:	b930      	cbnz	r0, 80077a0 <__multiply+0x44>
 8007792:	4602      	mov	r2, r0
 8007794:	4b44      	ldr	r3, [pc, #272]	; (80078a8 <__multiply+0x14c>)
 8007796:	4845      	ldr	r0, [pc, #276]	; (80078ac <__multiply+0x150>)
 8007798:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800779c:	f000 fc8c 	bl	80080b8 <__assert_func>
 80077a0:	f100 0514 	add.w	r5, r0, #20
 80077a4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80077a8:	462b      	mov	r3, r5
 80077aa:	2200      	movs	r2, #0
 80077ac:	4543      	cmp	r3, r8
 80077ae:	d321      	bcc.n	80077f4 <__multiply+0x98>
 80077b0:	f104 0314 	add.w	r3, r4, #20
 80077b4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80077b8:	f109 0314 	add.w	r3, r9, #20
 80077bc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80077c0:	9202      	str	r2, [sp, #8]
 80077c2:	1b3a      	subs	r2, r7, r4
 80077c4:	3a15      	subs	r2, #21
 80077c6:	f022 0203 	bic.w	r2, r2, #3
 80077ca:	3204      	adds	r2, #4
 80077cc:	f104 0115 	add.w	r1, r4, #21
 80077d0:	428f      	cmp	r7, r1
 80077d2:	bf38      	it	cc
 80077d4:	2204      	movcc	r2, #4
 80077d6:	9201      	str	r2, [sp, #4]
 80077d8:	9a02      	ldr	r2, [sp, #8]
 80077da:	9303      	str	r3, [sp, #12]
 80077dc:	429a      	cmp	r2, r3
 80077de:	d80c      	bhi.n	80077fa <__multiply+0x9e>
 80077e0:	2e00      	cmp	r6, #0
 80077e2:	dd03      	ble.n	80077ec <__multiply+0x90>
 80077e4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d05b      	beq.n	80078a4 <__multiply+0x148>
 80077ec:	6106      	str	r6, [r0, #16]
 80077ee:	b005      	add	sp, #20
 80077f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077f4:	f843 2b04 	str.w	r2, [r3], #4
 80077f8:	e7d8      	b.n	80077ac <__multiply+0x50>
 80077fa:	f8b3 a000 	ldrh.w	sl, [r3]
 80077fe:	f1ba 0f00 	cmp.w	sl, #0
 8007802:	d024      	beq.n	800784e <__multiply+0xf2>
 8007804:	f104 0e14 	add.w	lr, r4, #20
 8007808:	46a9      	mov	r9, r5
 800780a:	f04f 0c00 	mov.w	ip, #0
 800780e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007812:	f8d9 1000 	ldr.w	r1, [r9]
 8007816:	fa1f fb82 	uxth.w	fp, r2
 800781a:	b289      	uxth	r1, r1
 800781c:	fb0a 110b 	mla	r1, sl, fp, r1
 8007820:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007824:	f8d9 2000 	ldr.w	r2, [r9]
 8007828:	4461      	add	r1, ip
 800782a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800782e:	fb0a c20b 	mla	r2, sl, fp, ip
 8007832:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007836:	b289      	uxth	r1, r1
 8007838:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800783c:	4577      	cmp	r7, lr
 800783e:	f849 1b04 	str.w	r1, [r9], #4
 8007842:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007846:	d8e2      	bhi.n	800780e <__multiply+0xb2>
 8007848:	9a01      	ldr	r2, [sp, #4]
 800784a:	f845 c002 	str.w	ip, [r5, r2]
 800784e:	9a03      	ldr	r2, [sp, #12]
 8007850:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007854:	3304      	adds	r3, #4
 8007856:	f1b9 0f00 	cmp.w	r9, #0
 800785a:	d021      	beq.n	80078a0 <__multiply+0x144>
 800785c:	6829      	ldr	r1, [r5, #0]
 800785e:	f104 0c14 	add.w	ip, r4, #20
 8007862:	46ae      	mov	lr, r5
 8007864:	f04f 0a00 	mov.w	sl, #0
 8007868:	f8bc b000 	ldrh.w	fp, [ip]
 800786c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007870:	fb09 220b 	mla	r2, r9, fp, r2
 8007874:	4452      	add	r2, sl
 8007876:	b289      	uxth	r1, r1
 8007878:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800787c:	f84e 1b04 	str.w	r1, [lr], #4
 8007880:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007884:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007888:	f8be 1000 	ldrh.w	r1, [lr]
 800788c:	fb09 110a 	mla	r1, r9, sl, r1
 8007890:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007894:	4567      	cmp	r7, ip
 8007896:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800789a:	d8e5      	bhi.n	8007868 <__multiply+0x10c>
 800789c:	9a01      	ldr	r2, [sp, #4]
 800789e:	50a9      	str	r1, [r5, r2]
 80078a0:	3504      	adds	r5, #4
 80078a2:	e799      	b.n	80077d8 <__multiply+0x7c>
 80078a4:	3e01      	subs	r6, #1
 80078a6:	e79b      	b.n	80077e0 <__multiply+0x84>
 80078a8:	080088b0 	.word	0x080088b0
 80078ac:	080088c1 	.word	0x080088c1

080078b0 <__pow5mult>:
 80078b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078b4:	4615      	mov	r5, r2
 80078b6:	f012 0203 	ands.w	r2, r2, #3
 80078ba:	4606      	mov	r6, r0
 80078bc:	460f      	mov	r7, r1
 80078be:	d007      	beq.n	80078d0 <__pow5mult+0x20>
 80078c0:	4c25      	ldr	r4, [pc, #148]	; (8007958 <__pow5mult+0xa8>)
 80078c2:	3a01      	subs	r2, #1
 80078c4:	2300      	movs	r3, #0
 80078c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80078ca:	f7ff fe9d 	bl	8007608 <__multadd>
 80078ce:	4607      	mov	r7, r0
 80078d0:	10ad      	asrs	r5, r5, #2
 80078d2:	d03d      	beq.n	8007950 <__pow5mult+0xa0>
 80078d4:	69f4      	ldr	r4, [r6, #28]
 80078d6:	b97c      	cbnz	r4, 80078f8 <__pow5mult+0x48>
 80078d8:	2010      	movs	r0, #16
 80078da:	f7ff fd7f 	bl	80073dc <malloc>
 80078de:	4602      	mov	r2, r0
 80078e0:	61f0      	str	r0, [r6, #28]
 80078e2:	b928      	cbnz	r0, 80078f0 <__pow5mult+0x40>
 80078e4:	4b1d      	ldr	r3, [pc, #116]	; (800795c <__pow5mult+0xac>)
 80078e6:	481e      	ldr	r0, [pc, #120]	; (8007960 <__pow5mult+0xb0>)
 80078e8:	f240 11b3 	movw	r1, #435	; 0x1b3
 80078ec:	f000 fbe4 	bl	80080b8 <__assert_func>
 80078f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80078f4:	6004      	str	r4, [r0, #0]
 80078f6:	60c4      	str	r4, [r0, #12]
 80078f8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80078fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007900:	b94c      	cbnz	r4, 8007916 <__pow5mult+0x66>
 8007902:	f240 2171 	movw	r1, #625	; 0x271
 8007906:	4630      	mov	r0, r6
 8007908:	f7ff ff12 	bl	8007730 <__i2b>
 800790c:	2300      	movs	r3, #0
 800790e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007912:	4604      	mov	r4, r0
 8007914:	6003      	str	r3, [r0, #0]
 8007916:	f04f 0900 	mov.w	r9, #0
 800791a:	07eb      	lsls	r3, r5, #31
 800791c:	d50a      	bpl.n	8007934 <__pow5mult+0x84>
 800791e:	4639      	mov	r1, r7
 8007920:	4622      	mov	r2, r4
 8007922:	4630      	mov	r0, r6
 8007924:	f7ff ff1a 	bl	800775c <__multiply>
 8007928:	4639      	mov	r1, r7
 800792a:	4680      	mov	r8, r0
 800792c:	4630      	mov	r0, r6
 800792e:	f7ff fe49 	bl	80075c4 <_Bfree>
 8007932:	4647      	mov	r7, r8
 8007934:	106d      	asrs	r5, r5, #1
 8007936:	d00b      	beq.n	8007950 <__pow5mult+0xa0>
 8007938:	6820      	ldr	r0, [r4, #0]
 800793a:	b938      	cbnz	r0, 800794c <__pow5mult+0x9c>
 800793c:	4622      	mov	r2, r4
 800793e:	4621      	mov	r1, r4
 8007940:	4630      	mov	r0, r6
 8007942:	f7ff ff0b 	bl	800775c <__multiply>
 8007946:	6020      	str	r0, [r4, #0]
 8007948:	f8c0 9000 	str.w	r9, [r0]
 800794c:	4604      	mov	r4, r0
 800794e:	e7e4      	b.n	800791a <__pow5mult+0x6a>
 8007950:	4638      	mov	r0, r7
 8007952:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007956:	bf00      	nop
 8007958:	08008a10 	.word	0x08008a10
 800795c:	08008841 	.word	0x08008841
 8007960:	080088c1 	.word	0x080088c1

08007964 <__lshift>:
 8007964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007968:	460c      	mov	r4, r1
 800796a:	6849      	ldr	r1, [r1, #4]
 800796c:	6923      	ldr	r3, [r4, #16]
 800796e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007972:	68a3      	ldr	r3, [r4, #8]
 8007974:	4607      	mov	r7, r0
 8007976:	4691      	mov	r9, r2
 8007978:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800797c:	f108 0601 	add.w	r6, r8, #1
 8007980:	42b3      	cmp	r3, r6
 8007982:	db0b      	blt.n	800799c <__lshift+0x38>
 8007984:	4638      	mov	r0, r7
 8007986:	f7ff fddd 	bl	8007544 <_Balloc>
 800798a:	4605      	mov	r5, r0
 800798c:	b948      	cbnz	r0, 80079a2 <__lshift+0x3e>
 800798e:	4602      	mov	r2, r0
 8007990:	4b28      	ldr	r3, [pc, #160]	; (8007a34 <__lshift+0xd0>)
 8007992:	4829      	ldr	r0, [pc, #164]	; (8007a38 <__lshift+0xd4>)
 8007994:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007998:	f000 fb8e 	bl	80080b8 <__assert_func>
 800799c:	3101      	adds	r1, #1
 800799e:	005b      	lsls	r3, r3, #1
 80079a0:	e7ee      	b.n	8007980 <__lshift+0x1c>
 80079a2:	2300      	movs	r3, #0
 80079a4:	f100 0114 	add.w	r1, r0, #20
 80079a8:	f100 0210 	add.w	r2, r0, #16
 80079ac:	4618      	mov	r0, r3
 80079ae:	4553      	cmp	r3, sl
 80079b0:	db33      	blt.n	8007a1a <__lshift+0xb6>
 80079b2:	6920      	ldr	r0, [r4, #16]
 80079b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80079b8:	f104 0314 	add.w	r3, r4, #20
 80079bc:	f019 091f 	ands.w	r9, r9, #31
 80079c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80079c4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80079c8:	d02b      	beq.n	8007a22 <__lshift+0xbe>
 80079ca:	f1c9 0e20 	rsb	lr, r9, #32
 80079ce:	468a      	mov	sl, r1
 80079d0:	2200      	movs	r2, #0
 80079d2:	6818      	ldr	r0, [r3, #0]
 80079d4:	fa00 f009 	lsl.w	r0, r0, r9
 80079d8:	4310      	orrs	r0, r2
 80079da:	f84a 0b04 	str.w	r0, [sl], #4
 80079de:	f853 2b04 	ldr.w	r2, [r3], #4
 80079e2:	459c      	cmp	ip, r3
 80079e4:	fa22 f20e 	lsr.w	r2, r2, lr
 80079e8:	d8f3      	bhi.n	80079d2 <__lshift+0x6e>
 80079ea:	ebac 0304 	sub.w	r3, ip, r4
 80079ee:	3b15      	subs	r3, #21
 80079f0:	f023 0303 	bic.w	r3, r3, #3
 80079f4:	3304      	adds	r3, #4
 80079f6:	f104 0015 	add.w	r0, r4, #21
 80079fa:	4584      	cmp	ip, r0
 80079fc:	bf38      	it	cc
 80079fe:	2304      	movcc	r3, #4
 8007a00:	50ca      	str	r2, [r1, r3]
 8007a02:	b10a      	cbz	r2, 8007a08 <__lshift+0xa4>
 8007a04:	f108 0602 	add.w	r6, r8, #2
 8007a08:	3e01      	subs	r6, #1
 8007a0a:	4638      	mov	r0, r7
 8007a0c:	612e      	str	r6, [r5, #16]
 8007a0e:	4621      	mov	r1, r4
 8007a10:	f7ff fdd8 	bl	80075c4 <_Bfree>
 8007a14:	4628      	mov	r0, r5
 8007a16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a1a:	f842 0f04 	str.w	r0, [r2, #4]!
 8007a1e:	3301      	adds	r3, #1
 8007a20:	e7c5      	b.n	80079ae <__lshift+0x4a>
 8007a22:	3904      	subs	r1, #4
 8007a24:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a28:	f841 2f04 	str.w	r2, [r1, #4]!
 8007a2c:	459c      	cmp	ip, r3
 8007a2e:	d8f9      	bhi.n	8007a24 <__lshift+0xc0>
 8007a30:	e7ea      	b.n	8007a08 <__lshift+0xa4>
 8007a32:	bf00      	nop
 8007a34:	080088b0 	.word	0x080088b0
 8007a38:	080088c1 	.word	0x080088c1

08007a3c <__mcmp>:
 8007a3c:	b530      	push	{r4, r5, lr}
 8007a3e:	6902      	ldr	r2, [r0, #16]
 8007a40:	690c      	ldr	r4, [r1, #16]
 8007a42:	1b12      	subs	r2, r2, r4
 8007a44:	d10e      	bne.n	8007a64 <__mcmp+0x28>
 8007a46:	f100 0314 	add.w	r3, r0, #20
 8007a4a:	3114      	adds	r1, #20
 8007a4c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007a50:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007a54:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007a58:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007a5c:	42a5      	cmp	r5, r4
 8007a5e:	d003      	beq.n	8007a68 <__mcmp+0x2c>
 8007a60:	d305      	bcc.n	8007a6e <__mcmp+0x32>
 8007a62:	2201      	movs	r2, #1
 8007a64:	4610      	mov	r0, r2
 8007a66:	bd30      	pop	{r4, r5, pc}
 8007a68:	4283      	cmp	r3, r0
 8007a6a:	d3f3      	bcc.n	8007a54 <__mcmp+0x18>
 8007a6c:	e7fa      	b.n	8007a64 <__mcmp+0x28>
 8007a6e:	f04f 32ff 	mov.w	r2, #4294967295
 8007a72:	e7f7      	b.n	8007a64 <__mcmp+0x28>

08007a74 <__mdiff>:
 8007a74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a78:	460c      	mov	r4, r1
 8007a7a:	4606      	mov	r6, r0
 8007a7c:	4611      	mov	r1, r2
 8007a7e:	4620      	mov	r0, r4
 8007a80:	4690      	mov	r8, r2
 8007a82:	f7ff ffdb 	bl	8007a3c <__mcmp>
 8007a86:	1e05      	subs	r5, r0, #0
 8007a88:	d110      	bne.n	8007aac <__mdiff+0x38>
 8007a8a:	4629      	mov	r1, r5
 8007a8c:	4630      	mov	r0, r6
 8007a8e:	f7ff fd59 	bl	8007544 <_Balloc>
 8007a92:	b930      	cbnz	r0, 8007aa2 <__mdiff+0x2e>
 8007a94:	4b3a      	ldr	r3, [pc, #232]	; (8007b80 <__mdiff+0x10c>)
 8007a96:	4602      	mov	r2, r0
 8007a98:	f240 2137 	movw	r1, #567	; 0x237
 8007a9c:	4839      	ldr	r0, [pc, #228]	; (8007b84 <__mdiff+0x110>)
 8007a9e:	f000 fb0b 	bl	80080b8 <__assert_func>
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007aa8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007aac:	bfa4      	itt	ge
 8007aae:	4643      	movge	r3, r8
 8007ab0:	46a0      	movge	r8, r4
 8007ab2:	4630      	mov	r0, r6
 8007ab4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007ab8:	bfa6      	itte	ge
 8007aba:	461c      	movge	r4, r3
 8007abc:	2500      	movge	r5, #0
 8007abe:	2501      	movlt	r5, #1
 8007ac0:	f7ff fd40 	bl	8007544 <_Balloc>
 8007ac4:	b920      	cbnz	r0, 8007ad0 <__mdiff+0x5c>
 8007ac6:	4b2e      	ldr	r3, [pc, #184]	; (8007b80 <__mdiff+0x10c>)
 8007ac8:	4602      	mov	r2, r0
 8007aca:	f240 2145 	movw	r1, #581	; 0x245
 8007ace:	e7e5      	b.n	8007a9c <__mdiff+0x28>
 8007ad0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007ad4:	6926      	ldr	r6, [r4, #16]
 8007ad6:	60c5      	str	r5, [r0, #12]
 8007ad8:	f104 0914 	add.w	r9, r4, #20
 8007adc:	f108 0514 	add.w	r5, r8, #20
 8007ae0:	f100 0e14 	add.w	lr, r0, #20
 8007ae4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007ae8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007aec:	f108 0210 	add.w	r2, r8, #16
 8007af0:	46f2      	mov	sl, lr
 8007af2:	2100      	movs	r1, #0
 8007af4:	f859 3b04 	ldr.w	r3, [r9], #4
 8007af8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007afc:	fa11 f88b 	uxtah	r8, r1, fp
 8007b00:	b299      	uxth	r1, r3
 8007b02:	0c1b      	lsrs	r3, r3, #16
 8007b04:	eba8 0801 	sub.w	r8, r8, r1
 8007b08:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007b0c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007b10:	fa1f f888 	uxth.w	r8, r8
 8007b14:	1419      	asrs	r1, r3, #16
 8007b16:	454e      	cmp	r6, r9
 8007b18:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007b1c:	f84a 3b04 	str.w	r3, [sl], #4
 8007b20:	d8e8      	bhi.n	8007af4 <__mdiff+0x80>
 8007b22:	1b33      	subs	r3, r6, r4
 8007b24:	3b15      	subs	r3, #21
 8007b26:	f023 0303 	bic.w	r3, r3, #3
 8007b2a:	3304      	adds	r3, #4
 8007b2c:	3415      	adds	r4, #21
 8007b2e:	42a6      	cmp	r6, r4
 8007b30:	bf38      	it	cc
 8007b32:	2304      	movcc	r3, #4
 8007b34:	441d      	add	r5, r3
 8007b36:	4473      	add	r3, lr
 8007b38:	469e      	mov	lr, r3
 8007b3a:	462e      	mov	r6, r5
 8007b3c:	4566      	cmp	r6, ip
 8007b3e:	d30e      	bcc.n	8007b5e <__mdiff+0xea>
 8007b40:	f10c 0203 	add.w	r2, ip, #3
 8007b44:	1b52      	subs	r2, r2, r5
 8007b46:	f022 0203 	bic.w	r2, r2, #3
 8007b4a:	3d03      	subs	r5, #3
 8007b4c:	45ac      	cmp	ip, r5
 8007b4e:	bf38      	it	cc
 8007b50:	2200      	movcc	r2, #0
 8007b52:	4413      	add	r3, r2
 8007b54:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007b58:	b17a      	cbz	r2, 8007b7a <__mdiff+0x106>
 8007b5a:	6107      	str	r7, [r0, #16]
 8007b5c:	e7a4      	b.n	8007aa8 <__mdiff+0x34>
 8007b5e:	f856 8b04 	ldr.w	r8, [r6], #4
 8007b62:	fa11 f288 	uxtah	r2, r1, r8
 8007b66:	1414      	asrs	r4, r2, #16
 8007b68:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007b6c:	b292      	uxth	r2, r2
 8007b6e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007b72:	f84e 2b04 	str.w	r2, [lr], #4
 8007b76:	1421      	asrs	r1, r4, #16
 8007b78:	e7e0      	b.n	8007b3c <__mdiff+0xc8>
 8007b7a:	3f01      	subs	r7, #1
 8007b7c:	e7ea      	b.n	8007b54 <__mdiff+0xe0>
 8007b7e:	bf00      	nop
 8007b80:	080088b0 	.word	0x080088b0
 8007b84:	080088c1 	.word	0x080088c1

08007b88 <__d2b>:
 8007b88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007b8c:	460f      	mov	r7, r1
 8007b8e:	2101      	movs	r1, #1
 8007b90:	ec59 8b10 	vmov	r8, r9, d0
 8007b94:	4616      	mov	r6, r2
 8007b96:	f7ff fcd5 	bl	8007544 <_Balloc>
 8007b9a:	4604      	mov	r4, r0
 8007b9c:	b930      	cbnz	r0, 8007bac <__d2b+0x24>
 8007b9e:	4602      	mov	r2, r0
 8007ba0:	4b24      	ldr	r3, [pc, #144]	; (8007c34 <__d2b+0xac>)
 8007ba2:	4825      	ldr	r0, [pc, #148]	; (8007c38 <__d2b+0xb0>)
 8007ba4:	f240 310f 	movw	r1, #783	; 0x30f
 8007ba8:	f000 fa86 	bl	80080b8 <__assert_func>
 8007bac:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007bb0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007bb4:	bb2d      	cbnz	r5, 8007c02 <__d2b+0x7a>
 8007bb6:	9301      	str	r3, [sp, #4]
 8007bb8:	f1b8 0300 	subs.w	r3, r8, #0
 8007bbc:	d026      	beq.n	8007c0c <__d2b+0x84>
 8007bbe:	4668      	mov	r0, sp
 8007bc0:	9300      	str	r3, [sp, #0]
 8007bc2:	f7ff fd87 	bl	80076d4 <__lo0bits>
 8007bc6:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007bca:	b1e8      	cbz	r0, 8007c08 <__d2b+0x80>
 8007bcc:	f1c0 0320 	rsb	r3, r0, #32
 8007bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8007bd4:	430b      	orrs	r3, r1
 8007bd6:	40c2      	lsrs	r2, r0
 8007bd8:	6163      	str	r3, [r4, #20]
 8007bda:	9201      	str	r2, [sp, #4]
 8007bdc:	9b01      	ldr	r3, [sp, #4]
 8007bde:	61a3      	str	r3, [r4, #24]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	bf14      	ite	ne
 8007be4:	2202      	movne	r2, #2
 8007be6:	2201      	moveq	r2, #1
 8007be8:	6122      	str	r2, [r4, #16]
 8007bea:	b1bd      	cbz	r5, 8007c1c <__d2b+0x94>
 8007bec:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007bf0:	4405      	add	r5, r0
 8007bf2:	603d      	str	r5, [r7, #0]
 8007bf4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007bf8:	6030      	str	r0, [r6, #0]
 8007bfa:	4620      	mov	r0, r4
 8007bfc:	b003      	add	sp, #12
 8007bfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007c02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007c06:	e7d6      	b.n	8007bb6 <__d2b+0x2e>
 8007c08:	6161      	str	r1, [r4, #20]
 8007c0a:	e7e7      	b.n	8007bdc <__d2b+0x54>
 8007c0c:	a801      	add	r0, sp, #4
 8007c0e:	f7ff fd61 	bl	80076d4 <__lo0bits>
 8007c12:	9b01      	ldr	r3, [sp, #4]
 8007c14:	6163      	str	r3, [r4, #20]
 8007c16:	3020      	adds	r0, #32
 8007c18:	2201      	movs	r2, #1
 8007c1a:	e7e5      	b.n	8007be8 <__d2b+0x60>
 8007c1c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007c20:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007c24:	6038      	str	r0, [r7, #0]
 8007c26:	6918      	ldr	r0, [r3, #16]
 8007c28:	f7ff fd34 	bl	8007694 <__hi0bits>
 8007c2c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007c30:	e7e2      	b.n	8007bf8 <__d2b+0x70>
 8007c32:	bf00      	nop
 8007c34:	080088b0 	.word	0x080088b0
 8007c38:	080088c1 	.word	0x080088c1

08007c3c <__ssputs_r>:
 8007c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c40:	688e      	ldr	r6, [r1, #8]
 8007c42:	461f      	mov	r7, r3
 8007c44:	42be      	cmp	r6, r7
 8007c46:	680b      	ldr	r3, [r1, #0]
 8007c48:	4682      	mov	sl, r0
 8007c4a:	460c      	mov	r4, r1
 8007c4c:	4690      	mov	r8, r2
 8007c4e:	d82c      	bhi.n	8007caa <__ssputs_r+0x6e>
 8007c50:	898a      	ldrh	r2, [r1, #12]
 8007c52:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007c56:	d026      	beq.n	8007ca6 <__ssputs_r+0x6a>
 8007c58:	6965      	ldr	r5, [r4, #20]
 8007c5a:	6909      	ldr	r1, [r1, #16]
 8007c5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007c60:	eba3 0901 	sub.w	r9, r3, r1
 8007c64:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007c68:	1c7b      	adds	r3, r7, #1
 8007c6a:	444b      	add	r3, r9
 8007c6c:	106d      	asrs	r5, r5, #1
 8007c6e:	429d      	cmp	r5, r3
 8007c70:	bf38      	it	cc
 8007c72:	461d      	movcc	r5, r3
 8007c74:	0553      	lsls	r3, r2, #21
 8007c76:	d527      	bpl.n	8007cc8 <__ssputs_r+0x8c>
 8007c78:	4629      	mov	r1, r5
 8007c7a:	f7ff fbd7 	bl	800742c <_malloc_r>
 8007c7e:	4606      	mov	r6, r0
 8007c80:	b360      	cbz	r0, 8007cdc <__ssputs_r+0xa0>
 8007c82:	6921      	ldr	r1, [r4, #16]
 8007c84:	464a      	mov	r2, r9
 8007c86:	f000 fa09 	bl	800809c <memcpy>
 8007c8a:	89a3      	ldrh	r3, [r4, #12]
 8007c8c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007c90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c94:	81a3      	strh	r3, [r4, #12]
 8007c96:	6126      	str	r6, [r4, #16]
 8007c98:	6165      	str	r5, [r4, #20]
 8007c9a:	444e      	add	r6, r9
 8007c9c:	eba5 0509 	sub.w	r5, r5, r9
 8007ca0:	6026      	str	r6, [r4, #0]
 8007ca2:	60a5      	str	r5, [r4, #8]
 8007ca4:	463e      	mov	r6, r7
 8007ca6:	42be      	cmp	r6, r7
 8007ca8:	d900      	bls.n	8007cac <__ssputs_r+0x70>
 8007caa:	463e      	mov	r6, r7
 8007cac:	6820      	ldr	r0, [r4, #0]
 8007cae:	4632      	mov	r2, r6
 8007cb0:	4641      	mov	r1, r8
 8007cb2:	f000 f9c9 	bl	8008048 <memmove>
 8007cb6:	68a3      	ldr	r3, [r4, #8]
 8007cb8:	1b9b      	subs	r3, r3, r6
 8007cba:	60a3      	str	r3, [r4, #8]
 8007cbc:	6823      	ldr	r3, [r4, #0]
 8007cbe:	4433      	add	r3, r6
 8007cc0:	6023      	str	r3, [r4, #0]
 8007cc2:	2000      	movs	r0, #0
 8007cc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cc8:	462a      	mov	r2, r5
 8007cca:	f000 fa3b 	bl	8008144 <_realloc_r>
 8007cce:	4606      	mov	r6, r0
 8007cd0:	2800      	cmp	r0, #0
 8007cd2:	d1e0      	bne.n	8007c96 <__ssputs_r+0x5a>
 8007cd4:	6921      	ldr	r1, [r4, #16]
 8007cd6:	4650      	mov	r0, sl
 8007cd8:	f7ff fb34 	bl	8007344 <_free_r>
 8007cdc:	230c      	movs	r3, #12
 8007cde:	f8ca 3000 	str.w	r3, [sl]
 8007ce2:	89a3      	ldrh	r3, [r4, #12]
 8007ce4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ce8:	81a3      	strh	r3, [r4, #12]
 8007cea:	f04f 30ff 	mov.w	r0, #4294967295
 8007cee:	e7e9      	b.n	8007cc4 <__ssputs_r+0x88>

08007cf0 <_svfiprintf_r>:
 8007cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cf4:	4698      	mov	r8, r3
 8007cf6:	898b      	ldrh	r3, [r1, #12]
 8007cf8:	061b      	lsls	r3, r3, #24
 8007cfa:	b09d      	sub	sp, #116	; 0x74
 8007cfc:	4607      	mov	r7, r0
 8007cfe:	460d      	mov	r5, r1
 8007d00:	4614      	mov	r4, r2
 8007d02:	d50e      	bpl.n	8007d22 <_svfiprintf_r+0x32>
 8007d04:	690b      	ldr	r3, [r1, #16]
 8007d06:	b963      	cbnz	r3, 8007d22 <_svfiprintf_r+0x32>
 8007d08:	2140      	movs	r1, #64	; 0x40
 8007d0a:	f7ff fb8f 	bl	800742c <_malloc_r>
 8007d0e:	6028      	str	r0, [r5, #0]
 8007d10:	6128      	str	r0, [r5, #16]
 8007d12:	b920      	cbnz	r0, 8007d1e <_svfiprintf_r+0x2e>
 8007d14:	230c      	movs	r3, #12
 8007d16:	603b      	str	r3, [r7, #0]
 8007d18:	f04f 30ff 	mov.w	r0, #4294967295
 8007d1c:	e0d0      	b.n	8007ec0 <_svfiprintf_r+0x1d0>
 8007d1e:	2340      	movs	r3, #64	; 0x40
 8007d20:	616b      	str	r3, [r5, #20]
 8007d22:	2300      	movs	r3, #0
 8007d24:	9309      	str	r3, [sp, #36]	; 0x24
 8007d26:	2320      	movs	r3, #32
 8007d28:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d2c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d30:	2330      	movs	r3, #48	; 0x30
 8007d32:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007ed8 <_svfiprintf_r+0x1e8>
 8007d36:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007d3a:	f04f 0901 	mov.w	r9, #1
 8007d3e:	4623      	mov	r3, r4
 8007d40:	469a      	mov	sl, r3
 8007d42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d46:	b10a      	cbz	r2, 8007d4c <_svfiprintf_r+0x5c>
 8007d48:	2a25      	cmp	r2, #37	; 0x25
 8007d4a:	d1f9      	bne.n	8007d40 <_svfiprintf_r+0x50>
 8007d4c:	ebba 0b04 	subs.w	fp, sl, r4
 8007d50:	d00b      	beq.n	8007d6a <_svfiprintf_r+0x7a>
 8007d52:	465b      	mov	r3, fp
 8007d54:	4622      	mov	r2, r4
 8007d56:	4629      	mov	r1, r5
 8007d58:	4638      	mov	r0, r7
 8007d5a:	f7ff ff6f 	bl	8007c3c <__ssputs_r>
 8007d5e:	3001      	adds	r0, #1
 8007d60:	f000 80a9 	beq.w	8007eb6 <_svfiprintf_r+0x1c6>
 8007d64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d66:	445a      	add	r2, fp
 8007d68:	9209      	str	r2, [sp, #36]	; 0x24
 8007d6a:	f89a 3000 	ldrb.w	r3, [sl]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	f000 80a1 	beq.w	8007eb6 <_svfiprintf_r+0x1c6>
 8007d74:	2300      	movs	r3, #0
 8007d76:	f04f 32ff 	mov.w	r2, #4294967295
 8007d7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d7e:	f10a 0a01 	add.w	sl, sl, #1
 8007d82:	9304      	str	r3, [sp, #16]
 8007d84:	9307      	str	r3, [sp, #28]
 8007d86:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007d8a:	931a      	str	r3, [sp, #104]	; 0x68
 8007d8c:	4654      	mov	r4, sl
 8007d8e:	2205      	movs	r2, #5
 8007d90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d94:	4850      	ldr	r0, [pc, #320]	; (8007ed8 <_svfiprintf_r+0x1e8>)
 8007d96:	f7f8 fa43 	bl	8000220 <memchr>
 8007d9a:	9a04      	ldr	r2, [sp, #16]
 8007d9c:	b9d8      	cbnz	r0, 8007dd6 <_svfiprintf_r+0xe6>
 8007d9e:	06d0      	lsls	r0, r2, #27
 8007da0:	bf44      	itt	mi
 8007da2:	2320      	movmi	r3, #32
 8007da4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007da8:	0711      	lsls	r1, r2, #28
 8007daa:	bf44      	itt	mi
 8007dac:	232b      	movmi	r3, #43	; 0x2b
 8007dae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007db2:	f89a 3000 	ldrb.w	r3, [sl]
 8007db6:	2b2a      	cmp	r3, #42	; 0x2a
 8007db8:	d015      	beq.n	8007de6 <_svfiprintf_r+0xf6>
 8007dba:	9a07      	ldr	r2, [sp, #28]
 8007dbc:	4654      	mov	r4, sl
 8007dbe:	2000      	movs	r0, #0
 8007dc0:	f04f 0c0a 	mov.w	ip, #10
 8007dc4:	4621      	mov	r1, r4
 8007dc6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007dca:	3b30      	subs	r3, #48	; 0x30
 8007dcc:	2b09      	cmp	r3, #9
 8007dce:	d94d      	bls.n	8007e6c <_svfiprintf_r+0x17c>
 8007dd0:	b1b0      	cbz	r0, 8007e00 <_svfiprintf_r+0x110>
 8007dd2:	9207      	str	r2, [sp, #28]
 8007dd4:	e014      	b.n	8007e00 <_svfiprintf_r+0x110>
 8007dd6:	eba0 0308 	sub.w	r3, r0, r8
 8007dda:	fa09 f303 	lsl.w	r3, r9, r3
 8007dde:	4313      	orrs	r3, r2
 8007de0:	9304      	str	r3, [sp, #16]
 8007de2:	46a2      	mov	sl, r4
 8007de4:	e7d2      	b.n	8007d8c <_svfiprintf_r+0x9c>
 8007de6:	9b03      	ldr	r3, [sp, #12]
 8007de8:	1d19      	adds	r1, r3, #4
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	9103      	str	r1, [sp, #12]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	bfbb      	ittet	lt
 8007df2:	425b      	neglt	r3, r3
 8007df4:	f042 0202 	orrlt.w	r2, r2, #2
 8007df8:	9307      	strge	r3, [sp, #28]
 8007dfa:	9307      	strlt	r3, [sp, #28]
 8007dfc:	bfb8      	it	lt
 8007dfe:	9204      	strlt	r2, [sp, #16]
 8007e00:	7823      	ldrb	r3, [r4, #0]
 8007e02:	2b2e      	cmp	r3, #46	; 0x2e
 8007e04:	d10c      	bne.n	8007e20 <_svfiprintf_r+0x130>
 8007e06:	7863      	ldrb	r3, [r4, #1]
 8007e08:	2b2a      	cmp	r3, #42	; 0x2a
 8007e0a:	d134      	bne.n	8007e76 <_svfiprintf_r+0x186>
 8007e0c:	9b03      	ldr	r3, [sp, #12]
 8007e0e:	1d1a      	adds	r2, r3, #4
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	9203      	str	r2, [sp, #12]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	bfb8      	it	lt
 8007e18:	f04f 33ff 	movlt.w	r3, #4294967295
 8007e1c:	3402      	adds	r4, #2
 8007e1e:	9305      	str	r3, [sp, #20]
 8007e20:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007ee8 <_svfiprintf_r+0x1f8>
 8007e24:	7821      	ldrb	r1, [r4, #0]
 8007e26:	2203      	movs	r2, #3
 8007e28:	4650      	mov	r0, sl
 8007e2a:	f7f8 f9f9 	bl	8000220 <memchr>
 8007e2e:	b138      	cbz	r0, 8007e40 <_svfiprintf_r+0x150>
 8007e30:	9b04      	ldr	r3, [sp, #16]
 8007e32:	eba0 000a 	sub.w	r0, r0, sl
 8007e36:	2240      	movs	r2, #64	; 0x40
 8007e38:	4082      	lsls	r2, r0
 8007e3a:	4313      	orrs	r3, r2
 8007e3c:	3401      	adds	r4, #1
 8007e3e:	9304      	str	r3, [sp, #16]
 8007e40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e44:	4825      	ldr	r0, [pc, #148]	; (8007edc <_svfiprintf_r+0x1ec>)
 8007e46:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007e4a:	2206      	movs	r2, #6
 8007e4c:	f7f8 f9e8 	bl	8000220 <memchr>
 8007e50:	2800      	cmp	r0, #0
 8007e52:	d038      	beq.n	8007ec6 <_svfiprintf_r+0x1d6>
 8007e54:	4b22      	ldr	r3, [pc, #136]	; (8007ee0 <_svfiprintf_r+0x1f0>)
 8007e56:	bb1b      	cbnz	r3, 8007ea0 <_svfiprintf_r+0x1b0>
 8007e58:	9b03      	ldr	r3, [sp, #12]
 8007e5a:	3307      	adds	r3, #7
 8007e5c:	f023 0307 	bic.w	r3, r3, #7
 8007e60:	3308      	adds	r3, #8
 8007e62:	9303      	str	r3, [sp, #12]
 8007e64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e66:	4433      	add	r3, r6
 8007e68:	9309      	str	r3, [sp, #36]	; 0x24
 8007e6a:	e768      	b.n	8007d3e <_svfiprintf_r+0x4e>
 8007e6c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e70:	460c      	mov	r4, r1
 8007e72:	2001      	movs	r0, #1
 8007e74:	e7a6      	b.n	8007dc4 <_svfiprintf_r+0xd4>
 8007e76:	2300      	movs	r3, #0
 8007e78:	3401      	adds	r4, #1
 8007e7a:	9305      	str	r3, [sp, #20]
 8007e7c:	4619      	mov	r1, r3
 8007e7e:	f04f 0c0a 	mov.w	ip, #10
 8007e82:	4620      	mov	r0, r4
 8007e84:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e88:	3a30      	subs	r2, #48	; 0x30
 8007e8a:	2a09      	cmp	r2, #9
 8007e8c:	d903      	bls.n	8007e96 <_svfiprintf_r+0x1a6>
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d0c6      	beq.n	8007e20 <_svfiprintf_r+0x130>
 8007e92:	9105      	str	r1, [sp, #20]
 8007e94:	e7c4      	b.n	8007e20 <_svfiprintf_r+0x130>
 8007e96:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e9a:	4604      	mov	r4, r0
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	e7f0      	b.n	8007e82 <_svfiprintf_r+0x192>
 8007ea0:	ab03      	add	r3, sp, #12
 8007ea2:	9300      	str	r3, [sp, #0]
 8007ea4:	462a      	mov	r2, r5
 8007ea6:	4b0f      	ldr	r3, [pc, #60]	; (8007ee4 <_svfiprintf_r+0x1f4>)
 8007ea8:	a904      	add	r1, sp, #16
 8007eaa:	4638      	mov	r0, r7
 8007eac:	f7fd fe64 	bl	8005b78 <_printf_float>
 8007eb0:	1c42      	adds	r2, r0, #1
 8007eb2:	4606      	mov	r6, r0
 8007eb4:	d1d6      	bne.n	8007e64 <_svfiprintf_r+0x174>
 8007eb6:	89ab      	ldrh	r3, [r5, #12]
 8007eb8:	065b      	lsls	r3, r3, #25
 8007eba:	f53f af2d 	bmi.w	8007d18 <_svfiprintf_r+0x28>
 8007ebe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ec0:	b01d      	add	sp, #116	; 0x74
 8007ec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ec6:	ab03      	add	r3, sp, #12
 8007ec8:	9300      	str	r3, [sp, #0]
 8007eca:	462a      	mov	r2, r5
 8007ecc:	4b05      	ldr	r3, [pc, #20]	; (8007ee4 <_svfiprintf_r+0x1f4>)
 8007ece:	a904      	add	r1, sp, #16
 8007ed0:	4638      	mov	r0, r7
 8007ed2:	f7fe f8f5 	bl	80060c0 <_printf_i>
 8007ed6:	e7eb      	b.n	8007eb0 <_svfiprintf_r+0x1c0>
 8007ed8:	08008a1c 	.word	0x08008a1c
 8007edc:	08008a26 	.word	0x08008a26
 8007ee0:	08005b79 	.word	0x08005b79
 8007ee4:	08007c3d 	.word	0x08007c3d
 8007ee8:	08008a22 	.word	0x08008a22

08007eec <__sflush_r>:
 8007eec:	898a      	ldrh	r2, [r1, #12]
 8007eee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ef2:	4605      	mov	r5, r0
 8007ef4:	0710      	lsls	r0, r2, #28
 8007ef6:	460c      	mov	r4, r1
 8007ef8:	d458      	bmi.n	8007fac <__sflush_r+0xc0>
 8007efa:	684b      	ldr	r3, [r1, #4]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	dc05      	bgt.n	8007f0c <__sflush_r+0x20>
 8007f00:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	dc02      	bgt.n	8007f0c <__sflush_r+0x20>
 8007f06:	2000      	movs	r0, #0
 8007f08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f0e:	2e00      	cmp	r6, #0
 8007f10:	d0f9      	beq.n	8007f06 <__sflush_r+0x1a>
 8007f12:	2300      	movs	r3, #0
 8007f14:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007f18:	682f      	ldr	r7, [r5, #0]
 8007f1a:	6a21      	ldr	r1, [r4, #32]
 8007f1c:	602b      	str	r3, [r5, #0]
 8007f1e:	d032      	beq.n	8007f86 <__sflush_r+0x9a>
 8007f20:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007f22:	89a3      	ldrh	r3, [r4, #12]
 8007f24:	075a      	lsls	r2, r3, #29
 8007f26:	d505      	bpl.n	8007f34 <__sflush_r+0x48>
 8007f28:	6863      	ldr	r3, [r4, #4]
 8007f2a:	1ac0      	subs	r0, r0, r3
 8007f2c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007f2e:	b10b      	cbz	r3, 8007f34 <__sflush_r+0x48>
 8007f30:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007f32:	1ac0      	subs	r0, r0, r3
 8007f34:	2300      	movs	r3, #0
 8007f36:	4602      	mov	r2, r0
 8007f38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f3a:	6a21      	ldr	r1, [r4, #32]
 8007f3c:	4628      	mov	r0, r5
 8007f3e:	47b0      	blx	r6
 8007f40:	1c43      	adds	r3, r0, #1
 8007f42:	89a3      	ldrh	r3, [r4, #12]
 8007f44:	d106      	bne.n	8007f54 <__sflush_r+0x68>
 8007f46:	6829      	ldr	r1, [r5, #0]
 8007f48:	291d      	cmp	r1, #29
 8007f4a:	d82b      	bhi.n	8007fa4 <__sflush_r+0xb8>
 8007f4c:	4a29      	ldr	r2, [pc, #164]	; (8007ff4 <__sflush_r+0x108>)
 8007f4e:	410a      	asrs	r2, r1
 8007f50:	07d6      	lsls	r6, r2, #31
 8007f52:	d427      	bmi.n	8007fa4 <__sflush_r+0xb8>
 8007f54:	2200      	movs	r2, #0
 8007f56:	6062      	str	r2, [r4, #4]
 8007f58:	04d9      	lsls	r1, r3, #19
 8007f5a:	6922      	ldr	r2, [r4, #16]
 8007f5c:	6022      	str	r2, [r4, #0]
 8007f5e:	d504      	bpl.n	8007f6a <__sflush_r+0x7e>
 8007f60:	1c42      	adds	r2, r0, #1
 8007f62:	d101      	bne.n	8007f68 <__sflush_r+0x7c>
 8007f64:	682b      	ldr	r3, [r5, #0]
 8007f66:	b903      	cbnz	r3, 8007f6a <__sflush_r+0x7e>
 8007f68:	6560      	str	r0, [r4, #84]	; 0x54
 8007f6a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f6c:	602f      	str	r7, [r5, #0]
 8007f6e:	2900      	cmp	r1, #0
 8007f70:	d0c9      	beq.n	8007f06 <__sflush_r+0x1a>
 8007f72:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007f76:	4299      	cmp	r1, r3
 8007f78:	d002      	beq.n	8007f80 <__sflush_r+0x94>
 8007f7a:	4628      	mov	r0, r5
 8007f7c:	f7ff f9e2 	bl	8007344 <_free_r>
 8007f80:	2000      	movs	r0, #0
 8007f82:	6360      	str	r0, [r4, #52]	; 0x34
 8007f84:	e7c0      	b.n	8007f08 <__sflush_r+0x1c>
 8007f86:	2301      	movs	r3, #1
 8007f88:	4628      	mov	r0, r5
 8007f8a:	47b0      	blx	r6
 8007f8c:	1c41      	adds	r1, r0, #1
 8007f8e:	d1c8      	bne.n	8007f22 <__sflush_r+0x36>
 8007f90:	682b      	ldr	r3, [r5, #0]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d0c5      	beq.n	8007f22 <__sflush_r+0x36>
 8007f96:	2b1d      	cmp	r3, #29
 8007f98:	d001      	beq.n	8007f9e <__sflush_r+0xb2>
 8007f9a:	2b16      	cmp	r3, #22
 8007f9c:	d101      	bne.n	8007fa2 <__sflush_r+0xb6>
 8007f9e:	602f      	str	r7, [r5, #0]
 8007fa0:	e7b1      	b.n	8007f06 <__sflush_r+0x1a>
 8007fa2:	89a3      	ldrh	r3, [r4, #12]
 8007fa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fa8:	81a3      	strh	r3, [r4, #12]
 8007faa:	e7ad      	b.n	8007f08 <__sflush_r+0x1c>
 8007fac:	690f      	ldr	r7, [r1, #16]
 8007fae:	2f00      	cmp	r7, #0
 8007fb0:	d0a9      	beq.n	8007f06 <__sflush_r+0x1a>
 8007fb2:	0793      	lsls	r3, r2, #30
 8007fb4:	680e      	ldr	r6, [r1, #0]
 8007fb6:	bf08      	it	eq
 8007fb8:	694b      	ldreq	r3, [r1, #20]
 8007fba:	600f      	str	r7, [r1, #0]
 8007fbc:	bf18      	it	ne
 8007fbe:	2300      	movne	r3, #0
 8007fc0:	eba6 0807 	sub.w	r8, r6, r7
 8007fc4:	608b      	str	r3, [r1, #8]
 8007fc6:	f1b8 0f00 	cmp.w	r8, #0
 8007fca:	dd9c      	ble.n	8007f06 <__sflush_r+0x1a>
 8007fcc:	6a21      	ldr	r1, [r4, #32]
 8007fce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007fd0:	4643      	mov	r3, r8
 8007fd2:	463a      	mov	r2, r7
 8007fd4:	4628      	mov	r0, r5
 8007fd6:	47b0      	blx	r6
 8007fd8:	2800      	cmp	r0, #0
 8007fda:	dc06      	bgt.n	8007fea <__sflush_r+0xfe>
 8007fdc:	89a3      	ldrh	r3, [r4, #12]
 8007fde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fe2:	81a3      	strh	r3, [r4, #12]
 8007fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8007fe8:	e78e      	b.n	8007f08 <__sflush_r+0x1c>
 8007fea:	4407      	add	r7, r0
 8007fec:	eba8 0800 	sub.w	r8, r8, r0
 8007ff0:	e7e9      	b.n	8007fc6 <__sflush_r+0xda>
 8007ff2:	bf00      	nop
 8007ff4:	dfbffffe 	.word	0xdfbffffe

08007ff8 <_fflush_r>:
 8007ff8:	b538      	push	{r3, r4, r5, lr}
 8007ffa:	690b      	ldr	r3, [r1, #16]
 8007ffc:	4605      	mov	r5, r0
 8007ffe:	460c      	mov	r4, r1
 8008000:	b913      	cbnz	r3, 8008008 <_fflush_r+0x10>
 8008002:	2500      	movs	r5, #0
 8008004:	4628      	mov	r0, r5
 8008006:	bd38      	pop	{r3, r4, r5, pc}
 8008008:	b118      	cbz	r0, 8008012 <_fflush_r+0x1a>
 800800a:	6a03      	ldr	r3, [r0, #32]
 800800c:	b90b      	cbnz	r3, 8008012 <_fflush_r+0x1a>
 800800e:	f7fe fa05 	bl	800641c <__sinit>
 8008012:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d0f3      	beq.n	8008002 <_fflush_r+0xa>
 800801a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800801c:	07d0      	lsls	r0, r2, #31
 800801e:	d404      	bmi.n	800802a <_fflush_r+0x32>
 8008020:	0599      	lsls	r1, r3, #22
 8008022:	d402      	bmi.n	800802a <_fflush_r+0x32>
 8008024:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008026:	f7fe fb10 	bl	800664a <__retarget_lock_acquire_recursive>
 800802a:	4628      	mov	r0, r5
 800802c:	4621      	mov	r1, r4
 800802e:	f7ff ff5d 	bl	8007eec <__sflush_r>
 8008032:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008034:	07da      	lsls	r2, r3, #31
 8008036:	4605      	mov	r5, r0
 8008038:	d4e4      	bmi.n	8008004 <_fflush_r+0xc>
 800803a:	89a3      	ldrh	r3, [r4, #12]
 800803c:	059b      	lsls	r3, r3, #22
 800803e:	d4e1      	bmi.n	8008004 <_fflush_r+0xc>
 8008040:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008042:	f7fe fb03 	bl	800664c <__retarget_lock_release_recursive>
 8008046:	e7dd      	b.n	8008004 <_fflush_r+0xc>

08008048 <memmove>:
 8008048:	4288      	cmp	r0, r1
 800804a:	b510      	push	{r4, lr}
 800804c:	eb01 0402 	add.w	r4, r1, r2
 8008050:	d902      	bls.n	8008058 <memmove+0x10>
 8008052:	4284      	cmp	r4, r0
 8008054:	4623      	mov	r3, r4
 8008056:	d807      	bhi.n	8008068 <memmove+0x20>
 8008058:	1e43      	subs	r3, r0, #1
 800805a:	42a1      	cmp	r1, r4
 800805c:	d008      	beq.n	8008070 <memmove+0x28>
 800805e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008062:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008066:	e7f8      	b.n	800805a <memmove+0x12>
 8008068:	4402      	add	r2, r0
 800806a:	4601      	mov	r1, r0
 800806c:	428a      	cmp	r2, r1
 800806e:	d100      	bne.n	8008072 <memmove+0x2a>
 8008070:	bd10      	pop	{r4, pc}
 8008072:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008076:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800807a:	e7f7      	b.n	800806c <memmove+0x24>

0800807c <_sbrk_r>:
 800807c:	b538      	push	{r3, r4, r5, lr}
 800807e:	4d06      	ldr	r5, [pc, #24]	; (8008098 <_sbrk_r+0x1c>)
 8008080:	2300      	movs	r3, #0
 8008082:	4604      	mov	r4, r0
 8008084:	4608      	mov	r0, r1
 8008086:	602b      	str	r3, [r5, #0]
 8008088:	f7f9 fe62 	bl	8001d50 <_sbrk>
 800808c:	1c43      	adds	r3, r0, #1
 800808e:	d102      	bne.n	8008096 <_sbrk_r+0x1a>
 8008090:	682b      	ldr	r3, [r5, #0]
 8008092:	b103      	cbz	r3, 8008096 <_sbrk_r+0x1a>
 8008094:	6023      	str	r3, [r4, #0]
 8008096:	bd38      	pop	{r3, r4, r5, pc}
 8008098:	20000af8 	.word	0x20000af8

0800809c <memcpy>:
 800809c:	440a      	add	r2, r1
 800809e:	4291      	cmp	r1, r2
 80080a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80080a4:	d100      	bne.n	80080a8 <memcpy+0xc>
 80080a6:	4770      	bx	lr
 80080a8:	b510      	push	{r4, lr}
 80080aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80080b2:	4291      	cmp	r1, r2
 80080b4:	d1f9      	bne.n	80080aa <memcpy+0xe>
 80080b6:	bd10      	pop	{r4, pc}

080080b8 <__assert_func>:
 80080b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80080ba:	4614      	mov	r4, r2
 80080bc:	461a      	mov	r2, r3
 80080be:	4b09      	ldr	r3, [pc, #36]	; (80080e4 <__assert_func+0x2c>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	4605      	mov	r5, r0
 80080c4:	68d8      	ldr	r0, [r3, #12]
 80080c6:	b14c      	cbz	r4, 80080dc <__assert_func+0x24>
 80080c8:	4b07      	ldr	r3, [pc, #28]	; (80080e8 <__assert_func+0x30>)
 80080ca:	9100      	str	r1, [sp, #0]
 80080cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80080d0:	4906      	ldr	r1, [pc, #24]	; (80080ec <__assert_func+0x34>)
 80080d2:	462b      	mov	r3, r5
 80080d4:	f000 f872 	bl	80081bc <fiprintf>
 80080d8:	f000 f882 	bl	80081e0 <abort>
 80080dc:	4b04      	ldr	r3, [pc, #16]	; (80080f0 <__assert_func+0x38>)
 80080de:	461c      	mov	r4, r3
 80080e0:	e7f3      	b.n	80080ca <__assert_func+0x12>
 80080e2:	bf00      	nop
 80080e4:	20000064 	.word	0x20000064
 80080e8:	08008a37 	.word	0x08008a37
 80080ec:	08008a44 	.word	0x08008a44
 80080f0:	08008a72 	.word	0x08008a72

080080f4 <_calloc_r>:
 80080f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80080f6:	fba1 2402 	umull	r2, r4, r1, r2
 80080fa:	b94c      	cbnz	r4, 8008110 <_calloc_r+0x1c>
 80080fc:	4611      	mov	r1, r2
 80080fe:	9201      	str	r2, [sp, #4]
 8008100:	f7ff f994 	bl	800742c <_malloc_r>
 8008104:	9a01      	ldr	r2, [sp, #4]
 8008106:	4605      	mov	r5, r0
 8008108:	b930      	cbnz	r0, 8008118 <_calloc_r+0x24>
 800810a:	4628      	mov	r0, r5
 800810c:	b003      	add	sp, #12
 800810e:	bd30      	pop	{r4, r5, pc}
 8008110:	220c      	movs	r2, #12
 8008112:	6002      	str	r2, [r0, #0]
 8008114:	2500      	movs	r5, #0
 8008116:	e7f8      	b.n	800810a <_calloc_r+0x16>
 8008118:	4621      	mov	r1, r4
 800811a:	f7fe fa18 	bl	800654e <memset>
 800811e:	e7f4      	b.n	800810a <_calloc_r+0x16>

08008120 <__ascii_mbtowc>:
 8008120:	b082      	sub	sp, #8
 8008122:	b901      	cbnz	r1, 8008126 <__ascii_mbtowc+0x6>
 8008124:	a901      	add	r1, sp, #4
 8008126:	b142      	cbz	r2, 800813a <__ascii_mbtowc+0x1a>
 8008128:	b14b      	cbz	r3, 800813e <__ascii_mbtowc+0x1e>
 800812a:	7813      	ldrb	r3, [r2, #0]
 800812c:	600b      	str	r3, [r1, #0]
 800812e:	7812      	ldrb	r2, [r2, #0]
 8008130:	1e10      	subs	r0, r2, #0
 8008132:	bf18      	it	ne
 8008134:	2001      	movne	r0, #1
 8008136:	b002      	add	sp, #8
 8008138:	4770      	bx	lr
 800813a:	4610      	mov	r0, r2
 800813c:	e7fb      	b.n	8008136 <__ascii_mbtowc+0x16>
 800813e:	f06f 0001 	mvn.w	r0, #1
 8008142:	e7f8      	b.n	8008136 <__ascii_mbtowc+0x16>

08008144 <_realloc_r>:
 8008144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008148:	4680      	mov	r8, r0
 800814a:	4614      	mov	r4, r2
 800814c:	460e      	mov	r6, r1
 800814e:	b921      	cbnz	r1, 800815a <_realloc_r+0x16>
 8008150:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008154:	4611      	mov	r1, r2
 8008156:	f7ff b969 	b.w	800742c <_malloc_r>
 800815a:	b92a      	cbnz	r2, 8008168 <_realloc_r+0x24>
 800815c:	f7ff f8f2 	bl	8007344 <_free_r>
 8008160:	4625      	mov	r5, r4
 8008162:	4628      	mov	r0, r5
 8008164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008168:	f000 f841 	bl	80081ee <_malloc_usable_size_r>
 800816c:	4284      	cmp	r4, r0
 800816e:	4607      	mov	r7, r0
 8008170:	d802      	bhi.n	8008178 <_realloc_r+0x34>
 8008172:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008176:	d812      	bhi.n	800819e <_realloc_r+0x5a>
 8008178:	4621      	mov	r1, r4
 800817a:	4640      	mov	r0, r8
 800817c:	f7ff f956 	bl	800742c <_malloc_r>
 8008180:	4605      	mov	r5, r0
 8008182:	2800      	cmp	r0, #0
 8008184:	d0ed      	beq.n	8008162 <_realloc_r+0x1e>
 8008186:	42bc      	cmp	r4, r7
 8008188:	4622      	mov	r2, r4
 800818a:	4631      	mov	r1, r6
 800818c:	bf28      	it	cs
 800818e:	463a      	movcs	r2, r7
 8008190:	f7ff ff84 	bl	800809c <memcpy>
 8008194:	4631      	mov	r1, r6
 8008196:	4640      	mov	r0, r8
 8008198:	f7ff f8d4 	bl	8007344 <_free_r>
 800819c:	e7e1      	b.n	8008162 <_realloc_r+0x1e>
 800819e:	4635      	mov	r5, r6
 80081a0:	e7df      	b.n	8008162 <_realloc_r+0x1e>

080081a2 <__ascii_wctomb>:
 80081a2:	b149      	cbz	r1, 80081b8 <__ascii_wctomb+0x16>
 80081a4:	2aff      	cmp	r2, #255	; 0xff
 80081a6:	bf85      	ittet	hi
 80081a8:	238a      	movhi	r3, #138	; 0x8a
 80081aa:	6003      	strhi	r3, [r0, #0]
 80081ac:	700a      	strbls	r2, [r1, #0]
 80081ae:	f04f 30ff 	movhi.w	r0, #4294967295
 80081b2:	bf98      	it	ls
 80081b4:	2001      	movls	r0, #1
 80081b6:	4770      	bx	lr
 80081b8:	4608      	mov	r0, r1
 80081ba:	4770      	bx	lr

080081bc <fiprintf>:
 80081bc:	b40e      	push	{r1, r2, r3}
 80081be:	b503      	push	{r0, r1, lr}
 80081c0:	4601      	mov	r1, r0
 80081c2:	ab03      	add	r3, sp, #12
 80081c4:	4805      	ldr	r0, [pc, #20]	; (80081dc <fiprintf+0x20>)
 80081c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80081ca:	6800      	ldr	r0, [r0, #0]
 80081cc:	9301      	str	r3, [sp, #4]
 80081ce:	f000 f83f 	bl	8008250 <_vfiprintf_r>
 80081d2:	b002      	add	sp, #8
 80081d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80081d8:	b003      	add	sp, #12
 80081da:	4770      	bx	lr
 80081dc:	20000064 	.word	0x20000064

080081e0 <abort>:
 80081e0:	b508      	push	{r3, lr}
 80081e2:	2006      	movs	r0, #6
 80081e4:	f000 fa0c 	bl	8008600 <raise>
 80081e8:	2001      	movs	r0, #1
 80081ea:	f7f9 fd39 	bl	8001c60 <_exit>

080081ee <_malloc_usable_size_r>:
 80081ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081f2:	1f18      	subs	r0, r3, #4
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	bfbc      	itt	lt
 80081f8:	580b      	ldrlt	r3, [r1, r0]
 80081fa:	18c0      	addlt	r0, r0, r3
 80081fc:	4770      	bx	lr

080081fe <__sfputc_r>:
 80081fe:	6893      	ldr	r3, [r2, #8]
 8008200:	3b01      	subs	r3, #1
 8008202:	2b00      	cmp	r3, #0
 8008204:	b410      	push	{r4}
 8008206:	6093      	str	r3, [r2, #8]
 8008208:	da08      	bge.n	800821c <__sfputc_r+0x1e>
 800820a:	6994      	ldr	r4, [r2, #24]
 800820c:	42a3      	cmp	r3, r4
 800820e:	db01      	blt.n	8008214 <__sfputc_r+0x16>
 8008210:	290a      	cmp	r1, #10
 8008212:	d103      	bne.n	800821c <__sfputc_r+0x1e>
 8008214:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008218:	f000 b934 	b.w	8008484 <__swbuf_r>
 800821c:	6813      	ldr	r3, [r2, #0]
 800821e:	1c58      	adds	r0, r3, #1
 8008220:	6010      	str	r0, [r2, #0]
 8008222:	7019      	strb	r1, [r3, #0]
 8008224:	4608      	mov	r0, r1
 8008226:	f85d 4b04 	ldr.w	r4, [sp], #4
 800822a:	4770      	bx	lr

0800822c <__sfputs_r>:
 800822c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800822e:	4606      	mov	r6, r0
 8008230:	460f      	mov	r7, r1
 8008232:	4614      	mov	r4, r2
 8008234:	18d5      	adds	r5, r2, r3
 8008236:	42ac      	cmp	r4, r5
 8008238:	d101      	bne.n	800823e <__sfputs_r+0x12>
 800823a:	2000      	movs	r0, #0
 800823c:	e007      	b.n	800824e <__sfputs_r+0x22>
 800823e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008242:	463a      	mov	r2, r7
 8008244:	4630      	mov	r0, r6
 8008246:	f7ff ffda 	bl	80081fe <__sfputc_r>
 800824a:	1c43      	adds	r3, r0, #1
 800824c:	d1f3      	bne.n	8008236 <__sfputs_r+0xa>
 800824e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008250 <_vfiprintf_r>:
 8008250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008254:	460d      	mov	r5, r1
 8008256:	b09d      	sub	sp, #116	; 0x74
 8008258:	4614      	mov	r4, r2
 800825a:	4698      	mov	r8, r3
 800825c:	4606      	mov	r6, r0
 800825e:	b118      	cbz	r0, 8008268 <_vfiprintf_r+0x18>
 8008260:	6a03      	ldr	r3, [r0, #32]
 8008262:	b90b      	cbnz	r3, 8008268 <_vfiprintf_r+0x18>
 8008264:	f7fe f8da 	bl	800641c <__sinit>
 8008268:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800826a:	07d9      	lsls	r1, r3, #31
 800826c:	d405      	bmi.n	800827a <_vfiprintf_r+0x2a>
 800826e:	89ab      	ldrh	r3, [r5, #12]
 8008270:	059a      	lsls	r2, r3, #22
 8008272:	d402      	bmi.n	800827a <_vfiprintf_r+0x2a>
 8008274:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008276:	f7fe f9e8 	bl	800664a <__retarget_lock_acquire_recursive>
 800827a:	89ab      	ldrh	r3, [r5, #12]
 800827c:	071b      	lsls	r3, r3, #28
 800827e:	d501      	bpl.n	8008284 <_vfiprintf_r+0x34>
 8008280:	692b      	ldr	r3, [r5, #16]
 8008282:	b99b      	cbnz	r3, 80082ac <_vfiprintf_r+0x5c>
 8008284:	4629      	mov	r1, r5
 8008286:	4630      	mov	r0, r6
 8008288:	f000 f93a 	bl	8008500 <__swsetup_r>
 800828c:	b170      	cbz	r0, 80082ac <_vfiprintf_r+0x5c>
 800828e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008290:	07dc      	lsls	r4, r3, #31
 8008292:	d504      	bpl.n	800829e <_vfiprintf_r+0x4e>
 8008294:	f04f 30ff 	mov.w	r0, #4294967295
 8008298:	b01d      	add	sp, #116	; 0x74
 800829a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800829e:	89ab      	ldrh	r3, [r5, #12]
 80082a0:	0598      	lsls	r0, r3, #22
 80082a2:	d4f7      	bmi.n	8008294 <_vfiprintf_r+0x44>
 80082a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80082a6:	f7fe f9d1 	bl	800664c <__retarget_lock_release_recursive>
 80082aa:	e7f3      	b.n	8008294 <_vfiprintf_r+0x44>
 80082ac:	2300      	movs	r3, #0
 80082ae:	9309      	str	r3, [sp, #36]	; 0x24
 80082b0:	2320      	movs	r3, #32
 80082b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80082b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80082ba:	2330      	movs	r3, #48	; 0x30
 80082bc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008470 <_vfiprintf_r+0x220>
 80082c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80082c4:	f04f 0901 	mov.w	r9, #1
 80082c8:	4623      	mov	r3, r4
 80082ca:	469a      	mov	sl, r3
 80082cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80082d0:	b10a      	cbz	r2, 80082d6 <_vfiprintf_r+0x86>
 80082d2:	2a25      	cmp	r2, #37	; 0x25
 80082d4:	d1f9      	bne.n	80082ca <_vfiprintf_r+0x7a>
 80082d6:	ebba 0b04 	subs.w	fp, sl, r4
 80082da:	d00b      	beq.n	80082f4 <_vfiprintf_r+0xa4>
 80082dc:	465b      	mov	r3, fp
 80082de:	4622      	mov	r2, r4
 80082e0:	4629      	mov	r1, r5
 80082e2:	4630      	mov	r0, r6
 80082e4:	f7ff ffa2 	bl	800822c <__sfputs_r>
 80082e8:	3001      	adds	r0, #1
 80082ea:	f000 80a9 	beq.w	8008440 <_vfiprintf_r+0x1f0>
 80082ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80082f0:	445a      	add	r2, fp
 80082f2:	9209      	str	r2, [sp, #36]	; 0x24
 80082f4:	f89a 3000 	ldrb.w	r3, [sl]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	f000 80a1 	beq.w	8008440 <_vfiprintf_r+0x1f0>
 80082fe:	2300      	movs	r3, #0
 8008300:	f04f 32ff 	mov.w	r2, #4294967295
 8008304:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008308:	f10a 0a01 	add.w	sl, sl, #1
 800830c:	9304      	str	r3, [sp, #16]
 800830e:	9307      	str	r3, [sp, #28]
 8008310:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008314:	931a      	str	r3, [sp, #104]	; 0x68
 8008316:	4654      	mov	r4, sl
 8008318:	2205      	movs	r2, #5
 800831a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800831e:	4854      	ldr	r0, [pc, #336]	; (8008470 <_vfiprintf_r+0x220>)
 8008320:	f7f7 ff7e 	bl	8000220 <memchr>
 8008324:	9a04      	ldr	r2, [sp, #16]
 8008326:	b9d8      	cbnz	r0, 8008360 <_vfiprintf_r+0x110>
 8008328:	06d1      	lsls	r1, r2, #27
 800832a:	bf44      	itt	mi
 800832c:	2320      	movmi	r3, #32
 800832e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008332:	0713      	lsls	r3, r2, #28
 8008334:	bf44      	itt	mi
 8008336:	232b      	movmi	r3, #43	; 0x2b
 8008338:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800833c:	f89a 3000 	ldrb.w	r3, [sl]
 8008340:	2b2a      	cmp	r3, #42	; 0x2a
 8008342:	d015      	beq.n	8008370 <_vfiprintf_r+0x120>
 8008344:	9a07      	ldr	r2, [sp, #28]
 8008346:	4654      	mov	r4, sl
 8008348:	2000      	movs	r0, #0
 800834a:	f04f 0c0a 	mov.w	ip, #10
 800834e:	4621      	mov	r1, r4
 8008350:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008354:	3b30      	subs	r3, #48	; 0x30
 8008356:	2b09      	cmp	r3, #9
 8008358:	d94d      	bls.n	80083f6 <_vfiprintf_r+0x1a6>
 800835a:	b1b0      	cbz	r0, 800838a <_vfiprintf_r+0x13a>
 800835c:	9207      	str	r2, [sp, #28]
 800835e:	e014      	b.n	800838a <_vfiprintf_r+0x13a>
 8008360:	eba0 0308 	sub.w	r3, r0, r8
 8008364:	fa09 f303 	lsl.w	r3, r9, r3
 8008368:	4313      	orrs	r3, r2
 800836a:	9304      	str	r3, [sp, #16]
 800836c:	46a2      	mov	sl, r4
 800836e:	e7d2      	b.n	8008316 <_vfiprintf_r+0xc6>
 8008370:	9b03      	ldr	r3, [sp, #12]
 8008372:	1d19      	adds	r1, r3, #4
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	9103      	str	r1, [sp, #12]
 8008378:	2b00      	cmp	r3, #0
 800837a:	bfbb      	ittet	lt
 800837c:	425b      	neglt	r3, r3
 800837e:	f042 0202 	orrlt.w	r2, r2, #2
 8008382:	9307      	strge	r3, [sp, #28]
 8008384:	9307      	strlt	r3, [sp, #28]
 8008386:	bfb8      	it	lt
 8008388:	9204      	strlt	r2, [sp, #16]
 800838a:	7823      	ldrb	r3, [r4, #0]
 800838c:	2b2e      	cmp	r3, #46	; 0x2e
 800838e:	d10c      	bne.n	80083aa <_vfiprintf_r+0x15a>
 8008390:	7863      	ldrb	r3, [r4, #1]
 8008392:	2b2a      	cmp	r3, #42	; 0x2a
 8008394:	d134      	bne.n	8008400 <_vfiprintf_r+0x1b0>
 8008396:	9b03      	ldr	r3, [sp, #12]
 8008398:	1d1a      	adds	r2, r3, #4
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	9203      	str	r2, [sp, #12]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	bfb8      	it	lt
 80083a2:	f04f 33ff 	movlt.w	r3, #4294967295
 80083a6:	3402      	adds	r4, #2
 80083a8:	9305      	str	r3, [sp, #20]
 80083aa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008480 <_vfiprintf_r+0x230>
 80083ae:	7821      	ldrb	r1, [r4, #0]
 80083b0:	2203      	movs	r2, #3
 80083b2:	4650      	mov	r0, sl
 80083b4:	f7f7 ff34 	bl	8000220 <memchr>
 80083b8:	b138      	cbz	r0, 80083ca <_vfiprintf_r+0x17a>
 80083ba:	9b04      	ldr	r3, [sp, #16]
 80083bc:	eba0 000a 	sub.w	r0, r0, sl
 80083c0:	2240      	movs	r2, #64	; 0x40
 80083c2:	4082      	lsls	r2, r0
 80083c4:	4313      	orrs	r3, r2
 80083c6:	3401      	adds	r4, #1
 80083c8:	9304      	str	r3, [sp, #16]
 80083ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083ce:	4829      	ldr	r0, [pc, #164]	; (8008474 <_vfiprintf_r+0x224>)
 80083d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80083d4:	2206      	movs	r2, #6
 80083d6:	f7f7 ff23 	bl	8000220 <memchr>
 80083da:	2800      	cmp	r0, #0
 80083dc:	d03f      	beq.n	800845e <_vfiprintf_r+0x20e>
 80083de:	4b26      	ldr	r3, [pc, #152]	; (8008478 <_vfiprintf_r+0x228>)
 80083e0:	bb1b      	cbnz	r3, 800842a <_vfiprintf_r+0x1da>
 80083e2:	9b03      	ldr	r3, [sp, #12]
 80083e4:	3307      	adds	r3, #7
 80083e6:	f023 0307 	bic.w	r3, r3, #7
 80083ea:	3308      	adds	r3, #8
 80083ec:	9303      	str	r3, [sp, #12]
 80083ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083f0:	443b      	add	r3, r7
 80083f2:	9309      	str	r3, [sp, #36]	; 0x24
 80083f4:	e768      	b.n	80082c8 <_vfiprintf_r+0x78>
 80083f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80083fa:	460c      	mov	r4, r1
 80083fc:	2001      	movs	r0, #1
 80083fe:	e7a6      	b.n	800834e <_vfiprintf_r+0xfe>
 8008400:	2300      	movs	r3, #0
 8008402:	3401      	adds	r4, #1
 8008404:	9305      	str	r3, [sp, #20]
 8008406:	4619      	mov	r1, r3
 8008408:	f04f 0c0a 	mov.w	ip, #10
 800840c:	4620      	mov	r0, r4
 800840e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008412:	3a30      	subs	r2, #48	; 0x30
 8008414:	2a09      	cmp	r2, #9
 8008416:	d903      	bls.n	8008420 <_vfiprintf_r+0x1d0>
 8008418:	2b00      	cmp	r3, #0
 800841a:	d0c6      	beq.n	80083aa <_vfiprintf_r+0x15a>
 800841c:	9105      	str	r1, [sp, #20]
 800841e:	e7c4      	b.n	80083aa <_vfiprintf_r+0x15a>
 8008420:	fb0c 2101 	mla	r1, ip, r1, r2
 8008424:	4604      	mov	r4, r0
 8008426:	2301      	movs	r3, #1
 8008428:	e7f0      	b.n	800840c <_vfiprintf_r+0x1bc>
 800842a:	ab03      	add	r3, sp, #12
 800842c:	9300      	str	r3, [sp, #0]
 800842e:	462a      	mov	r2, r5
 8008430:	4b12      	ldr	r3, [pc, #72]	; (800847c <_vfiprintf_r+0x22c>)
 8008432:	a904      	add	r1, sp, #16
 8008434:	4630      	mov	r0, r6
 8008436:	f7fd fb9f 	bl	8005b78 <_printf_float>
 800843a:	4607      	mov	r7, r0
 800843c:	1c78      	adds	r0, r7, #1
 800843e:	d1d6      	bne.n	80083ee <_vfiprintf_r+0x19e>
 8008440:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008442:	07d9      	lsls	r1, r3, #31
 8008444:	d405      	bmi.n	8008452 <_vfiprintf_r+0x202>
 8008446:	89ab      	ldrh	r3, [r5, #12]
 8008448:	059a      	lsls	r2, r3, #22
 800844a:	d402      	bmi.n	8008452 <_vfiprintf_r+0x202>
 800844c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800844e:	f7fe f8fd 	bl	800664c <__retarget_lock_release_recursive>
 8008452:	89ab      	ldrh	r3, [r5, #12]
 8008454:	065b      	lsls	r3, r3, #25
 8008456:	f53f af1d 	bmi.w	8008294 <_vfiprintf_r+0x44>
 800845a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800845c:	e71c      	b.n	8008298 <_vfiprintf_r+0x48>
 800845e:	ab03      	add	r3, sp, #12
 8008460:	9300      	str	r3, [sp, #0]
 8008462:	462a      	mov	r2, r5
 8008464:	4b05      	ldr	r3, [pc, #20]	; (800847c <_vfiprintf_r+0x22c>)
 8008466:	a904      	add	r1, sp, #16
 8008468:	4630      	mov	r0, r6
 800846a:	f7fd fe29 	bl	80060c0 <_printf_i>
 800846e:	e7e4      	b.n	800843a <_vfiprintf_r+0x1ea>
 8008470:	08008a1c 	.word	0x08008a1c
 8008474:	08008a26 	.word	0x08008a26
 8008478:	08005b79 	.word	0x08005b79
 800847c:	0800822d 	.word	0x0800822d
 8008480:	08008a22 	.word	0x08008a22

08008484 <__swbuf_r>:
 8008484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008486:	460e      	mov	r6, r1
 8008488:	4614      	mov	r4, r2
 800848a:	4605      	mov	r5, r0
 800848c:	b118      	cbz	r0, 8008496 <__swbuf_r+0x12>
 800848e:	6a03      	ldr	r3, [r0, #32]
 8008490:	b90b      	cbnz	r3, 8008496 <__swbuf_r+0x12>
 8008492:	f7fd ffc3 	bl	800641c <__sinit>
 8008496:	69a3      	ldr	r3, [r4, #24]
 8008498:	60a3      	str	r3, [r4, #8]
 800849a:	89a3      	ldrh	r3, [r4, #12]
 800849c:	071a      	lsls	r2, r3, #28
 800849e:	d525      	bpl.n	80084ec <__swbuf_r+0x68>
 80084a0:	6923      	ldr	r3, [r4, #16]
 80084a2:	b31b      	cbz	r3, 80084ec <__swbuf_r+0x68>
 80084a4:	6823      	ldr	r3, [r4, #0]
 80084a6:	6922      	ldr	r2, [r4, #16]
 80084a8:	1a98      	subs	r0, r3, r2
 80084aa:	6963      	ldr	r3, [r4, #20]
 80084ac:	b2f6      	uxtb	r6, r6
 80084ae:	4283      	cmp	r3, r0
 80084b0:	4637      	mov	r7, r6
 80084b2:	dc04      	bgt.n	80084be <__swbuf_r+0x3a>
 80084b4:	4621      	mov	r1, r4
 80084b6:	4628      	mov	r0, r5
 80084b8:	f7ff fd9e 	bl	8007ff8 <_fflush_r>
 80084bc:	b9e0      	cbnz	r0, 80084f8 <__swbuf_r+0x74>
 80084be:	68a3      	ldr	r3, [r4, #8]
 80084c0:	3b01      	subs	r3, #1
 80084c2:	60a3      	str	r3, [r4, #8]
 80084c4:	6823      	ldr	r3, [r4, #0]
 80084c6:	1c5a      	adds	r2, r3, #1
 80084c8:	6022      	str	r2, [r4, #0]
 80084ca:	701e      	strb	r6, [r3, #0]
 80084cc:	6962      	ldr	r2, [r4, #20]
 80084ce:	1c43      	adds	r3, r0, #1
 80084d0:	429a      	cmp	r2, r3
 80084d2:	d004      	beq.n	80084de <__swbuf_r+0x5a>
 80084d4:	89a3      	ldrh	r3, [r4, #12]
 80084d6:	07db      	lsls	r3, r3, #31
 80084d8:	d506      	bpl.n	80084e8 <__swbuf_r+0x64>
 80084da:	2e0a      	cmp	r6, #10
 80084dc:	d104      	bne.n	80084e8 <__swbuf_r+0x64>
 80084de:	4621      	mov	r1, r4
 80084e0:	4628      	mov	r0, r5
 80084e2:	f7ff fd89 	bl	8007ff8 <_fflush_r>
 80084e6:	b938      	cbnz	r0, 80084f8 <__swbuf_r+0x74>
 80084e8:	4638      	mov	r0, r7
 80084ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084ec:	4621      	mov	r1, r4
 80084ee:	4628      	mov	r0, r5
 80084f0:	f000 f806 	bl	8008500 <__swsetup_r>
 80084f4:	2800      	cmp	r0, #0
 80084f6:	d0d5      	beq.n	80084a4 <__swbuf_r+0x20>
 80084f8:	f04f 37ff 	mov.w	r7, #4294967295
 80084fc:	e7f4      	b.n	80084e8 <__swbuf_r+0x64>
	...

08008500 <__swsetup_r>:
 8008500:	b538      	push	{r3, r4, r5, lr}
 8008502:	4b2a      	ldr	r3, [pc, #168]	; (80085ac <__swsetup_r+0xac>)
 8008504:	4605      	mov	r5, r0
 8008506:	6818      	ldr	r0, [r3, #0]
 8008508:	460c      	mov	r4, r1
 800850a:	b118      	cbz	r0, 8008514 <__swsetup_r+0x14>
 800850c:	6a03      	ldr	r3, [r0, #32]
 800850e:	b90b      	cbnz	r3, 8008514 <__swsetup_r+0x14>
 8008510:	f7fd ff84 	bl	800641c <__sinit>
 8008514:	89a3      	ldrh	r3, [r4, #12]
 8008516:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800851a:	0718      	lsls	r0, r3, #28
 800851c:	d422      	bmi.n	8008564 <__swsetup_r+0x64>
 800851e:	06d9      	lsls	r1, r3, #27
 8008520:	d407      	bmi.n	8008532 <__swsetup_r+0x32>
 8008522:	2309      	movs	r3, #9
 8008524:	602b      	str	r3, [r5, #0]
 8008526:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800852a:	81a3      	strh	r3, [r4, #12]
 800852c:	f04f 30ff 	mov.w	r0, #4294967295
 8008530:	e034      	b.n	800859c <__swsetup_r+0x9c>
 8008532:	0758      	lsls	r0, r3, #29
 8008534:	d512      	bpl.n	800855c <__swsetup_r+0x5c>
 8008536:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008538:	b141      	cbz	r1, 800854c <__swsetup_r+0x4c>
 800853a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800853e:	4299      	cmp	r1, r3
 8008540:	d002      	beq.n	8008548 <__swsetup_r+0x48>
 8008542:	4628      	mov	r0, r5
 8008544:	f7fe fefe 	bl	8007344 <_free_r>
 8008548:	2300      	movs	r3, #0
 800854a:	6363      	str	r3, [r4, #52]	; 0x34
 800854c:	89a3      	ldrh	r3, [r4, #12]
 800854e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008552:	81a3      	strh	r3, [r4, #12]
 8008554:	2300      	movs	r3, #0
 8008556:	6063      	str	r3, [r4, #4]
 8008558:	6923      	ldr	r3, [r4, #16]
 800855a:	6023      	str	r3, [r4, #0]
 800855c:	89a3      	ldrh	r3, [r4, #12]
 800855e:	f043 0308 	orr.w	r3, r3, #8
 8008562:	81a3      	strh	r3, [r4, #12]
 8008564:	6923      	ldr	r3, [r4, #16]
 8008566:	b94b      	cbnz	r3, 800857c <__swsetup_r+0x7c>
 8008568:	89a3      	ldrh	r3, [r4, #12]
 800856a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800856e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008572:	d003      	beq.n	800857c <__swsetup_r+0x7c>
 8008574:	4621      	mov	r1, r4
 8008576:	4628      	mov	r0, r5
 8008578:	f000 f884 	bl	8008684 <__smakebuf_r>
 800857c:	89a0      	ldrh	r0, [r4, #12]
 800857e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008582:	f010 0301 	ands.w	r3, r0, #1
 8008586:	d00a      	beq.n	800859e <__swsetup_r+0x9e>
 8008588:	2300      	movs	r3, #0
 800858a:	60a3      	str	r3, [r4, #8]
 800858c:	6963      	ldr	r3, [r4, #20]
 800858e:	425b      	negs	r3, r3
 8008590:	61a3      	str	r3, [r4, #24]
 8008592:	6923      	ldr	r3, [r4, #16]
 8008594:	b943      	cbnz	r3, 80085a8 <__swsetup_r+0xa8>
 8008596:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800859a:	d1c4      	bne.n	8008526 <__swsetup_r+0x26>
 800859c:	bd38      	pop	{r3, r4, r5, pc}
 800859e:	0781      	lsls	r1, r0, #30
 80085a0:	bf58      	it	pl
 80085a2:	6963      	ldrpl	r3, [r4, #20]
 80085a4:	60a3      	str	r3, [r4, #8]
 80085a6:	e7f4      	b.n	8008592 <__swsetup_r+0x92>
 80085a8:	2000      	movs	r0, #0
 80085aa:	e7f7      	b.n	800859c <__swsetup_r+0x9c>
 80085ac:	20000064 	.word	0x20000064

080085b0 <_raise_r>:
 80085b0:	291f      	cmp	r1, #31
 80085b2:	b538      	push	{r3, r4, r5, lr}
 80085b4:	4604      	mov	r4, r0
 80085b6:	460d      	mov	r5, r1
 80085b8:	d904      	bls.n	80085c4 <_raise_r+0x14>
 80085ba:	2316      	movs	r3, #22
 80085bc:	6003      	str	r3, [r0, #0]
 80085be:	f04f 30ff 	mov.w	r0, #4294967295
 80085c2:	bd38      	pop	{r3, r4, r5, pc}
 80085c4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80085c6:	b112      	cbz	r2, 80085ce <_raise_r+0x1e>
 80085c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80085cc:	b94b      	cbnz	r3, 80085e2 <_raise_r+0x32>
 80085ce:	4620      	mov	r0, r4
 80085d0:	f000 f830 	bl	8008634 <_getpid_r>
 80085d4:	462a      	mov	r2, r5
 80085d6:	4601      	mov	r1, r0
 80085d8:	4620      	mov	r0, r4
 80085da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80085de:	f000 b817 	b.w	8008610 <_kill_r>
 80085e2:	2b01      	cmp	r3, #1
 80085e4:	d00a      	beq.n	80085fc <_raise_r+0x4c>
 80085e6:	1c59      	adds	r1, r3, #1
 80085e8:	d103      	bne.n	80085f2 <_raise_r+0x42>
 80085ea:	2316      	movs	r3, #22
 80085ec:	6003      	str	r3, [r0, #0]
 80085ee:	2001      	movs	r0, #1
 80085f0:	e7e7      	b.n	80085c2 <_raise_r+0x12>
 80085f2:	2400      	movs	r4, #0
 80085f4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80085f8:	4628      	mov	r0, r5
 80085fa:	4798      	blx	r3
 80085fc:	2000      	movs	r0, #0
 80085fe:	e7e0      	b.n	80085c2 <_raise_r+0x12>

08008600 <raise>:
 8008600:	4b02      	ldr	r3, [pc, #8]	; (800860c <raise+0xc>)
 8008602:	4601      	mov	r1, r0
 8008604:	6818      	ldr	r0, [r3, #0]
 8008606:	f7ff bfd3 	b.w	80085b0 <_raise_r>
 800860a:	bf00      	nop
 800860c:	20000064 	.word	0x20000064

08008610 <_kill_r>:
 8008610:	b538      	push	{r3, r4, r5, lr}
 8008612:	4d07      	ldr	r5, [pc, #28]	; (8008630 <_kill_r+0x20>)
 8008614:	2300      	movs	r3, #0
 8008616:	4604      	mov	r4, r0
 8008618:	4608      	mov	r0, r1
 800861a:	4611      	mov	r1, r2
 800861c:	602b      	str	r3, [r5, #0]
 800861e:	f7f9 fb0f 	bl	8001c40 <_kill>
 8008622:	1c43      	adds	r3, r0, #1
 8008624:	d102      	bne.n	800862c <_kill_r+0x1c>
 8008626:	682b      	ldr	r3, [r5, #0]
 8008628:	b103      	cbz	r3, 800862c <_kill_r+0x1c>
 800862a:	6023      	str	r3, [r4, #0]
 800862c:	bd38      	pop	{r3, r4, r5, pc}
 800862e:	bf00      	nop
 8008630:	20000af8 	.word	0x20000af8

08008634 <_getpid_r>:
 8008634:	f7f9 bafc 	b.w	8001c30 <_getpid>

08008638 <__swhatbuf_r>:
 8008638:	b570      	push	{r4, r5, r6, lr}
 800863a:	460c      	mov	r4, r1
 800863c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008640:	2900      	cmp	r1, #0
 8008642:	b096      	sub	sp, #88	; 0x58
 8008644:	4615      	mov	r5, r2
 8008646:	461e      	mov	r6, r3
 8008648:	da0d      	bge.n	8008666 <__swhatbuf_r+0x2e>
 800864a:	89a3      	ldrh	r3, [r4, #12]
 800864c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008650:	f04f 0100 	mov.w	r1, #0
 8008654:	bf0c      	ite	eq
 8008656:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800865a:	2340      	movne	r3, #64	; 0x40
 800865c:	2000      	movs	r0, #0
 800865e:	6031      	str	r1, [r6, #0]
 8008660:	602b      	str	r3, [r5, #0]
 8008662:	b016      	add	sp, #88	; 0x58
 8008664:	bd70      	pop	{r4, r5, r6, pc}
 8008666:	466a      	mov	r2, sp
 8008668:	f000 f848 	bl	80086fc <_fstat_r>
 800866c:	2800      	cmp	r0, #0
 800866e:	dbec      	blt.n	800864a <__swhatbuf_r+0x12>
 8008670:	9901      	ldr	r1, [sp, #4]
 8008672:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008676:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800867a:	4259      	negs	r1, r3
 800867c:	4159      	adcs	r1, r3
 800867e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008682:	e7eb      	b.n	800865c <__swhatbuf_r+0x24>

08008684 <__smakebuf_r>:
 8008684:	898b      	ldrh	r3, [r1, #12]
 8008686:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008688:	079d      	lsls	r5, r3, #30
 800868a:	4606      	mov	r6, r0
 800868c:	460c      	mov	r4, r1
 800868e:	d507      	bpl.n	80086a0 <__smakebuf_r+0x1c>
 8008690:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008694:	6023      	str	r3, [r4, #0]
 8008696:	6123      	str	r3, [r4, #16]
 8008698:	2301      	movs	r3, #1
 800869a:	6163      	str	r3, [r4, #20]
 800869c:	b002      	add	sp, #8
 800869e:	bd70      	pop	{r4, r5, r6, pc}
 80086a0:	ab01      	add	r3, sp, #4
 80086a2:	466a      	mov	r2, sp
 80086a4:	f7ff ffc8 	bl	8008638 <__swhatbuf_r>
 80086a8:	9900      	ldr	r1, [sp, #0]
 80086aa:	4605      	mov	r5, r0
 80086ac:	4630      	mov	r0, r6
 80086ae:	f7fe febd 	bl	800742c <_malloc_r>
 80086b2:	b948      	cbnz	r0, 80086c8 <__smakebuf_r+0x44>
 80086b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086b8:	059a      	lsls	r2, r3, #22
 80086ba:	d4ef      	bmi.n	800869c <__smakebuf_r+0x18>
 80086bc:	f023 0303 	bic.w	r3, r3, #3
 80086c0:	f043 0302 	orr.w	r3, r3, #2
 80086c4:	81a3      	strh	r3, [r4, #12]
 80086c6:	e7e3      	b.n	8008690 <__smakebuf_r+0xc>
 80086c8:	89a3      	ldrh	r3, [r4, #12]
 80086ca:	6020      	str	r0, [r4, #0]
 80086cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086d0:	81a3      	strh	r3, [r4, #12]
 80086d2:	9b00      	ldr	r3, [sp, #0]
 80086d4:	6163      	str	r3, [r4, #20]
 80086d6:	9b01      	ldr	r3, [sp, #4]
 80086d8:	6120      	str	r0, [r4, #16]
 80086da:	b15b      	cbz	r3, 80086f4 <__smakebuf_r+0x70>
 80086dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80086e0:	4630      	mov	r0, r6
 80086e2:	f000 f81d 	bl	8008720 <_isatty_r>
 80086e6:	b128      	cbz	r0, 80086f4 <__smakebuf_r+0x70>
 80086e8:	89a3      	ldrh	r3, [r4, #12]
 80086ea:	f023 0303 	bic.w	r3, r3, #3
 80086ee:	f043 0301 	orr.w	r3, r3, #1
 80086f2:	81a3      	strh	r3, [r4, #12]
 80086f4:	89a3      	ldrh	r3, [r4, #12]
 80086f6:	431d      	orrs	r5, r3
 80086f8:	81a5      	strh	r5, [r4, #12]
 80086fa:	e7cf      	b.n	800869c <__smakebuf_r+0x18>

080086fc <_fstat_r>:
 80086fc:	b538      	push	{r3, r4, r5, lr}
 80086fe:	4d07      	ldr	r5, [pc, #28]	; (800871c <_fstat_r+0x20>)
 8008700:	2300      	movs	r3, #0
 8008702:	4604      	mov	r4, r0
 8008704:	4608      	mov	r0, r1
 8008706:	4611      	mov	r1, r2
 8008708:	602b      	str	r3, [r5, #0]
 800870a:	f7f9 faf8 	bl	8001cfe <_fstat>
 800870e:	1c43      	adds	r3, r0, #1
 8008710:	d102      	bne.n	8008718 <_fstat_r+0x1c>
 8008712:	682b      	ldr	r3, [r5, #0]
 8008714:	b103      	cbz	r3, 8008718 <_fstat_r+0x1c>
 8008716:	6023      	str	r3, [r4, #0]
 8008718:	bd38      	pop	{r3, r4, r5, pc}
 800871a:	bf00      	nop
 800871c:	20000af8 	.word	0x20000af8

08008720 <_isatty_r>:
 8008720:	b538      	push	{r3, r4, r5, lr}
 8008722:	4d06      	ldr	r5, [pc, #24]	; (800873c <_isatty_r+0x1c>)
 8008724:	2300      	movs	r3, #0
 8008726:	4604      	mov	r4, r0
 8008728:	4608      	mov	r0, r1
 800872a:	602b      	str	r3, [r5, #0]
 800872c:	f7f9 faf7 	bl	8001d1e <_isatty>
 8008730:	1c43      	adds	r3, r0, #1
 8008732:	d102      	bne.n	800873a <_isatty_r+0x1a>
 8008734:	682b      	ldr	r3, [r5, #0]
 8008736:	b103      	cbz	r3, 800873a <_isatty_r+0x1a>
 8008738:	6023      	str	r3, [r4, #0]
 800873a:	bd38      	pop	{r3, r4, r5, pc}
 800873c:	20000af8 	.word	0x20000af8

08008740 <_init>:
 8008740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008742:	bf00      	nop
 8008744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008746:	bc08      	pop	{r3}
 8008748:	469e      	mov	lr, r3
 800874a:	4770      	bx	lr

0800874c <_fini>:
 800874c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800874e:	bf00      	nop
 8008750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008752:	bc08      	pop	{r3}
 8008754:	469e      	mov	lr, r3
 8008756:	4770      	bx	lr
