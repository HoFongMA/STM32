
RTC_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004510  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  080046f0  080046f0  000146f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047a0  080047a0  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  080047a0  080047a0  000147a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080047a8  080047a8  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047a8  080047a8  000147a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047ac  080047ac  000147ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080047b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000071c  2000005c  0800480c  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000778  0800480c  00020778  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010ad7  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000025e0  00000000  00000000  00030ba6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d68  00000000  00000000  00033188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a43  00000000  00000000  00033ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023247  00000000  00000000  00034933  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011392  00000000  00000000  00057b7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dab75  00000000  00000000  00068f0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003c68  00000000  00000000  00143a84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  001476ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000005c 	.word	0x2000005c
 80001fc:	00000000 	.word	0x00000000
 8000200:	080046d8 	.word	0x080046d8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000060 	.word	0x20000060
 800021c:	080046d8 	.word	0x080046d8

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b090      	sub	sp, #64	; 0x40
 80005c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c2:	f000 fc22 	bl	8000e0a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c6:	f000 f89f 	bl	8000708 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ca:	f000 f99d 	bl	8000908 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005ce:	f000 f93b 	bl	8000848 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005d2:	f000 f969 	bl	80008a8 <MX_USB_OTG_FS_PCD_Init>
  MX_RTC_Init();
 80005d6:	f000 f907 	bl	80007e8 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  char				uart_msg[50];
  int				uart_len;
  // check if the stand by flag is set

  if( __HAL_PWR_GET_FLAG( PWR_FLAG_SB ) != RESET ){
 80005da:	4b44      	ldr	r3, [pc, #272]	; (80006ec <main+0x130>)
 80005dc:	685b      	ldr	r3, [r3, #4]
 80005de:	f003 0302 	and.w	r3, r3, #2
 80005e2:	2b02      	cmp	r3, #2
 80005e4:	d12d      	bne.n	8000642 <main+0x86>

	  __HAL_PWR_CLEAR_FLAG( PWR_FLAG_SB );
 80005e6:	4b41      	ldr	r3, [pc, #260]	; (80006ec <main+0x130>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	4a40      	ldr	r2, [pc, #256]	; (80006ec <main+0x130>)
 80005ec:	f043 0308 	orr.w	r3, r3, #8
 80005f0:	6013      	str	r3, [r2, #0]
	  uart_len = sprintf( uart_msg, "A: Wakeup from the STANDBY MODE.\r\n " );
 80005f2:	1d3b      	adds	r3, r7, #4
 80005f4:	493e      	ldr	r1, [pc, #248]	; (80006f0 <main+0x134>)
 80005f6:	4618      	mov	r0, r3
 80005f8:	f003 fbca 	bl	8003d90 <siprintf>
 80005fc:	63b8      	str	r0, [r7, #56]	; 0x38
	  HAL_UART_Transmit(&huart3, (uint8_t*)uart_msg, uart_len, 100);
 80005fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000600:	b29a      	uxth	r2, r3
 8000602:	1d39      	adds	r1, r7, #4
 8000604:	2364      	movs	r3, #100	; 0x64
 8000606:	483b      	ldr	r0, [pc, #236]	; (80006f4 <main+0x138>)
 8000608:	f002 fc06 	bl	8002e18 <HAL_UART_Transmit>

	  for( uint8_t i = 0; i < 10; i++ ){
 800060c:	2300      	movs	r3, #0
 800060e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8000612:	e00b      	b.n	800062c <main+0x70>
		  HAL_GPIO_TogglePin( GPIOB, LD1_Pin );
 8000614:	2101      	movs	r1, #1
 8000616:	4838      	ldr	r0, [pc, #224]	; (80006f8 <main+0x13c>)
 8000618:	f000 ff3f 	bl	800149a <HAL_GPIO_TogglePin>
		  HAL_Delay( 200 );
 800061c:	20c8      	movs	r0, #200	; 0xc8
 800061e:	f000 fc51 	bl	8000ec4 <HAL_Delay>
	  for( uint8_t i = 0; i < 10; i++ ){
 8000622:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000626:	3301      	adds	r3, #1
 8000628:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800062c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000630:	2b09      	cmp	r3, #9
 8000632:	d9ef      	bls.n	8000614 <main+0x58>
	  }

	  HAL_PWR_DisableWakeUpPin( PWR_WAKEUP_PIN1 );
 8000634:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000638:	f001 f8c2 	bl	80017c0 <HAL_PWR_DisableWakeUpPin>
	  HAL_RTCEx_DeactivateWakeUpTimer( &hrtc );
 800063c:	482f      	ldr	r0, [pc, #188]	; (80006fc <main+0x140>)
 800063e:	f002 fb17 	bl	8002c70 <HAL_RTCEx_DeactivateWakeUpTimer>
  }

  // Clear the wakeup flag
  __HAL_PWR_CLEAR_FLAG( PWR_FLAG_WU );
 8000642:	4b2a      	ldr	r3, [pc, #168]	; (80006ec <main+0x130>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4a29      	ldr	r2, [pc, #164]	; (80006ec <main+0x130>)
 8000648:	f043 0304 	orr.w	r3, r3, #4
 800064c:	6013      	str	r3, [r2, #0]
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG( &hrtc, RTC_FLAG_WUTF );
 800064e:	4b2b      	ldr	r3, [pc, #172]	; (80006fc <main+0x140>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	68db      	ldr	r3, [r3, #12]
 8000654:	b2da      	uxtb	r2, r3
 8000656:	4b29      	ldr	r3, [pc, #164]	; (80006fc <main+0x140>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800065e:	60da      	str	r2, [r3, #12]

  uart_len = sprintf( uart_msg, "B: About to enter the STANDBY MODE.\r\n " );
 8000660:	1d3b      	adds	r3, r7, #4
 8000662:	4927      	ldr	r1, [pc, #156]	; (8000700 <main+0x144>)
 8000664:	4618      	mov	r0, r3
 8000666:	f003 fb93 	bl	8003d90 <siprintf>
 800066a:	63b8      	str	r0, [r7, #56]	; 0x38
  HAL_UART_Transmit(&huart3, (uint8_t*)uart_msg, uart_len, 100);
 800066c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800066e:	b29a      	uxth	r2, r3
 8000670:	1d39      	adds	r1, r7, #4
 8000672:	2364      	movs	r3, #100	; 0x64
 8000674:	481f      	ldr	r0, [pc, #124]	; (80006f4 <main+0x138>)
 8000676:	f002 fbcf 	bl	8002e18 <HAL_UART_Transmit>

  for( uint8_t i = 0; i < 4; i++ ){
 800067a:	2300      	movs	r3, #0
 800067c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8000680:	e00c      	b.n	800069c <main+0xe0>
	  HAL_GPIO_TogglePin( GPIOB, LD2_Pin );
 8000682:	2180      	movs	r1, #128	; 0x80
 8000684:	481c      	ldr	r0, [pc, #112]	; (80006f8 <main+0x13c>)
 8000686:	f000 ff08 	bl	800149a <HAL_GPIO_TogglePin>
	  HAL_Delay( 500 );
 800068a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800068e:	f000 fc19 	bl	8000ec4 <HAL_Delay>
  for( uint8_t i = 0; i < 4; i++ ){
 8000692:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000696:	3301      	adds	r3, #1
 8000698:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800069c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80006a0:	2b03      	cmp	r3, #3
 80006a2:	d9ee      	bls.n	8000682 <main+0xc6>
  }

  HAL_PWR_EnableWakeUpPin( PWR_WAKEUP_PIN1 );
 80006a4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80006a8:	f001 f86a 	bl	8001780 <HAL_PWR_EnableWakeUpPin>
  // PWR->CR2 |= 0x01; same as following statement
  __HAL_PWR_CLEAR_WAKEUP_FLAG( PWR_WAKEUP_PIN_FLAG1 );
 80006ac:	4b0f      	ldr	r3, [pc, #60]	; (80006ec <main+0x130>)
 80006ae:	689b      	ldr	r3, [r3, #8]
 80006b0:	4a0e      	ldr	r2, [pc, #56]	; (80006ec <main+0x130>)
 80006b2:	f043 0301 	orr.w	r3, r3, #1
 80006b6:	6093      	str	r3, [r2, #8]

  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 30-1, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 80006b8:	2204      	movs	r2, #4
 80006ba:	211d      	movs	r1, #29
 80006bc:	480f      	ldr	r0, [pc, #60]	; (80006fc <main+0x140>)
 80006be:	f002 fa17 	bl	8002af0 <HAL_RTCEx_SetWakeUpTimer_IT>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <main+0x110>
  {
    Error_Handler();
 80006c8:	f000 f9c0 	bl	8000a4c <Error_Handler>
  }

  uart_len = sprintf( uart_msg, "C: STANDBY MODE Now.\r\n " );
 80006cc:	1d3b      	adds	r3, r7, #4
 80006ce:	490d      	ldr	r1, [pc, #52]	; (8000704 <main+0x148>)
 80006d0:	4618      	mov	r0, r3
 80006d2:	f003 fb5d 	bl	8003d90 <siprintf>
 80006d6:	63b8      	str	r0, [r7, #56]	; 0x38
  HAL_UART_Transmit(&huart3, (uint8_t*)uart_msg, uart_len, 100);
 80006d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80006da:	b29a      	uxth	r2, r3
 80006dc:	1d39      	adds	r1, r7, #4
 80006de:	2364      	movs	r3, #100	; 0x64
 80006e0:	4804      	ldr	r0, [pc, #16]	; (80006f4 <main+0x138>)
 80006e2:	f002 fb99 	bl	8002e18 <HAL_UART_Transmit>

  HAL_PWR_EnterSTANDBYMode( );
 80006e6:	f001 f87f 	bl	80017e8 <HAL_PWR_EnterSTANDBYMode>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006ea:	e7fe      	b.n	80006ea <main+0x12e>
 80006ec:	40007000 	.word	0x40007000
 80006f0:	080046f0 	.word	0x080046f0
 80006f4:	20000098 	.word	0x20000098
 80006f8:	40020400 	.word	0x40020400
 80006fc:	20000078 	.word	0x20000078
 8000700:	08004714 	.word	0x08004714
 8000704:	0800473c 	.word	0x0800473c

08000708 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b094      	sub	sp, #80	; 0x50
 800070c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070e:	f107 0320 	add.w	r3, r7, #32
 8000712:	2230      	movs	r2, #48	; 0x30
 8000714:	2100      	movs	r1, #0
 8000716:	4618      	mov	r0, r3
 8000718:	f003 fb5a 	bl	8003dd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800071c:	f107 030c 	add.w	r3, r7, #12
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
 800072a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800072c:	f001 f818 	bl	8001760 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000730:	4b2b      	ldr	r3, [pc, #172]	; (80007e0 <SystemClock_Config+0xd8>)
 8000732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000734:	4a2a      	ldr	r2, [pc, #168]	; (80007e0 <SystemClock_Config+0xd8>)
 8000736:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800073a:	6413      	str	r3, [r2, #64]	; 0x40
 800073c:	4b28      	ldr	r3, [pc, #160]	; (80007e0 <SystemClock_Config+0xd8>)
 800073e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000740:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000744:	60bb      	str	r3, [r7, #8]
 8000746:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000748:	4b26      	ldr	r3, [pc, #152]	; (80007e4 <SystemClock_Config+0xdc>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a25      	ldr	r2, [pc, #148]	; (80007e4 <SystemClock_Config+0xdc>)
 800074e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000752:	6013      	str	r3, [r2, #0]
 8000754:	4b23      	ldr	r3, [pc, #140]	; (80007e4 <SystemClock_Config+0xdc>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800075c:	607b      	str	r3, [r7, #4]
 800075e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000760:	2309      	movs	r3, #9
 8000762:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000764:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000768:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800076a:	2301      	movs	r3, #1
 800076c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800076e:	2302      	movs	r3, #2
 8000770:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000772:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000776:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000778:	2304      	movs	r3, #4
 800077a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 800077c:	23d8      	movs	r3, #216	; 0xd8
 800077e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000780:	2302      	movs	r3, #2
 8000782:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000784:	2309      	movs	r3, #9
 8000786:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000788:	f107 0320 	add.w	r3, r7, #32
 800078c:	4618      	mov	r0, r3
 800078e:	f001 f893 	bl	80018b8 <HAL_RCC_OscConfig>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000798:	f000 f958 	bl	8000a4c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800079c:	f001 f83c 	bl	8001818 <HAL_PWREx_EnableOverDrive>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80007a6:	f000 f951 	bl	8000a4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007aa:	230f      	movs	r3, #15
 80007ac:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ae:	2302      	movs	r3, #2
 80007b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007b2:	2300      	movs	r3, #0
 80007b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007b6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007c0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80007c2:	f107 030c 	add.w	r3, r7, #12
 80007c6:	2107      	movs	r1, #7
 80007c8:	4618      	mov	r0, r3
 80007ca:	f001 fb19 	bl	8001e00 <HAL_RCC_ClockConfig>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80007d4:	f000 f93a 	bl	8000a4c <Error_Handler>
  }
}
 80007d8:	bf00      	nop
 80007da:	3750      	adds	r7, #80	; 0x50
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	40023800 	.word	0x40023800
 80007e4:	40007000 	.word	0x40007000

080007e8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80007ec:	4b14      	ldr	r3, [pc, #80]	; (8000840 <MX_RTC_Init+0x58>)
 80007ee:	4a15      	ldr	r2, [pc, #84]	; (8000844 <MX_RTC_Init+0x5c>)
 80007f0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80007f2:	4b13      	ldr	r3, [pc, #76]	; (8000840 <MX_RTC_Init+0x58>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80007f8:	4b11      	ldr	r3, [pc, #68]	; (8000840 <MX_RTC_Init+0x58>)
 80007fa:	227f      	movs	r2, #127	; 0x7f
 80007fc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80007fe:	4b10      	ldr	r3, [pc, #64]	; (8000840 <MX_RTC_Init+0x58>)
 8000800:	22ff      	movs	r2, #255	; 0xff
 8000802:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000804:	4b0e      	ldr	r3, [pc, #56]	; (8000840 <MX_RTC_Init+0x58>)
 8000806:	2200      	movs	r2, #0
 8000808:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800080a:	4b0d      	ldr	r3, [pc, #52]	; (8000840 <MX_RTC_Init+0x58>)
 800080c:	2200      	movs	r2, #0
 800080e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000810:	4b0b      	ldr	r3, [pc, #44]	; (8000840 <MX_RTC_Init+0x58>)
 8000812:	2200      	movs	r2, #0
 8000814:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000816:	480a      	ldr	r0, [pc, #40]	; (8000840 <MX_RTC_Init+0x58>)
 8000818:	f002 f862 	bl	80028e0 <HAL_RTC_Init>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000822:	f000 f913 	bl	8000a4c <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0x500B, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8000826:	2200      	movs	r2, #0
 8000828:	f245 010b 	movw	r1, #20491	; 0x500b
 800082c:	4804      	ldr	r0, [pc, #16]	; (8000840 <MX_RTC_Init+0x58>)
 800082e:	f002 f95f 	bl	8002af0 <HAL_RTCEx_SetWakeUpTimer_IT>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_RTC_Init+0x54>
  {
    Error_Handler();
 8000838:	f000 f908 	bl	8000a4c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800083c:	bf00      	nop
 800083e:	bd80      	pop	{r7, pc}
 8000840:	20000078 	.word	0x20000078
 8000844:	40002800 	.word	0x40002800

08000848 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800084c:	4b14      	ldr	r3, [pc, #80]	; (80008a0 <MX_USART3_UART_Init+0x58>)
 800084e:	4a15      	ldr	r2, [pc, #84]	; (80008a4 <MX_USART3_UART_Init+0x5c>)
 8000850:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000852:	4b13      	ldr	r3, [pc, #76]	; (80008a0 <MX_USART3_UART_Init+0x58>)
 8000854:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000858:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800085a:	4b11      	ldr	r3, [pc, #68]	; (80008a0 <MX_USART3_UART_Init+0x58>)
 800085c:	2200      	movs	r2, #0
 800085e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000860:	4b0f      	ldr	r3, [pc, #60]	; (80008a0 <MX_USART3_UART_Init+0x58>)
 8000862:	2200      	movs	r2, #0
 8000864:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000866:	4b0e      	ldr	r3, [pc, #56]	; (80008a0 <MX_USART3_UART_Init+0x58>)
 8000868:	2200      	movs	r2, #0
 800086a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800086c:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <MX_USART3_UART_Init+0x58>)
 800086e:	220c      	movs	r2, #12
 8000870:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000872:	4b0b      	ldr	r3, [pc, #44]	; (80008a0 <MX_USART3_UART_Init+0x58>)
 8000874:	2200      	movs	r2, #0
 8000876:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000878:	4b09      	ldr	r3, [pc, #36]	; (80008a0 <MX_USART3_UART_Init+0x58>)
 800087a:	2200      	movs	r2, #0
 800087c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800087e:	4b08      	ldr	r3, [pc, #32]	; (80008a0 <MX_USART3_UART_Init+0x58>)
 8000880:	2200      	movs	r2, #0
 8000882:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000884:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <MX_USART3_UART_Init+0x58>)
 8000886:	2200      	movs	r2, #0
 8000888:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800088a:	4805      	ldr	r0, [pc, #20]	; (80008a0 <MX_USART3_UART_Init+0x58>)
 800088c:	f002 fa76 	bl	8002d7c <HAL_UART_Init>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000896:	f000 f8d9 	bl	8000a4c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800089a:	bf00      	nop
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	20000098 	.word	0x20000098
 80008a4:	40004800 	.word	0x40004800

080008a8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80008ac:	4b15      	ldr	r3, [pc, #84]	; (8000904 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008ae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80008b2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80008b4:	4b13      	ldr	r3, [pc, #76]	; (8000904 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008b6:	2206      	movs	r2, #6
 80008b8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80008ba:	4b12      	ldr	r3, [pc, #72]	; (8000904 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008bc:	2202      	movs	r2, #2
 80008be:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80008c0:	4b10      	ldr	r3, [pc, #64]	; (8000904 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80008c6:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008c8:	2202      	movs	r2, #2
 80008ca:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80008cc:	4b0d      	ldr	r3, [pc, #52]	; (8000904 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008ce:	2201      	movs	r2, #1
 80008d0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80008d2:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80008d8:	4b0a      	ldr	r3, [pc, #40]	; (8000904 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008da:	2200      	movs	r2, #0
 80008dc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80008de:	4b09      	ldr	r3, [pc, #36]	; (8000904 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008e0:	2201      	movs	r2, #1
 80008e2:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80008e4:	4b07      	ldr	r3, [pc, #28]	; (8000904 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008e6:	2201      	movs	r2, #1
 80008e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80008ea:	4b06      	ldr	r3, [pc, #24]	; (8000904 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80008f0:	4804      	ldr	r0, [pc, #16]	; (8000904 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008f2:	f000 fdec 	bl	80014ce <HAL_PCD_Init>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_USB_OTG_FS_PCD_Init+0x58>
  {
    Error_Handler();
 80008fc:	f000 f8a6 	bl	8000a4c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000900:	bf00      	nop
 8000902:	bd80      	pop	{r7, pc}
 8000904:	20000120 	.word	0x20000120

08000908 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b08c      	sub	sp, #48	; 0x30
 800090c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090e:	f107 031c 	add.w	r3, r7, #28
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	605a      	str	r2, [r3, #4]
 8000918:	609a      	str	r2, [r3, #8]
 800091a:	60da      	str	r2, [r3, #12]
 800091c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800091e:	4b47      	ldr	r3, [pc, #284]	; (8000a3c <MX_GPIO_Init+0x134>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	4a46      	ldr	r2, [pc, #280]	; (8000a3c <MX_GPIO_Init+0x134>)
 8000924:	f043 0304 	orr.w	r3, r3, #4
 8000928:	6313      	str	r3, [r2, #48]	; 0x30
 800092a:	4b44      	ldr	r3, [pc, #272]	; (8000a3c <MX_GPIO_Init+0x134>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	f003 0304 	and.w	r3, r3, #4
 8000932:	61bb      	str	r3, [r7, #24]
 8000934:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000936:	4b41      	ldr	r3, [pc, #260]	; (8000a3c <MX_GPIO_Init+0x134>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	4a40      	ldr	r2, [pc, #256]	; (8000a3c <MX_GPIO_Init+0x134>)
 800093c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000940:	6313      	str	r3, [r2, #48]	; 0x30
 8000942:	4b3e      	ldr	r3, [pc, #248]	; (8000a3c <MX_GPIO_Init+0x134>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800094a:	617b      	str	r3, [r7, #20]
 800094c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800094e:	4b3b      	ldr	r3, [pc, #236]	; (8000a3c <MX_GPIO_Init+0x134>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	4a3a      	ldr	r2, [pc, #232]	; (8000a3c <MX_GPIO_Init+0x134>)
 8000954:	f043 0301 	orr.w	r3, r3, #1
 8000958:	6313      	str	r3, [r2, #48]	; 0x30
 800095a:	4b38      	ldr	r3, [pc, #224]	; (8000a3c <MX_GPIO_Init+0x134>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	f003 0301 	and.w	r3, r3, #1
 8000962:	613b      	str	r3, [r7, #16]
 8000964:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000966:	4b35      	ldr	r3, [pc, #212]	; (8000a3c <MX_GPIO_Init+0x134>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	4a34      	ldr	r2, [pc, #208]	; (8000a3c <MX_GPIO_Init+0x134>)
 800096c:	f043 0302 	orr.w	r3, r3, #2
 8000970:	6313      	str	r3, [r2, #48]	; 0x30
 8000972:	4b32      	ldr	r3, [pc, #200]	; (8000a3c <MX_GPIO_Init+0x134>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	f003 0302 	and.w	r3, r3, #2
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800097e:	4b2f      	ldr	r3, [pc, #188]	; (8000a3c <MX_GPIO_Init+0x134>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	4a2e      	ldr	r2, [pc, #184]	; (8000a3c <MX_GPIO_Init+0x134>)
 8000984:	f043 0308 	orr.w	r3, r3, #8
 8000988:	6313      	str	r3, [r2, #48]	; 0x30
 800098a:	4b2c      	ldr	r3, [pc, #176]	; (8000a3c <MX_GPIO_Init+0x134>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	f003 0308 	and.w	r3, r3, #8
 8000992:	60bb      	str	r3, [r7, #8]
 8000994:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000996:	4b29      	ldr	r3, [pc, #164]	; (8000a3c <MX_GPIO_Init+0x134>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	4a28      	ldr	r2, [pc, #160]	; (8000a3c <MX_GPIO_Init+0x134>)
 800099c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009a0:	6313      	str	r3, [r2, #48]	; 0x30
 80009a2:	4b26      	ldr	r3, [pc, #152]	; (8000a3c <MX_GPIO_Init+0x134>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009aa:	607b      	str	r3, [r7, #4]
 80009ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80009ae:	2200      	movs	r2, #0
 80009b0:	f244 0181 	movw	r1, #16513	; 0x4081
 80009b4:	4822      	ldr	r0, [pc, #136]	; (8000a40 <MX_GPIO_Init+0x138>)
 80009b6:	f000 fd57 	bl	8001468 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80009ba:	2200      	movs	r2, #0
 80009bc:	2140      	movs	r1, #64	; 0x40
 80009be:	4821      	ldr	r0, [pc, #132]	; (8000a44 <MX_GPIO_Init+0x13c>)
 80009c0:	f000 fd52 	bl	8001468 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80009c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009ca:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80009d4:	f107 031c 	add.w	r3, r7, #28
 80009d8:	4619      	mov	r1, r3
 80009da:	481b      	ldr	r0, [pc, #108]	; (8000a48 <MX_GPIO_Init+0x140>)
 80009dc:	f000 fba8 	bl	8001130 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80009e0:	f244 0381 	movw	r3, #16513	; 0x4081
 80009e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e6:	2301      	movs	r3, #1
 80009e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ee:	2300      	movs	r3, #0
 80009f0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f2:	f107 031c 	add.w	r3, r7, #28
 80009f6:	4619      	mov	r1, r3
 80009f8:	4811      	ldr	r0, [pc, #68]	; (8000a40 <MX_GPIO_Init+0x138>)
 80009fa:	f000 fb99 	bl	8001130 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80009fe:	2340      	movs	r3, #64	; 0x40
 8000a00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a02:	2301      	movs	r3, #1
 8000a04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a0e:	f107 031c 	add.w	r3, r7, #28
 8000a12:	4619      	mov	r1, r3
 8000a14:	480b      	ldr	r0, [pc, #44]	; (8000a44 <MX_GPIO_Init+0x13c>)
 8000a16:	f000 fb8b 	bl	8001130 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a1a:	2380      	movs	r3, #128	; 0x80
 8000a1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a26:	f107 031c 	add.w	r3, r7, #28
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4805      	ldr	r0, [pc, #20]	; (8000a44 <MX_GPIO_Init+0x13c>)
 8000a2e:	f000 fb7f 	bl	8001130 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a32:	bf00      	nop
 8000a34:	3730      	adds	r7, #48	; 0x30
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40023800 	.word	0x40023800
 8000a40:	40020400 	.word	0x40020400
 8000a44:	40021800 	.word	0x40021800
 8000a48:	40020800 	.word	0x40020800

08000a4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a50:	b672      	cpsid	i
}
 8000a52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a54:	e7fe      	b.n	8000a54 <Error_Handler+0x8>
	...

08000a58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a5e:	4b0f      	ldr	r3, [pc, #60]	; (8000a9c <HAL_MspInit+0x44>)
 8000a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a62:	4a0e      	ldr	r2, [pc, #56]	; (8000a9c <HAL_MspInit+0x44>)
 8000a64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a68:	6413      	str	r3, [r2, #64]	; 0x40
 8000a6a:	4b0c      	ldr	r3, [pc, #48]	; (8000a9c <HAL_MspInit+0x44>)
 8000a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a72:	607b      	str	r3, [r7, #4]
 8000a74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a76:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <HAL_MspInit+0x44>)
 8000a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a7a:	4a08      	ldr	r2, [pc, #32]	; (8000a9c <HAL_MspInit+0x44>)
 8000a7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a80:	6453      	str	r3, [r2, #68]	; 0x44
 8000a82:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <HAL_MspInit+0x44>)
 8000a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a8a:	603b      	str	r3, [r7, #0]
 8000a8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	370c      	adds	r7, #12
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	40023800 	.word	0x40023800

08000aa0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b0a2      	sub	sp, #136	; 0x88
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000aa8:	f107 0308 	add.w	r3, r7, #8
 8000aac:	2280      	movs	r2, #128	; 0x80
 8000aae:	2100      	movs	r1, #0
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f003 f98d 	bl	8003dd0 <memset>
  if(hrtc->Instance==RTC)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	4a12      	ldr	r2, [pc, #72]	; (8000b04 <HAL_RTC_MspInit+0x64>)
 8000abc:	4293      	cmp	r3, r2
 8000abe:	d11c      	bne.n	8000afa <HAL_RTC_MspInit+0x5a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000ac0:	2320      	movs	r3, #32
 8000ac2:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000ac4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ac8:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000aca:	f107 0308 	add.w	r3, r7, #8
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f001 fbbc 	bl	800224c <HAL_RCCEx_PeriphCLKConfig>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000ada:	f7ff ffb7 	bl	8000a4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000ade:	4b0a      	ldr	r3, [pc, #40]	; (8000b08 <HAL_RTC_MspInit+0x68>)
 8000ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ae2:	4a09      	ldr	r2, [pc, #36]	; (8000b08 <HAL_RTC_MspInit+0x68>)
 8000ae4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ae8:	6713      	str	r3, [r2, #112]	; 0x70
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8000aea:	2200      	movs	r2, #0
 8000aec:	2100      	movs	r1, #0
 8000aee:	2003      	movs	r0, #3
 8000af0:	f000 fae7 	bl	80010c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8000af4:	2003      	movs	r0, #3
 8000af6:	f000 fb00 	bl	80010fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000afa:	bf00      	nop
 8000afc:	3788      	adds	r7, #136	; 0x88
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40002800 	.word	0x40002800
 8000b08:	40023800 	.word	0x40023800

08000b0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b0aa      	sub	sp, #168	; 0xa8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b14:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	605a      	str	r2, [r3, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	60da      	str	r2, [r3, #12]
 8000b22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b24:	f107 0314 	add.w	r3, r7, #20
 8000b28:	2280      	movs	r2, #128	; 0x80
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f003 f94f 	bl	8003dd0 <memset>
  if(huart->Instance==USART3)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4a22      	ldr	r2, [pc, #136]	; (8000bc0 <HAL_UART_MspInit+0xb4>)
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d13c      	bne.n	8000bb6 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000b3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b40:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000b42:	2300      	movs	r3, #0
 8000b44:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b46:	f107 0314 	add.w	r3, r7, #20
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f001 fb7e 	bl	800224c <HAL_RCCEx_PeriphCLKConfig>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000b56:	f7ff ff79 	bl	8000a4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b5a:	4b1a      	ldr	r3, [pc, #104]	; (8000bc4 <HAL_UART_MspInit+0xb8>)
 8000b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5e:	4a19      	ldr	r2, [pc, #100]	; (8000bc4 <HAL_UART_MspInit+0xb8>)
 8000b60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b64:	6413      	str	r3, [r2, #64]	; 0x40
 8000b66:	4b17      	ldr	r3, [pc, #92]	; (8000bc4 <HAL_UART_MspInit+0xb8>)
 8000b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b6e:	613b      	str	r3, [r7, #16]
 8000b70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b72:	4b14      	ldr	r3, [pc, #80]	; (8000bc4 <HAL_UART_MspInit+0xb8>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	4a13      	ldr	r2, [pc, #76]	; (8000bc4 <HAL_UART_MspInit+0xb8>)
 8000b78:	f043 0308 	orr.w	r3, r3, #8
 8000b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7e:	4b11      	ldr	r3, [pc, #68]	; (8000bc4 <HAL_UART_MspInit+0xb8>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	f003 0308 	and.w	r3, r3, #8
 8000b86:	60fb      	str	r3, [r7, #12]
 8000b88:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000b8a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b8e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b92:	2302      	movs	r3, #2
 8000b94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b9e:	2303      	movs	r3, #3
 8000ba0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ba4:	2307      	movs	r3, #7
 8000ba6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000baa:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4805      	ldr	r0, [pc, #20]	; (8000bc8 <HAL_UART_MspInit+0xbc>)
 8000bb2:	f000 fabd 	bl	8001130 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000bb6:	bf00      	nop
 8000bb8:	37a8      	adds	r7, #168	; 0xa8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	40004800 	.word	0x40004800
 8000bc4:	40023800 	.word	0x40023800
 8000bc8:	40020c00 	.word	0x40020c00

08000bcc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b0aa      	sub	sp, #168	; 0xa8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	605a      	str	r2, [r3, #4]
 8000bde:	609a      	str	r2, [r3, #8]
 8000be0:	60da      	str	r2, [r3, #12]
 8000be2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000be4:	f107 0314 	add.w	r3, r7, #20
 8000be8:	2280      	movs	r2, #128	; 0x80
 8000bea:	2100      	movs	r1, #0
 8000bec:	4618      	mov	r0, r3
 8000bee:	f003 f8ef 	bl	8003dd0 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000bfa:	d159      	bne.n	8000cb0 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000bfc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000c00:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c08:	f107 0314 	add.w	r3, r7, #20
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f001 fb1d 	bl	800224c <HAL_RCCEx_PeriphCLKConfig>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000c18:	f7ff ff18 	bl	8000a4c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1c:	4b26      	ldr	r3, [pc, #152]	; (8000cb8 <HAL_PCD_MspInit+0xec>)
 8000c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c20:	4a25      	ldr	r2, [pc, #148]	; (8000cb8 <HAL_PCD_MspInit+0xec>)
 8000c22:	f043 0301 	orr.w	r3, r3, #1
 8000c26:	6313      	str	r3, [r2, #48]	; 0x30
 8000c28:	4b23      	ldr	r3, [pc, #140]	; (8000cb8 <HAL_PCD_MspInit+0xec>)
 8000c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2c:	f003 0301 	and.w	r3, r3, #1
 8000c30:	613b      	str	r3, [r7, #16]
 8000c32:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000c34:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000c38:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	2300      	movs	r3, #0
 8000c44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c48:	2303      	movs	r3, #3
 8000c4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c4e:	230a      	movs	r3, #10
 8000c50:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c54:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4818      	ldr	r0, [pc, #96]	; (8000cbc <HAL_PCD_MspInit+0xf0>)
 8000c5c:	f000 fa68 	bl	8001130 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000c60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c64:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000c74:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4810      	ldr	r0, [pc, #64]	; (8000cbc <HAL_PCD_MspInit+0xf0>)
 8000c7c:	f000 fa58 	bl	8001130 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000c80:	4b0d      	ldr	r3, [pc, #52]	; (8000cb8 <HAL_PCD_MspInit+0xec>)
 8000c82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c84:	4a0c      	ldr	r2, [pc, #48]	; (8000cb8 <HAL_PCD_MspInit+0xec>)
 8000c86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c8a:	6353      	str	r3, [r2, #52]	; 0x34
 8000c8c:	4b0a      	ldr	r3, [pc, #40]	; (8000cb8 <HAL_PCD_MspInit+0xec>)
 8000c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c94:	60fb      	str	r3, [r7, #12]
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	4b07      	ldr	r3, [pc, #28]	; (8000cb8 <HAL_PCD_MspInit+0xec>)
 8000c9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c9c:	4a06      	ldr	r2, [pc, #24]	; (8000cb8 <HAL_PCD_MspInit+0xec>)
 8000c9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ca2:	6453      	str	r3, [r2, #68]	; 0x44
 8000ca4:	4b04      	ldr	r3, [pc, #16]	; (8000cb8 <HAL_PCD_MspInit+0xec>)
 8000ca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cac:	60bb      	str	r3, [r7, #8]
 8000cae:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000cb0:	bf00      	nop
 8000cb2:	37a8      	adds	r7, #168	; 0xa8
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	40023800 	.word	0x40023800
 8000cbc:	40020000 	.word	0x40020000

08000cc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cc4:	e7fe      	b.n	8000cc4 <NMI_Handler+0x4>

08000cc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cca:	e7fe      	b.n	8000cca <HardFault_Handler+0x4>

08000ccc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cd0:	e7fe      	b.n	8000cd0 <MemManage_Handler+0x4>

08000cd2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cd6:	e7fe      	b.n	8000cd6 <BusFault_Handler+0x4>

08000cd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cdc:	e7fe      	b.n	8000cdc <UsageFault_Handler+0x4>

08000cde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr

08000cec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr

08000cfa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr

08000d08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d0c:	f000 f8ba 	bl	8000e84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d10:	bf00      	nop
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 22.
  */
void RTC_WKUP_IRQHandler(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8000d18:	4802      	ldr	r0, [pc, #8]	; (8000d24 <RTC_WKUP_IRQHandler+0x10>)
 8000d1a:	f002 f801 	bl	8002d20 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	20000078 	.word	0x20000078

08000d28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b086      	sub	sp, #24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d30:	4a14      	ldr	r2, [pc, #80]	; (8000d84 <_sbrk+0x5c>)
 8000d32:	4b15      	ldr	r3, [pc, #84]	; (8000d88 <_sbrk+0x60>)
 8000d34:	1ad3      	subs	r3, r2, r3
 8000d36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d3c:	4b13      	ldr	r3, [pc, #76]	; (8000d8c <_sbrk+0x64>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d102      	bne.n	8000d4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d44:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <_sbrk+0x64>)
 8000d46:	4a12      	ldr	r2, [pc, #72]	; (8000d90 <_sbrk+0x68>)
 8000d48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d4a:	4b10      	ldr	r3, [pc, #64]	; (8000d8c <_sbrk+0x64>)
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4413      	add	r3, r2
 8000d52:	693a      	ldr	r2, [r7, #16]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	d207      	bcs.n	8000d68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d58:	f003 f842 	bl	8003de0 <__errno>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	220c      	movs	r2, #12
 8000d60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d62:	f04f 33ff 	mov.w	r3, #4294967295
 8000d66:	e009      	b.n	8000d7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d68:	4b08      	ldr	r3, [pc, #32]	; (8000d8c <_sbrk+0x64>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d6e:	4b07      	ldr	r3, [pc, #28]	; (8000d8c <_sbrk+0x64>)
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4413      	add	r3, r2
 8000d76:	4a05      	ldr	r2, [pc, #20]	; (8000d8c <_sbrk+0x64>)
 8000d78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d7a:	68fb      	ldr	r3, [r7, #12]
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3718      	adds	r7, #24
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	20040000 	.word	0x20040000
 8000d88:	00000400 	.word	0x00000400
 8000d8c:	20000628 	.word	0x20000628
 8000d90:	20000778 	.word	0x20000778

08000d94 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d98:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <SystemInit+0x20>)
 8000d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d9e:	4a05      	ldr	r2, [pc, #20]	; (8000db4 <SystemInit+0x20>)
 8000da0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000da4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	e000ed00 	.word	0xe000ed00

08000db8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000db8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000df0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dbc:	480d      	ldr	r0, [pc, #52]	; (8000df4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dbe:	490e      	ldr	r1, [pc, #56]	; (8000df8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000dc0:	4a0e      	ldr	r2, [pc, #56]	; (8000dfc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dc4:	e002      	b.n	8000dcc <LoopCopyDataInit>

08000dc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dca:	3304      	adds	r3, #4

08000dcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dd0:	d3f9      	bcc.n	8000dc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dd2:	4a0b      	ldr	r2, [pc, #44]	; (8000e00 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000dd4:	4c0b      	ldr	r4, [pc, #44]	; (8000e04 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dd8:	e001      	b.n	8000dde <LoopFillZerobss>

08000dda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ddc:	3204      	adds	r2, #4

08000dde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000de0:	d3fb      	bcc.n	8000dda <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000de2:	f7ff ffd7 	bl	8000d94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000de6:	f003 f801 	bl	8003dec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dea:	f7ff fbe7 	bl	80005bc <main>
  bx  lr    
 8000dee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000df0:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8000df4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000df8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000dfc:	080047b0 	.word	0x080047b0
  ldr r2, =_sbss
 8000e00:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000e04:	20000778 	.word	0x20000778

08000e08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e08:	e7fe      	b.n	8000e08 <ADC_IRQHandler>

08000e0a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e0e:	2003      	movs	r0, #3
 8000e10:	f000 f94c 	bl	80010ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e14:	2000      	movs	r0, #0
 8000e16:	f000 f805 	bl	8000e24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e1a:	f7ff fe1d 	bl	8000a58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e1e:	2300      	movs	r3, #0
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e2c:	4b12      	ldr	r3, [pc, #72]	; (8000e78 <HAL_InitTick+0x54>)
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	4b12      	ldr	r3, [pc, #72]	; (8000e7c <HAL_InitTick+0x58>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	4619      	mov	r1, r3
 8000e36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e42:	4618      	mov	r0, r3
 8000e44:	f000 f967 	bl	8001116 <HAL_SYSTICK_Config>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	e00e      	b.n	8000e70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2b0f      	cmp	r3, #15
 8000e56:	d80a      	bhi.n	8000e6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	6879      	ldr	r1, [r7, #4]
 8000e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e60:	f000 f92f 	bl	80010c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e64:	4a06      	ldr	r2, [pc, #24]	; (8000e80 <HAL_InitTick+0x5c>)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	e000      	b.n	8000e70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	20000000 	.word	0x20000000
 8000e7c:	20000008 	.word	0x20000008
 8000e80:	20000004 	.word	0x20000004

08000e84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e88:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <HAL_IncTick+0x20>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	4b06      	ldr	r3, [pc, #24]	; (8000ea8 <HAL_IncTick+0x24>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4413      	add	r3, r2
 8000e94:	4a04      	ldr	r2, [pc, #16]	; (8000ea8 <HAL_IncTick+0x24>)
 8000e96:	6013      	str	r3, [r2, #0]
}
 8000e98:	bf00      	nop
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	20000008 	.word	0x20000008
 8000ea8:	2000062c 	.word	0x2000062c

08000eac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  return uwTick;
 8000eb0:	4b03      	ldr	r3, [pc, #12]	; (8000ec0 <HAL_GetTick+0x14>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	2000062c 	.word	0x2000062c

08000ec4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ecc:	f7ff ffee 	bl	8000eac <HAL_GetTick>
 8000ed0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000edc:	d005      	beq.n	8000eea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ede:	4b0a      	ldr	r3, [pc, #40]	; (8000f08 <HAL_Delay+0x44>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	4413      	add	r3, r2
 8000ee8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000eea:	bf00      	nop
 8000eec:	f7ff ffde 	bl	8000eac <HAL_GetTick>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	68fa      	ldr	r2, [r7, #12]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	d8f7      	bhi.n	8000eec <HAL_Delay+0x28>
  {
  }
}
 8000efc:	bf00      	nop
 8000efe:	bf00      	nop
 8000f00:	3710      	adds	r7, #16
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	20000008 	.word	0x20000008

08000f0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b085      	sub	sp, #20
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	f003 0307 	and.w	r3, r3, #7
 8000f1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f1c:	4b0b      	ldr	r3, [pc, #44]	; (8000f4c <__NVIC_SetPriorityGrouping+0x40>)
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f22:	68ba      	ldr	r2, [r7, #8]
 8000f24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f28:	4013      	ands	r3, r2
 8000f2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f34:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <__NVIC_SetPriorityGrouping+0x44>)
 8000f36:	4313      	orrs	r3, r2
 8000f38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f3a:	4a04      	ldr	r2, [pc, #16]	; (8000f4c <__NVIC_SetPriorityGrouping+0x40>)
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	60d3      	str	r3, [r2, #12]
}
 8000f40:	bf00      	nop
 8000f42:	3714      	adds	r7, #20
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	e000ed00 	.word	0xe000ed00
 8000f50:	05fa0000 	.word	0x05fa0000

08000f54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f58:	4b04      	ldr	r3, [pc, #16]	; (8000f6c <__NVIC_GetPriorityGrouping+0x18>)
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	0a1b      	lsrs	r3, r3, #8
 8000f5e:	f003 0307 	and.w	r3, r3, #7
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr
 8000f6c:	e000ed00 	.word	0xe000ed00

08000f70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	db0b      	blt.n	8000f9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f82:	79fb      	ldrb	r3, [r7, #7]
 8000f84:	f003 021f 	and.w	r2, r3, #31
 8000f88:	4907      	ldr	r1, [pc, #28]	; (8000fa8 <__NVIC_EnableIRQ+0x38>)
 8000f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8e:	095b      	lsrs	r3, r3, #5
 8000f90:	2001      	movs	r0, #1
 8000f92:	fa00 f202 	lsl.w	r2, r0, r2
 8000f96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f9a:	bf00      	nop
 8000f9c:	370c      	adds	r7, #12
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	e000e100 	.word	0xe000e100

08000fac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	6039      	str	r1, [r7, #0]
 8000fb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	db0a      	blt.n	8000fd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	b2da      	uxtb	r2, r3
 8000fc4:	490c      	ldr	r1, [pc, #48]	; (8000ff8 <__NVIC_SetPriority+0x4c>)
 8000fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fca:	0112      	lsls	r2, r2, #4
 8000fcc:	b2d2      	uxtb	r2, r2
 8000fce:	440b      	add	r3, r1
 8000fd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fd4:	e00a      	b.n	8000fec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	b2da      	uxtb	r2, r3
 8000fda:	4908      	ldr	r1, [pc, #32]	; (8000ffc <__NVIC_SetPriority+0x50>)
 8000fdc:	79fb      	ldrb	r3, [r7, #7]
 8000fde:	f003 030f 	and.w	r3, r3, #15
 8000fe2:	3b04      	subs	r3, #4
 8000fe4:	0112      	lsls	r2, r2, #4
 8000fe6:	b2d2      	uxtb	r2, r2
 8000fe8:	440b      	add	r3, r1
 8000fea:	761a      	strb	r2, [r3, #24]
}
 8000fec:	bf00      	nop
 8000fee:	370c      	adds	r7, #12
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	e000e100 	.word	0xe000e100
 8000ffc:	e000ed00 	.word	0xe000ed00

08001000 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001000:	b480      	push	{r7}
 8001002:	b089      	sub	sp, #36	; 0x24
 8001004:	af00      	add	r7, sp, #0
 8001006:	60f8      	str	r0, [r7, #12]
 8001008:	60b9      	str	r1, [r7, #8]
 800100a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	f003 0307 	and.w	r3, r3, #7
 8001012:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	f1c3 0307 	rsb	r3, r3, #7
 800101a:	2b04      	cmp	r3, #4
 800101c:	bf28      	it	cs
 800101e:	2304      	movcs	r3, #4
 8001020:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	3304      	adds	r3, #4
 8001026:	2b06      	cmp	r3, #6
 8001028:	d902      	bls.n	8001030 <NVIC_EncodePriority+0x30>
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	3b03      	subs	r3, #3
 800102e:	e000      	b.n	8001032 <NVIC_EncodePriority+0x32>
 8001030:	2300      	movs	r3, #0
 8001032:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001034:	f04f 32ff 	mov.w	r2, #4294967295
 8001038:	69bb      	ldr	r3, [r7, #24]
 800103a:	fa02 f303 	lsl.w	r3, r2, r3
 800103e:	43da      	mvns	r2, r3
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	401a      	ands	r2, r3
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001048:	f04f 31ff 	mov.w	r1, #4294967295
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	fa01 f303 	lsl.w	r3, r1, r3
 8001052:	43d9      	mvns	r1, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001058:	4313      	orrs	r3, r2
         );
}
 800105a:	4618      	mov	r0, r3
 800105c:	3724      	adds	r7, #36	; 0x24
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
	...

08001068 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	3b01      	subs	r3, #1
 8001074:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001078:	d301      	bcc.n	800107e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800107a:	2301      	movs	r3, #1
 800107c:	e00f      	b.n	800109e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800107e:	4a0a      	ldr	r2, [pc, #40]	; (80010a8 <SysTick_Config+0x40>)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	3b01      	subs	r3, #1
 8001084:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001086:	210f      	movs	r1, #15
 8001088:	f04f 30ff 	mov.w	r0, #4294967295
 800108c:	f7ff ff8e 	bl	8000fac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001090:	4b05      	ldr	r3, [pc, #20]	; (80010a8 <SysTick_Config+0x40>)
 8001092:	2200      	movs	r2, #0
 8001094:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001096:	4b04      	ldr	r3, [pc, #16]	; (80010a8 <SysTick_Config+0x40>)
 8001098:	2207      	movs	r2, #7
 800109a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800109c:	2300      	movs	r3, #0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	e000e010 	.word	0xe000e010

080010ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f7ff ff29 	bl	8000f0c <__NVIC_SetPriorityGrouping>
}
 80010ba:	bf00      	nop
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b086      	sub	sp, #24
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	4603      	mov	r3, r0
 80010ca:	60b9      	str	r1, [r7, #8]
 80010cc:	607a      	str	r2, [r7, #4]
 80010ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010d0:	2300      	movs	r3, #0
 80010d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010d4:	f7ff ff3e 	bl	8000f54 <__NVIC_GetPriorityGrouping>
 80010d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010da:	687a      	ldr	r2, [r7, #4]
 80010dc:	68b9      	ldr	r1, [r7, #8]
 80010de:	6978      	ldr	r0, [r7, #20]
 80010e0:	f7ff ff8e 	bl	8001000 <NVIC_EncodePriority>
 80010e4:	4602      	mov	r2, r0
 80010e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ea:	4611      	mov	r1, r2
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff ff5d 	bl	8000fac <__NVIC_SetPriority>
}
 80010f2:	bf00      	nop
 80010f4:	3718      	adds	r7, #24
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b082      	sub	sp, #8
 80010fe:	af00      	add	r7, sp, #0
 8001100:	4603      	mov	r3, r0
 8001102:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001104:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff ff31 	bl	8000f70 <__NVIC_EnableIRQ>
}
 800110e:	bf00      	nop
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001116:	b580      	push	{r7, lr}
 8001118:	b082      	sub	sp, #8
 800111a:	af00      	add	r7, sp, #0
 800111c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f7ff ffa2 	bl	8001068 <SysTick_Config>
 8001124:	4603      	mov	r3, r0
}
 8001126:	4618      	mov	r0, r3
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
	...

08001130 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001130:	b480      	push	{r7}
 8001132:	b089      	sub	sp, #36	; 0x24
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800113a:	2300      	movs	r3, #0
 800113c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800113e:	2300      	movs	r3, #0
 8001140:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001142:	2300      	movs	r3, #0
 8001144:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001146:	2300      	movs	r3, #0
 8001148:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800114a:	2300      	movs	r3, #0
 800114c:	61fb      	str	r3, [r7, #28]
 800114e:	e169      	b.n	8001424 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001150:	2201      	movs	r2, #1
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	697a      	ldr	r2, [r7, #20]
 8001160:	4013      	ands	r3, r2
 8001162:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001164:	693a      	ldr	r2, [r7, #16]
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	429a      	cmp	r2, r3
 800116a:	f040 8158 	bne.w	800141e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f003 0303 	and.w	r3, r3, #3
 8001176:	2b01      	cmp	r3, #1
 8001178:	d005      	beq.n	8001186 <HAL_GPIO_Init+0x56>
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f003 0303 	and.w	r3, r3, #3
 8001182:	2b02      	cmp	r3, #2
 8001184:	d130      	bne.n	80011e8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	2203      	movs	r2, #3
 8001192:	fa02 f303 	lsl.w	r3, r2, r3
 8001196:	43db      	mvns	r3, r3
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	4013      	ands	r3, r2
 800119c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	68da      	ldr	r2, [r3, #12]
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	005b      	lsls	r3, r3, #1
 80011a6:	fa02 f303 	lsl.w	r3, r2, r3
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011bc:	2201      	movs	r2, #1
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	43db      	mvns	r3, r3
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	4013      	ands	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	091b      	lsrs	r3, r3, #4
 80011d2:	f003 0201 	and.w	r2, r3, #1
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	4313      	orrs	r3, r2
 80011e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f003 0303 	and.w	r3, r3, #3
 80011f0:	2b03      	cmp	r3, #3
 80011f2:	d017      	beq.n	8001224 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	2203      	movs	r2, #3
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	43db      	mvns	r3, r3
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	4013      	ands	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	689a      	ldr	r2, [r3, #8]
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	4313      	orrs	r3, r2
 800121c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f003 0303 	and.w	r3, r3, #3
 800122c:	2b02      	cmp	r3, #2
 800122e:	d123      	bne.n	8001278 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	08da      	lsrs	r2, r3, #3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	3208      	adds	r2, #8
 8001238:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800123c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	f003 0307 	and.w	r3, r3, #7
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	220f      	movs	r2, #15
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	43db      	mvns	r3, r3
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	4013      	ands	r3, r2
 8001252:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	691a      	ldr	r2, [r3, #16]
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	f003 0307 	and.w	r3, r3, #7
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	4313      	orrs	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	08da      	lsrs	r2, r3, #3
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	3208      	adds	r2, #8
 8001272:	69b9      	ldr	r1, [r7, #24]
 8001274:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	005b      	lsls	r3, r3, #1
 8001282:	2203      	movs	r2, #3
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	43db      	mvns	r3, r3
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	4013      	ands	r3, r2
 800128e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f003 0203 	and.w	r2, r3, #3
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	f000 80b2 	beq.w	800141e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ba:	4b60      	ldr	r3, [pc, #384]	; (800143c <HAL_GPIO_Init+0x30c>)
 80012bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012be:	4a5f      	ldr	r2, [pc, #380]	; (800143c <HAL_GPIO_Init+0x30c>)
 80012c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012c4:	6453      	str	r3, [r2, #68]	; 0x44
 80012c6:	4b5d      	ldr	r3, [pc, #372]	; (800143c <HAL_GPIO_Init+0x30c>)
 80012c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80012d2:	4a5b      	ldr	r2, [pc, #364]	; (8001440 <HAL_GPIO_Init+0x310>)
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	089b      	lsrs	r3, r3, #2
 80012d8:	3302      	adds	r3, #2
 80012da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012de:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	f003 0303 	and.w	r3, r3, #3
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	220f      	movs	r2, #15
 80012ea:	fa02 f303 	lsl.w	r3, r2, r3
 80012ee:	43db      	mvns	r3, r3
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	4013      	ands	r3, r2
 80012f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a52      	ldr	r2, [pc, #328]	; (8001444 <HAL_GPIO_Init+0x314>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d02b      	beq.n	8001356 <HAL_GPIO_Init+0x226>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a51      	ldr	r2, [pc, #324]	; (8001448 <HAL_GPIO_Init+0x318>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d025      	beq.n	8001352 <HAL_GPIO_Init+0x222>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a50      	ldr	r2, [pc, #320]	; (800144c <HAL_GPIO_Init+0x31c>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d01f      	beq.n	800134e <HAL_GPIO_Init+0x21e>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a4f      	ldr	r2, [pc, #316]	; (8001450 <HAL_GPIO_Init+0x320>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d019      	beq.n	800134a <HAL_GPIO_Init+0x21a>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a4e      	ldr	r2, [pc, #312]	; (8001454 <HAL_GPIO_Init+0x324>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d013      	beq.n	8001346 <HAL_GPIO_Init+0x216>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a4d      	ldr	r2, [pc, #308]	; (8001458 <HAL_GPIO_Init+0x328>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d00d      	beq.n	8001342 <HAL_GPIO_Init+0x212>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a4c      	ldr	r2, [pc, #304]	; (800145c <HAL_GPIO_Init+0x32c>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d007      	beq.n	800133e <HAL_GPIO_Init+0x20e>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a4b      	ldr	r2, [pc, #300]	; (8001460 <HAL_GPIO_Init+0x330>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d101      	bne.n	800133a <HAL_GPIO_Init+0x20a>
 8001336:	2307      	movs	r3, #7
 8001338:	e00e      	b.n	8001358 <HAL_GPIO_Init+0x228>
 800133a:	2308      	movs	r3, #8
 800133c:	e00c      	b.n	8001358 <HAL_GPIO_Init+0x228>
 800133e:	2306      	movs	r3, #6
 8001340:	e00a      	b.n	8001358 <HAL_GPIO_Init+0x228>
 8001342:	2305      	movs	r3, #5
 8001344:	e008      	b.n	8001358 <HAL_GPIO_Init+0x228>
 8001346:	2304      	movs	r3, #4
 8001348:	e006      	b.n	8001358 <HAL_GPIO_Init+0x228>
 800134a:	2303      	movs	r3, #3
 800134c:	e004      	b.n	8001358 <HAL_GPIO_Init+0x228>
 800134e:	2302      	movs	r3, #2
 8001350:	e002      	b.n	8001358 <HAL_GPIO_Init+0x228>
 8001352:	2301      	movs	r3, #1
 8001354:	e000      	b.n	8001358 <HAL_GPIO_Init+0x228>
 8001356:	2300      	movs	r3, #0
 8001358:	69fa      	ldr	r2, [r7, #28]
 800135a:	f002 0203 	and.w	r2, r2, #3
 800135e:	0092      	lsls	r2, r2, #2
 8001360:	4093      	lsls	r3, r2
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	4313      	orrs	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001368:	4935      	ldr	r1, [pc, #212]	; (8001440 <HAL_GPIO_Init+0x310>)
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	089b      	lsrs	r3, r3, #2
 800136e:	3302      	adds	r3, #2
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001376:	4b3b      	ldr	r3, [pc, #236]	; (8001464 <HAL_GPIO_Init+0x334>)
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	43db      	mvns	r3, r3
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	4013      	ands	r3, r2
 8001384:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d003      	beq.n	800139a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	4313      	orrs	r3, r2
 8001398:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800139a:	4a32      	ldr	r2, [pc, #200]	; (8001464 <HAL_GPIO_Init+0x334>)
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013a0:	4b30      	ldr	r3, [pc, #192]	; (8001464 <HAL_GPIO_Init+0x334>)
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	43db      	mvns	r3, r3
 80013aa:	69ba      	ldr	r2, [r7, #24]
 80013ac:	4013      	ands	r3, r2
 80013ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d003      	beq.n	80013c4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013c4:	4a27      	ldr	r2, [pc, #156]	; (8001464 <HAL_GPIO_Init+0x334>)
 80013c6:	69bb      	ldr	r3, [r7, #24]
 80013c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013ca:	4b26      	ldr	r3, [pc, #152]	; (8001464 <HAL_GPIO_Init+0x334>)
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	43db      	mvns	r3, r3
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	4013      	ands	r3, r2
 80013d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d003      	beq.n	80013ee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	4313      	orrs	r3, r2
 80013ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013ee:	4a1d      	ldr	r2, [pc, #116]	; (8001464 <HAL_GPIO_Init+0x334>)
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013f4:	4b1b      	ldr	r3, [pc, #108]	; (8001464 <HAL_GPIO_Init+0x334>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	43db      	mvns	r3, r3
 80013fe:	69ba      	ldr	r2, [r7, #24]
 8001400:	4013      	ands	r3, r2
 8001402:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800140c:	2b00      	cmp	r3, #0
 800140e:	d003      	beq.n	8001418 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	4313      	orrs	r3, r2
 8001416:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001418:	4a12      	ldr	r2, [pc, #72]	; (8001464 <HAL_GPIO_Init+0x334>)
 800141a:	69bb      	ldr	r3, [r7, #24]
 800141c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	3301      	adds	r3, #1
 8001422:	61fb      	str	r3, [r7, #28]
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	2b0f      	cmp	r3, #15
 8001428:	f67f ae92 	bls.w	8001150 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800142c:	bf00      	nop
 800142e:	bf00      	nop
 8001430:	3724      	adds	r7, #36	; 0x24
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	40023800 	.word	0x40023800
 8001440:	40013800 	.word	0x40013800
 8001444:	40020000 	.word	0x40020000
 8001448:	40020400 	.word	0x40020400
 800144c:	40020800 	.word	0x40020800
 8001450:	40020c00 	.word	0x40020c00
 8001454:	40021000 	.word	0x40021000
 8001458:	40021400 	.word	0x40021400
 800145c:	40021800 	.word	0x40021800
 8001460:	40021c00 	.word	0x40021c00
 8001464:	40013c00 	.word	0x40013c00

08001468 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	460b      	mov	r3, r1
 8001472:	807b      	strh	r3, [r7, #2]
 8001474:	4613      	mov	r3, r2
 8001476:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001478:	787b      	ldrb	r3, [r7, #1]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d003      	beq.n	8001486 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800147e:	887a      	ldrh	r2, [r7, #2]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001484:	e003      	b.n	800148e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001486:	887b      	ldrh	r3, [r7, #2]
 8001488:	041a      	lsls	r2, r3, #16
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	619a      	str	r2, [r3, #24]
}
 800148e:	bf00      	nop
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr

0800149a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800149a:	b480      	push	{r7}
 800149c:	b085      	sub	sp, #20
 800149e:	af00      	add	r7, sp, #0
 80014a0:	6078      	str	r0, [r7, #4]
 80014a2:	460b      	mov	r3, r1
 80014a4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	695b      	ldr	r3, [r3, #20]
 80014aa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80014ac:	887a      	ldrh	r2, [r7, #2]
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	4013      	ands	r3, r2
 80014b2:	041a      	lsls	r2, r3, #16
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	43d9      	mvns	r1, r3
 80014b8:	887b      	ldrh	r3, [r7, #2]
 80014ba:	400b      	ands	r3, r1
 80014bc:	431a      	orrs	r2, r3
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	619a      	str	r2, [r3, #24]
}
 80014c2:	bf00      	nop
 80014c4:	3714      	adds	r7, #20
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr

080014ce <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80014ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014d0:	b08f      	sub	sp, #60	; 0x3c
 80014d2:	af0a      	add	r7, sp, #40	; 0x28
 80014d4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d101      	bne.n	80014e0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	e116      	b.n	800170e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d106      	bne.n	8001500 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2200      	movs	r2, #0
 80014f6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f7ff fb66 	bl	8000bcc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2203      	movs	r2, #3
 8001504:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800150c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001510:	2b00      	cmp	r3, #0
 8001512:	d102      	bne.n	800151a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2200      	movs	r2, #0
 8001518:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4618      	mov	r0, r3
 8001520:	f002 f98a 	bl	8003838 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	603b      	str	r3, [r7, #0]
 800152a:	687e      	ldr	r6, [r7, #4]
 800152c:	466d      	mov	r5, sp
 800152e:	f106 0410 	add.w	r4, r6, #16
 8001532:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001534:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001536:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001538:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800153a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800153e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001542:	1d33      	adds	r3, r6, #4
 8001544:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001546:	6838      	ldr	r0, [r7, #0]
 8001548:	f002 f8ee 	bl	8003728 <USB_CoreInit>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d005      	beq.n	800155e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2202      	movs	r2, #2
 8001556:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e0d7      	b.n	800170e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	2100      	movs	r1, #0
 8001564:	4618      	mov	r0, r3
 8001566:	f002 f978 	bl	800385a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800156a:	2300      	movs	r3, #0
 800156c:	73fb      	strb	r3, [r7, #15]
 800156e:	e04a      	b.n	8001606 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001570:	7bfa      	ldrb	r2, [r7, #15]
 8001572:	6879      	ldr	r1, [r7, #4]
 8001574:	4613      	mov	r3, r2
 8001576:	00db      	lsls	r3, r3, #3
 8001578:	4413      	add	r3, r2
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	440b      	add	r3, r1
 800157e:	333d      	adds	r3, #61	; 0x3d
 8001580:	2201      	movs	r2, #1
 8001582:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001584:	7bfa      	ldrb	r2, [r7, #15]
 8001586:	6879      	ldr	r1, [r7, #4]
 8001588:	4613      	mov	r3, r2
 800158a:	00db      	lsls	r3, r3, #3
 800158c:	4413      	add	r3, r2
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	440b      	add	r3, r1
 8001592:	333c      	adds	r3, #60	; 0x3c
 8001594:	7bfa      	ldrb	r2, [r7, #15]
 8001596:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001598:	7bfa      	ldrb	r2, [r7, #15]
 800159a:	7bfb      	ldrb	r3, [r7, #15]
 800159c:	b298      	uxth	r0, r3
 800159e:	6879      	ldr	r1, [r7, #4]
 80015a0:	4613      	mov	r3, r2
 80015a2:	00db      	lsls	r3, r3, #3
 80015a4:	4413      	add	r3, r2
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	440b      	add	r3, r1
 80015aa:	3344      	adds	r3, #68	; 0x44
 80015ac:	4602      	mov	r2, r0
 80015ae:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80015b0:	7bfa      	ldrb	r2, [r7, #15]
 80015b2:	6879      	ldr	r1, [r7, #4]
 80015b4:	4613      	mov	r3, r2
 80015b6:	00db      	lsls	r3, r3, #3
 80015b8:	4413      	add	r3, r2
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	440b      	add	r3, r1
 80015be:	3340      	adds	r3, #64	; 0x40
 80015c0:	2200      	movs	r2, #0
 80015c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80015c4:	7bfa      	ldrb	r2, [r7, #15]
 80015c6:	6879      	ldr	r1, [r7, #4]
 80015c8:	4613      	mov	r3, r2
 80015ca:	00db      	lsls	r3, r3, #3
 80015cc:	4413      	add	r3, r2
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	440b      	add	r3, r1
 80015d2:	3348      	adds	r3, #72	; 0x48
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80015d8:	7bfa      	ldrb	r2, [r7, #15]
 80015da:	6879      	ldr	r1, [r7, #4]
 80015dc:	4613      	mov	r3, r2
 80015de:	00db      	lsls	r3, r3, #3
 80015e0:	4413      	add	r3, r2
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	440b      	add	r3, r1
 80015e6:	334c      	adds	r3, #76	; 0x4c
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80015ec:	7bfa      	ldrb	r2, [r7, #15]
 80015ee:	6879      	ldr	r1, [r7, #4]
 80015f0:	4613      	mov	r3, r2
 80015f2:	00db      	lsls	r3, r3, #3
 80015f4:	4413      	add	r3, r2
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	440b      	add	r3, r1
 80015fa:	3354      	adds	r3, #84	; 0x54
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001600:	7bfb      	ldrb	r3, [r7, #15]
 8001602:	3301      	adds	r3, #1
 8001604:	73fb      	strb	r3, [r7, #15]
 8001606:	7bfa      	ldrb	r2, [r7, #15]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	429a      	cmp	r2, r3
 800160e:	d3af      	bcc.n	8001570 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001610:	2300      	movs	r3, #0
 8001612:	73fb      	strb	r3, [r7, #15]
 8001614:	e044      	b.n	80016a0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001616:	7bfa      	ldrb	r2, [r7, #15]
 8001618:	6879      	ldr	r1, [r7, #4]
 800161a:	4613      	mov	r3, r2
 800161c:	00db      	lsls	r3, r3, #3
 800161e:	4413      	add	r3, r2
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	440b      	add	r3, r1
 8001624:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001628:	2200      	movs	r2, #0
 800162a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800162c:	7bfa      	ldrb	r2, [r7, #15]
 800162e:	6879      	ldr	r1, [r7, #4]
 8001630:	4613      	mov	r3, r2
 8001632:	00db      	lsls	r3, r3, #3
 8001634:	4413      	add	r3, r2
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	440b      	add	r3, r1
 800163a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800163e:	7bfa      	ldrb	r2, [r7, #15]
 8001640:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001642:	7bfa      	ldrb	r2, [r7, #15]
 8001644:	6879      	ldr	r1, [r7, #4]
 8001646:	4613      	mov	r3, r2
 8001648:	00db      	lsls	r3, r3, #3
 800164a:	4413      	add	r3, r2
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	440b      	add	r3, r1
 8001650:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001654:	2200      	movs	r2, #0
 8001656:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001658:	7bfa      	ldrb	r2, [r7, #15]
 800165a:	6879      	ldr	r1, [r7, #4]
 800165c:	4613      	mov	r3, r2
 800165e:	00db      	lsls	r3, r3, #3
 8001660:	4413      	add	r3, r2
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	440b      	add	r3, r1
 8001666:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800166a:	2200      	movs	r2, #0
 800166c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800166e:	7bfa      	ldrb	r2, [r7, #15]
 8001670:	6879      	ldr	r1, [r7, #4]
 8001672:	4613      	mov	r3, r2
 8001674:	00db      	lsls	r3, r3, #3
 8001676:	4413      	add	r3, r2
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	440b      	add	r3, r1
 800167c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001684:	7bfa      	ldrb	r2, [r7, #15]
 8001686:	6879      	ldr	r1, [r7, #4]
 8001688:	4613      	mov	r3, r2
 800168a:	00db      	lsls	r3, r3, #3
 800168c:	4413      	add	r3, r2
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	440b      	add	r3, r1
 8001692:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001696:	2200      	movs	r2, #0
 8001698:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800169a:	7bfb      	ldrb	r3, [r7, #15]
 800169c:	3301      	adds	r3, #1
 800169e:	73fb      	strb	r3, [r7, #15]
 80016a0:	7bfa      	ldrb	r2, [r7, #15]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	429a      	cmp	r2, r3
 80016a8:	d3b5      	bcc.n	8001616 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	603b      	str	r3, [r7, #0]
 80016b0:	687e      	ldr	r6, [r7, #4]
 80016b2:	466d      	mov	r5, sp
 80016b4:	f106 0410 	add.w	r4, r6, #16
 80016b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016c0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80016c4:	e885 0003 	stmia.w	r5, {r0, r1}
 80016c8:	1d33      	adds	r3, r6, #4
 80016ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016cc:	6838      	ldr	r0, [r7, #0]
 80016ce:	f002 f911 	bl	80038f4 <USB_DevInit>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d005      	beq.n	80016e4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2202      	movs	r2, #2
 80016dc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e014      	b.n	800170e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2200      	movs	r2, #0
 80016e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2201      	movs	r2, #1
 80016f0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d102      	bne.n	8001702 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f000 f80b 	bl	8001718 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4618      	mov	r0, r3
 8001708:	f002 fadf 	bl	8003cca <USB_DevDisconnect>

  return HAL_OK;
 800170c:	2300      	movs	r3, #0
}
 800170e:	4618      	mov	r0, r3
 8001710:	3714      	adds	r7, #20
 8001712:	46bd      	mov	sp, r7
 8001714:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001718 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001718:	b480      	push	{r7}
 800171a:	b085      	sub	sp, #20
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2201      	movs	r2, #1
 800172a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2200      	movs	r2, #0
 8001732:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	699b      	ldr	r3, [r3, #24]
 800173a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001746:	4b05      	ldr	r3, [pc, #20]	; (800175c <HAL_PCDEx_ActivateLPM+0x44>)
 8001748:	4313      	orrs	r3, r2
 800174a:	68fa      	ldr	r2, [r7, #12]
 800174c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800174e:	2300      	movs	r3, #0
}
 8001750:	4618      	mov	r0, r3
 8001752:	3714      	adds	r7, #20
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr
 800175c:	10000003 	.word	0x10000003

08001760 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001764:	4b05      	ldr	r3, [pc, #20]	; (800177c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a04      	ldr	r2, [pc, #16]	; (800177c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800176a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800176e:	6013      	str	r3, [r2, #0]
}
 8001770:	bf00      	nop
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	40007000 	.word	0x40007000

08001780 <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN6_HIGH or PWR_WAKEUP_PIN6_LOW 
  * @note  PWR_WAKEUP_PINx and PWR_WAKEUP_PINx_HIGH are equivalent.               
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinPolarity)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinPolarity));
  
  /* Enable wake-up pin */
  SET_BIT(PWR->CSR2, (PWR_EWUP_MASK & WakeUpPinPolarity));
 8001788:	4b0c      	ldr	r3, [pc, #48]	; (80017bc <HAL_PWR_EnableWakeUpPin+0x3c>)
 800178a:	68da      	ldr	r2, [r3, #12]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8001792:	490a      	ldr	r1, [pc, #40]	; (80017bc <HAL_PWR_EnableWakeUpPin+0x3c>)
 8001794:	4313      	orrs	r3, r2
 8001796:	60cb      	str	r3, [r1, #12]
	
  /* Specifies the Wake-Up pin polarity for the event detection
    (rising or falling edge) */
  MODIFY_REG(PWR->CR2, (PWR_EWUP_MASK & WakeUpPinPolarity), (WakeUpPinPolarity >> 0x06));
 8001798:	4b08      	ldr	r3, [pc, #32]	; (80017bc <HAL_PWR_EnableWakeUpPin+0x3c>)
 800179a:	689a      	ldr	r2, [r3, #8]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 80017a2:	43db      	mvns	r3, r3
 80017a4:	401a      	ands	r2, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	099b      	lsrs	r3, r3, #6
 80017aa:	4904      	ldr	r1, [pc, #16]	; (80017bc <HAL_PWR_EnableWakeUpPin+0x3c>)
 80017ac:	4313      	orrs	r3, r2
 80017ae:	608b      	str	r3, [r1, #8]
}
 80017b0:	bf00      	nop
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	40007000 	.word	0x40007000

080017c0 <HAL_PWR_DisableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN5
  *           @arg PWR_WAKEUP_PIN6 
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  CLEAR_BIT(PWR->CSR2, WakeUpPinx);
 80017c8:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <HAL_PWR_DisableWakeUpPin+0x24>)
 80017ca:	68da      	ldr	r2, [r3, #12]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	43db      	mvns	r3, r3
 80017d0:	4904      	ldr	r1, [pc, #16]	; (80017e4 <HAL_PWR_DisableWakeUpPin+0x24>)
 80017d2:	4013      	ands	r3, r2
 80017d4:	60cb      	str	r3, [r1, #12]
}
 80017d6:	bf00      	nop
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	40007000 	.word	0x40007000

080017e8 <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pins if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  PWR->CR1 |= PWR_CR1_PDDS;
 80017ec:	4b08      	ldr	r3, [pc, #32]	; (8001810 <HAL_PWR_EnterSTANDBYMode+0x28>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a07      	ldr	r2, [pc, #28]	; (8001810 <HAL_PWR_EnterSTANDBYMode+0x28>)
 80017f2:	f043 0302 	orr.w	r3, r3, #2
 80017f6:	6013      	str	r3, [r2, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 80017f8:	4b06      	ldr	r3, [pc, #24]	; (8001814 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80017fa:	691b      	ldr	r3, [r3, #16]
 80017fc:	4a05      	ldr	r2, [pc, #20]	; (8001814 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80017fe:	f043 0304 	orr.w	r3, r3, #4
 8001802:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8001804:	bf30      	wfi
}
 8001806:	bf00      	nop
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr
 8001810:	40007000 	.word	0x40007000
 8001814:	e000ed00 	.word	0xe000ed00

08001818 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800181e:	2300      	movs	r3, #0
 8001820:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001822:	4b23      	ldr	r3, [pc, #140]	; (80018b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001826:	4a22      	ldr	r2, [pc, #136]	; (80018b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001828:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800182c:	6413      	str	r3, [r2, #64]	; 0x40
 800182e:	4b20      	ldr	r3, [pc, #128]	; (80018b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001836:	603b      	str	r3, [r7, #0]
 8001838:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800183a:	4b1e      	ldr	r3, [pc, #120]	; (80018b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a1d      	ldr	r2, [pc, #116]	; (80018b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001840:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001844:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001846:	f7ff fb31 	bl	8000eac <HAL_GetTick>
 800184a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800184c:	e009      	b.n	8001862 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800184e:	f7ff fb2d 	bl	8000eac <HAL_GetTick>
 8001852:	4602      	mov	r2, r0
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800185c:	d901      	bls.n	8001862 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e022      	b.n	80018a8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001862:	4b14      	ldr	r3, [pc, #80]	; (80018b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800186a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800186e:	d1ee      	bne.n	800184e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001870:	4b10      	ldr	r3, [pc, #64]	; (80018b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a0f      	ldr	r2, [pc, #60]	; (80018b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001876:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800187a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800187c:	f7ff fb16 	bl	8000eac <HAL_GetTick>
 8001880:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001882:	e009      	b.n	8001898 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001884:	f7ff fb12 	bl	8000eac <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001892:	d901      	bls.n	8001898 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001894:	2303      	movs	r3, #3
 8001896:	e007      	b.n	80018a8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001898:	4b06      	ldr	r3, [pc, #24]	; (80018b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80018a4:	d1ee      	bne.n	8001884 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80018a6:	2300      	movs	r3, #0
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3708      	adds	r7, #8
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	40023800 	.word	0x40023800
 80018b4:	40007000 	.word	0x40007000

080018b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b086      	sub	sp, #24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80018c0:	2300      	movs	r3, #0
 80018c2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d101      	bne.n	80018ce <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e291      	b.n	8001df2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0301 	and.w	r3, r3, #1
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	f000 8087 	beq.w	80019ea <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018dc:	4b96      	ldr	r3, [pc, #600]	; (8001b38 <HAL_RCC_OscConfig+0x280>)
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	f003 030c 	and.w	r3, r3, #12
 80018e4:	2b04      	cmp	r3, #4
 80018e6:	d00c      	beq.n	8001902 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018e8:	4b93      	ldr	r3, [pc, #588]	; (8001b38 <HAL_RCC_OscConfig+0x280>)
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	f003 030c 	and.w	r3, r3, #12
 80018f0:	2b08      	cmp	r3, #8
 80018f2:	d112      	bne.n	800191a <HAL_RCC_OscConfig+0x62>
 80018f4:	4b90      	ldr	r3, [pc, #576]	; (8001b38 <HAL_RCC_OscConfig+0x280>)
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001900:	d10b      	bne.n	800191a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001902:	4b8d      	ldr	r3, [pc, #564]	; (8001b38 <HAL_RCC_OscConfig+0x280>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d06c      	beq.n	80019e8 <HAL_RCC_OscConfig+0x130>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d168      	bne.n	80019e8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e26b      	b.n	8001df2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001922:	d106      	bne.n	8001932 <HAL_RCC_OscConfig+0x7a>
 8001924:	4b84      	ldr	r3, [pc, #528]	; (8001b38 <HAL_RCC_OscConfig+0x280>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a83      	ldr	r2, [pc, #524]	; (8001b38 <HAL_RCC_OscConfig+0x280>)
 800192a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800192e:	6013      	str	r3, [r2, #0]
 8001930:	e02e      	b.n	8001990 <HAL_RCC_OscConfig+0xd8>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d10c      	bne.n	8001954 <HAL_RCC_OscConfig+0x9c>
 800193a:	4b7f      	ldr	r3, [pc, #508]	; (8001b38 <HAL_RCC_OscConfig+0x280>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a7e      	ldr	r2, [pc, #504]	; (8001b38 <HAL_RCC_OscConfig+0x280>)
 8001940:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001944:	6013      	str	r3, [r2, #0]
 8001946:	4b7c      	ldr	r3, [pc, #496]	; (8001b38 <HAL_RCC_OscConfig+0x280>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a7b      	ldr	r2, [pc, #492]	; (8001b38 <HAL_RCC_OscConfig+0x280>)
 800194c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001950:	6013      	str	r3, [r2, #0]
 8001952:	e01d      	b.n	8001990 <HAL_RCC_OscConfig+0xd8>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800195c:	d10c      	bne.n	8001978 <HAL_RCC_OscConfig+0xc0>
 800195e:	4b76      	ldr	r3, [pc, #472]	; (8001b38 <HAL_RCC_OscConfig+0x280>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a75      	ldr	r2, [pc, #468]	; (8001b38 <HAL_RCC_OscConfig+0x280>)
 8001964:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001968:	6013      	str	r3, [r2, #0]
 800196a:	4b73      	ldr	r3, [pc, #460]	; (8001b38 <HAL_RCC_OscConfig+0x280>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a72      	ldr	r2, [pc, #456]	; (8001b38 <HAL_RCC_OscConfig+0x280>)
 8001970:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001974:	6013      	str	r3, [r2, #0]
 8001976:	e00b      	b.n	8001990 <HAL_RCC_OscConfig+0xd8>
 8001978:	4b6f      	ldr	r3, [pc, #444]	; (8001b38 <HAL_RCC_OscConfig+0x280>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a6e      	ldr	r2, [pc, #440]	; (8001b38 <HAL_RCC_OscConfig+0x280>)
 800197e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001982:	6013      	str	r3, [r2, #0]
 8001984:	4b6c      	ldr	r3, [pc, #432]	; (8001b38 <HAL_RCC_OscConfig+0x280>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a6b      	ldr	r2, [pc, #428]	; (8001b38 <HAL_RCC_OscConfig+0x280>)
 800198a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800198e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d013      	beq.n	80019c0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001998:	f7ff fa88 	bl	8000eac <HAL_GetTick>
 800199c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800199e:	e008      	b.n	80019b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019a0:	f7ff fa84 	bl	8000eac <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	2b64      	cmp	r3, #100	; 0x64
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e21f      	b.n	8001df2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019b2:	4b61      	ldr	r3, [pc, #388]	; (8001b38 <HAL_RCC_OscConfig+0x280>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d0f0      	beq.n	80019a0 <HAL_RCC_OscConfig+0xe8>
 80019be:	e014      	b.n	80019ea <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c0:	f7ff fa74 	bl	8000eac <HAL_GetTick>
 80019c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019c6:	e008      	b.n	80019da <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019c8:	f7ff fa70 	bl	8000eac <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	2b64      	cmp	r3, #100	; 0x64
 80019d4:	d901      	bls.n	80019da <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e20b      	b.n	8001df2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019da:	4b57      	ldr	r3, [pc, #348]	; (8001b38 <HAL_RCC_OscConfig+0x280>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d1f0      	bne.n	80019c8 <HAL_RCC_OscConfig+0x110>
 80019e6:	e000      	b.n	80019ea <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0302 	and.w	r3, r3, #2
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d069      	beq.n	8001aca <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019f6:	4b50      	ldr	r3, [pc, #320]	; (8001b38 <HAL_RCC_OscConfig+0x280>)
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	f003 030c 	and.w	r3, r3, #12
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d00b      	beq.n	8001a1a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a02:	4b4d      	ldr	r3, [pc, #308]	; (8001b38 <HAL_RCC_OscConfig+0x280>)
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	f003 030c 	and.w	r3, r3, #12
 8001a0a:	2b08      	cmp	r3, #8
 8001a0c:	d11c      	bne.n	8001a48 <HAL_RCC_OscConfig+0x190>
 8001a0e:	4b4a      	ldr	r3, [pc, #296]	; (8001b38 <HAL_RCC_OscConfig+0x280>)
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d116      	bne.n	8001a48 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a1a:	4b47      	ldr	r3, [pc, #284]	; (8001b38 <HAL_RCC_OscConfig+0x280>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d005      	beq.n	8001a32 <HAL_RCC_OscConfig+0x17a>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	68db      	ldr	r3, [r3, #12]
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d001      	beq.n	8001a32 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e1df      	b.n	8001df2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a32:	4b41      	ldr	r3, [pc, #260]	; (8001b38 <HAL_RCC_OscConfig+0x280>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	691b      	ldr	r3, [r3, #16]
 8001a3e:	00db      	lsls	r3, r3, #3
 8001a40:	493d      	ldr	r1, [pc, #244]	; (8001b38 <HAL_RCC_OscConfig+0x280>)
 8001a42:	4313      	orrs	r3, r2
 8001a44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a46:	e040      	b.n	8001aca <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d023      	beq.n	8001a98 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a50:	4b39      	ldr	r3, [pc, #228]	; (8001b38 <HAL_RCC_OscConfig+0x280>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a38      	ldr	r2, [pc, #224]	; (8001b38 <HAL_RCC_OscConfig+0x280>)
 8001a56:	f043 0301 	orr.w	r3, r3, #1
 8001a5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a5c:	f7ff fa26 	bl	8000eac <HAL_GetTick>
 8001a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a62:	e008      	b.n	8001a76 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a64:	f7ff fa22 	bl	8000eac <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e1bd      	b.n	8001df2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a76:	4b30      	ldr	r3, [pc, #192]	; (8001b38 <HAL_RCC_OscConfig+0x280>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0302 	and.w	r3, r3, #2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d0f0      	beq.n	8001a64 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a82:	4b2d      	ldr	r3, [pc, #180]	; (8001b38 <HAL_RCC_OscConfig+0x280>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	691b      	ldr	r3, [r3, #16]
 8001a8e:	00db      	lsls	r3, r3, #3
 8001a90:	4929      	ldr	r1, [pc, #164]	; (8001b38 <HAL_RCC_OscConfig+0x280>)
 8001a92:	4313      	orrs	r3, r2
 8001a94:	600b      	str	r3, [r1, #0]
 8001a96:	e018      	b.n	8001aca <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a98:	4b27      	ldr	r3, [pc, #156]	; (8001b38 <HAL_RCC_OscConfig+0x280>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a26      	ldr	r2, [pc, #152]	; (8001b38 <HAL_RCC_OscConfig+0x280>)
 8001a9e:	f023 0301 	bic.w	r3, r3, #1
 8001aa2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa4:	f7ff fa02 	bl	8000eac <HAL_GetTick>
 8001aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aaa:	e008      	b.n	8001abe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aac:	f7ff f9fe 	bl	8000eac <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e199      	b.n	8001df2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001abe:	4b1e      	ldr	r3, [pc, #120]	; (8001b38 <HAL_RCC_OscConfig+0x280>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0302 	and.w	r3, r3, #2
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d1f0      	bne.n	8001aac <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0308 	and.w	r3, r3, #8
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d038      	beq.n	8001b48 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	695b      	ldr	r3, [r3, #20]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d019      	beq.n	8001b12 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ade:	4b16      	ldr	r3, [pc, #88]	; (8001b38 <HAL_RCC_OscConfig+0x280>)
 8001ae0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ae2:	4a15      	ldr	r2, [pc, #84]	; (8001b38 <HAL_RCC_OscConfig+0x280>)
 8001ae4:	f043 0301 	orr.w	r3, r3, #1
 8001ae8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aea:	f7ff f9df 	bl	8000eac <HAL_GetTick>
 8001aee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001af0:	e008      	b.n	8001b04 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001af2:	f7ff f9db 	bl	8000eac <HAL_GetTick>
 8001af6:	4602      	mov	r2, r0
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	d901      	bls.n	8001b04 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001b00:	2303      	movs	r3, #3
 8001b02:	e176      	b.n	8001df2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b04:	4b0c      	ldr	r3, [pc, #48]	; (8001b38 <HAL_RCC_OscConfig+0x280>)
 8001b06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b08:	f003 0302 	and.w	r3, r3, #2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d0f0      	beq.n	8001af2 <HAL_RCC_OscConfig+0x23a>
 8001b10:	e01a      	b.n	8001b48 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b12:	4b09      	ldr	r3, [pc, #36]	; (8001b38 <HAL_RCC_OscConfig+0x280>)
 8001b14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b16:	4a08      	ldr	r2, [pc, #32]	; (8001b38 <HAL_RCC_OscConfig+0x280>)
 8001b18:	f023 0301 	bic.w	r3, r3, #1
 8001b1c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b1e:	f7ff f9c5 	bl	8000eac <HAL_GetTick>
 8001b22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b24:	e00a      	b.n	8001b3c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b26:	f7ff f9c1 	bl	8000eac <HAL_GetTick>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d903      	bls.n	8001b3c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	e15c      	b.n	8001df2 <HAL_RCC_OscConfig+0x53a>
 8001b38:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b3c:	4b91      	ldr	r3, [pc, #580]	; (8001d84 <HAL_RCC_OscConfig+0x4cc>)
 8001b3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b40:	f003 0302 	and.w	r3, r3, #2
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d1ee      	bne.n	8001b26 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0304 	and.w	r3, r3, #4
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	f000 80a4 	beq.w	8001c9e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b56:	4b8b      	ldr	r3, [pc, #556]	; (8001d84 <HAL_RCC_OscConfig+0x4cc>)
 8001b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d10d      	bne.n	8001b7e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b62:	4b88      	ldr	r3, [pc, #544]	; (8001d84 <HAL_RCC_OscConfig+0x4cc>)
 8001b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b66:	4a87      	ldr	r2, [pc, #540]	; (8001d84 <HAL_RCC_OscConfig+0x4cc>)
 8001b68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b6e:	4b85      	ldr	r3, [pc, #532]	; (8001d84 <HAL_RCC_OscConfig+0x4cc>)
 8001b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b76:	60bb      	str	r3, [r7, #8]
 8001b78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b7e:	4b82      	ldr	r3, [pc, #520]	; (8001d88 <HAL_RCC_OscConfig+0x4d0>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d118      	bne.n	8001bbc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001b8a:	4b7f      	ldr	r3, [pc, #508]	; (8001d88 <HAL_RCC_OscConfig+0x4d0>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a7e      	ldr	r2, [pc, #504]	; (8001d88 <HAL_RCC_OscConfig+0x4d0>)
 8001b90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b96:	f7ff f989 	bl	8000eac <HAL_GetTick>
 8001b9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b9c:	e008      	b.n	8001bb0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b9e:	f7ff f985 	bl	8000eac <HAL_GetTick>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	2b64      	cmp	r3, #100	; 0x64
 8001baa:	d901      	bls.n	8001bb0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e120      	b.n	8001df2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bb0:	4b75      	ldr	r3, [pc, #468]	; (8001d88 <HAL_RCC_OscConfig+0x4d0>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d0f0      	beq.n	8001b9e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d106      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x31a>
 8001bc4:	4b6f      	ldr	r3, [pc, #444]	; (8001d84 <HAL_RCC_OscConfig+0x4cc>)
 8001bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bc8:	4a6e      	ldr	r2, [pc, #440]	; (8001d84 <HAL_RCC_OscConfig+0x4cc>)
 8001bca:	f043 0301 	orr.w	r3, r3, #1
 8001bce:	6713      	str	r3, [r2, #112]	; 0x70
 8001bd0:	e02d      	b.n	8001c2e <HAL_RCC_OscConfig+0x376>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d10c      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x33c>
 8001bda:	4b6a      	ldr	r3, [pc, #424]	; (8001d84 <HAL_RCC_OscConfig+0x4cc>)
 8001bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bde:	4a69      	ldr	r2, [pc, #420]	; (8001d84 <HAL_RCC_OscConfig+0x4cc>)
 8001be0:	f023 0301 	bic.w	r3, r3, #1
 8001be4:	6713      	str	r3, [r2, #112]	; 0x70
 8001be6:	4b67      	ldr	r3, [pc, #412]	; (8001d84 <HAL_RCC_OscConfig+0x4cc>)
 8001be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bea:	4a66      	ldr	r2, [pc, #408]	; (8001d84 <HAL_RCC_OscConfig+0x4cc>)
 8001bec:	f023 0304 	bic.w	r3, r3, #4
 8001bf0:	6713      	str	r3, [r2, #112]	; 0x70
 8001bf2:	e01c      	b.n	8001c2e <HAL_RCC_OscConfig+0x376>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	2b05      	cmp	r3, #5
 8001bfa:	d10c      	bne.n	8001c16 <HAL_RCC_OscConfig+0x35e>
 8001bfc:	4b61      	ldr	r3, [pc, #388]	; (8001d84 <HAL_RCC_OscConfig+0x4cc>)
 8001bfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c00:	4a60      	ldr	r2, [pc, #384]	; (8001d84 <HAL_RCC_OscConfig+0x4cc>)
 8001c02:	f043 0304 	orr.w	r3, r3, #4
 8001c06:	6713      	str	r3, [r2, #112]	; 0x70
 8001c08:	4b5e      	ldr	r3, [pc, #376]	; (8001d84 <HAL_RCC_OscConfig+0x4cc>)
 8001c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c0c:	4a5d      	ldr	r2, [pc, #372]	; (8001d84 <HAL_RCC_OscConfig+0x4cc>)
 8001c0e:	f043 0301 	orr.w	r3, r3, #1
 8001c12:	6713      	str	r3, [r2, #112]	; 0x70
 8001c14:	e00b      	b.n	8001c2e <HAL_RCC_OscConfig+0x376>
 8001c16:	4b5b      	ldr	r3, [pc, #364]	; (8001d84 <HAL_RCC_OscConfig+0x4cc>)
 8001c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c1a:	4a5a      	ldr	r2, [pc, #360]	; (8001d84 <HAL_RCC_OscConfig+0x4cc>)
 8001c1c:	f023 0301 	bic.w	r3, r3, #1
 8001c20:	6713      	str	r3, [r2, #112]	; 0x70
 8001c22:	4b58      	ldr	r3, [pc, #352]	; (8001d84 <HAL_RCC_OscConfig+0x4cc>)
 8001c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c26:	4a57      	ldr	r2, [pc, #348]	; (8001d84 <HAL_RCC_OscConfig+0x4cc>)
 8001c28:	f023 0304 	bic.w	r3, r3, #4
 8001c2c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d015      	beq.n	8001c62 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c36:	f7ff f939 	bl	8000eac <HAL_GetTick>
 8001c3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c3c:	e00a      	b.n	8001c54 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c3e:	f7ff f935 	bl	8000eac <HAL_GetTick>
 8001c42:	4602      	mov	r2, r0
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d901      	bls.n	8001c54 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001c50:	2303      	movs	r3, #3
 8001c52:	e0ce      	b.n	8001df2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c54:	4b4b      	ldr	r3, [pc, #300]	; (8001d84 <HAL_RCC_OscConfig+0x4cc>)
 8001c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c58:	f003 0302 	and.w	r3, r3, #2
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d0ee      	beq.n	8001c3e <HAL_RCC_OscConfig+0x386>
 8001c60:	e014      	b.n	8001c8c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c62:	f7ff f923 	bl	8000eac <HAL_GetTick>
 8001c66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c68:	e00a      	b.n	8001c80 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c6a:	f7ff f91f 	bl	8000eac <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d901      	bls.n	8001c80 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	e0b8      	b.n	8001df2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c80:	4b40      	ldr	r3, [pc, #256]	; (8001d84 <HAL_RCC_OscConfig+0x4cc>)
 8001c82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c84:	f003 0302 	and.w	r3, r3, #2
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d1ee      	bne.n	8001c6a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c8c:	7dfb      	ldrb	r3, [r7, #23]
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d105      	bne.n	8001c9e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c92:	4b3c      	ldr	r3, [pc, #240]	; (8001d84 <HAL_RCC_OscConfig+0x4cc>)
 8001c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c96:	4a3b      	ldr	r2, [pc, #236]	; (8001d84 <HAL_RCC_OscConfig+0x4cc>)
 8001c98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c9c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	699b      	ldr	r3, [r3, #24]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	f000 80a4 	beq.w	8001df0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ca8:	4b36      	ldr	r3, [pc, #216]	; (8001d84 <HAL_RCC_OscConfig+0x4cc>)
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	f003 030c 	and.w	r3, r3, #12
 8001cb0:	2b08      	cmp	r3, #8
 8001cb2:	d06b      	beq.n	8001d8c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	699b      	ldr	r3, [r3, #24]
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d149      	bne.n	8001d50 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cbc:	4b31      	ldr	r3, [pc, #196]	; (8001d84 <HAL_RCC_OscConfig+0x4cc>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a30      	ldr	r2, [pc, #192]	; (8001d84 <HAL_RCC_OscConfig+0x4cc>)
 8001cc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc8:	f7ff f8f0 	bl	8000eac <HAL_GetTick>
 8001ccc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cce:	e008      	b.n	8001ce2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cd0:	f7ff f8ec 	bl	8000eac <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d901      	bls.n	8001ce2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e087      	b.n	8001df2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ce2:	4b28      	ldr	r3, [pc, #160]	; (8001d84 <HAL_RCC_OscConfig+0x4cc>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d1f0      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	69da      	ldr	r2, [r3, #28]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6a1b      	ldr	r3, [r3, #32]
 8001cf6:	431a      	orrs	r2, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfc:	019b      	lsls	r3, r3, #6
 8001cfe:	431a      	orrs	r2, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d04:	085b      	lsrs	r3, r3, #1
 8001d06:	3b01      	subs	r3, #1
 8001d08:	041b      	lsls	r3, r3, #16
 8001d0a:	431a      	orrs	r2, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d10:	061b      	lsls	r3, r3, #24
 8001d12:	4313      	orrs	r3, r2
 8001d14:	4a1b      	ldr	r2, [pc, #108]	; (8001d84 <HAL_RCC_OscConfig+0x4cc>)
 8001d16:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001d1a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d1c:	4b19      	ldr	r3, [pc, #100]	; (8001d84 <HAL_RCC_OscConfig+0x4cc>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a18      	ldr	r2, [pc, #96]	; (8001d84 <HAL_RCC_OscConfig+0x4cc>)
 8001d22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d28:	f7ff f8c0 	bl	8000eac <HAL_GetTick>
 8001d2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d2e:	e008      	b.n	8001d42 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d30:	f7ff f8bc 	bl	8000eac <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d901      	bls.n	8001d42 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e057      	b.n	8001df2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d42:	4b10      	ldr	r3, [pc, #64]	; (8001d84 <HAL_RCC_OscConfig+0x4cc>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d0f0      	beq.n	8001d30 <HAL_RCC_OscConfig+0x478>
 8001d4e:	e04f      	b.n	8001df0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d50:	4b0c      	ldr	r3, [pc, #48]	; (8001d84 <HAL_RCC_OscConfig+0x4cc>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a0b      	ldr	r2, [pc, #44]	; (8001d84 <HAL_RCC_OscConfig+0x4cc>)
 8001d56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d5c:	f7ff f8a6 	bl	8000eac <HAL_GetTick>
 8001d60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d62:	e008      	b.n	8001d76 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d64:	f7ff f8a2 	bl	8000eac <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e03d      	b.n	8001df2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d76:	4b03      	ldr	r3, [pc, #12]	; (8001d84 <HAL_RCC_OscConfig+0x4cc>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d1f0      	bne.n	8001d64 <HAL_RCC_OscConfig+0x4ac>
 8001d82:	e035      	b.n	8001df0 <HAL_RCC_OscConfig+0x538>
 8001d84:	40023800 	.word	0x40023800
 8001d88:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001d8c:	4b1b      	ldr	r3, [pc, #108]	; (8001dfc <HAL_RCC_OscConfig+0x544>)
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	699b      	ldr	r3, [r3, #24]
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d028      	beq.n	8001dec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d121      	bne.n	8001dec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d11a      	bne.n	8001dec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001db6:	68fa      	ldr	r2, [r7, #12]
 8001db8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001dc2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d111      	bne.n	8001dec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dd2:	085b      	lsrs	r3, r3, #1
 8001dd4:	3b01      	subs	r3, #1
 8001dd6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d107      	bne.n	8001dec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d001      	beq.n	8001df0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e000      	b.n	8001df2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3718      	adds	r7, #24
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	40023800 	.word	0x40023800

08001e00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d101      	bne.n	8001e18 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e0d0      	b.n	8001fba <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e18:	4b6a      	ldr	r3, [pc, #424]	; (8001fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 030f 	and.w	r3, r3, #15
 8001e20:	683a      	ldr	r2, [r7, #0]
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d910      	bls.n	8001e48 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e26:	4b67      	ldr	r3, [pc, #412]	; (8001fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f023 020f 	bic.w	r2, r3, #15
 8001e2e:	4965      	ldr	r1, [pc, #404]	; (8001fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e36:	4b63      	ldr	r3, [pc, #396]	; (8001fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 030f 	and.w	r3, r3, #15
 8001e3e:	683a      	ldr	r2, [r7, #0]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d001      	beq.n	8001e48 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e0b8      	b.n	8001fba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0302 	and.w	r3, r3, #2
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d020      	beq.n	8001e96 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0304 	and.w	r3, r3, #4
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d005      	beq.n	8001e6c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e60:	4b59      	ldr	r3, [pc, #356]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	4a58      	ldr	r2, [pc, #352]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8001e66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e6a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0308 	and.w	r3, r3, #8
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d005      	beq.n	8001e84 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e78:	4b53      	ldr	r3, [pc, #332]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	4a52      	ldr	r2, [pc, #328]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8001e7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e82:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e84:	4b50      	ldr	r3, [pc, #320]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	494d      	ldr	r1, [pc, #308]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8001e92:	4313      	orrs	r3, r2
 8001e94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d040      	beq.n	8001f24 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d107      	bne.n	8001eba <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eaa:	4b47      	ldr	r3, [pc, #284]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d115      	bne.n	8001ee2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e07f      	b.n	8001fba <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d107      	bne.n	8001ed2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ec2:	4b41      	ldr	r3, [pc, #260]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d109      	bne.n	8001ee2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e073      	b.n	8001fba <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ed2:	4b3d      	ldr	r3, [pc, #244]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0302 	and.w	r3, r3, #2
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d101      	bne.n	8001ee2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e06b      	b.n	8001fba <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ee2:	4b39      	ldr	r3, [pc, #228]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f023 0203 	bic.w	r2, r3, #3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	4936      	ldr	r1, [pc, #216]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ef4:	f7fe ffda 	bl	8000eac <HAL_GetTick>
 8001ef8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001efa:	e00a      	b.n	8001f12 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001efc:	f7fe ffd6 	bl	8000eac <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e053      	b.n	8001fba <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f12:	4b2d      	ldr	r3, [pc, #180]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	f003 020c 	and.w	r2, r3, #12
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d1eb      	bne.n	8001efc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f24:	4b27      	ldr	r3, [pc, #156]	; (8001fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 030f 	and.w	r3, r3, #15
 8001f2c:	683a      	ldr	r2, [r7, #0]
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d210      	bcs.n	8001f54 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f32:	4b24      	ldr	r3, [pc, #144]	; (8001fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f023 020f 	bic.w	r2, r3, #15
 8001f3a:	4922      	ldr	r1, [pc, #136]	; (8001fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f42:	4b20      	ldr	r3, [pc, #128]	; (8001fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 030f 	and.w	r3, r3, #15
 8001f4a:	683a      	ldr	r2, [r7, #0]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d001      	beq.n	8001f54 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e032      	b.n	8001fba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0304 	and.w	r3, r3, #4
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d008      	beq.n	8001f72 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f60:	4b19      	ldr	r3, [pc, #100]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	4916      	ldr	r1, [pc, #88]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0308 	and.w	r3, r3, #8
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d009      	beq.n	8001f92 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f7e:	4b12      	ldr	r3, [pc, #72]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	691b      	ldr	r3, [r3, #16]
 8001f8a:	00db      	lsls	r3, r3, #3
 8001f8c:	490e      	ldr	r1, [pc, #56]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f92:	f000 f821 	bl	8001fd8 <HAL_RCC_GetSysClockFreq>
 8001f96:	4602      	mov	r2, r0
 8001f98:	4b0b      	ldr	r3, [pc, #44]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	091b      	lsrs	r3, r3, #4
 8001f9e:	f003 030f 	and.w	r3, r3, #15
 8001fa2:	490a      	ldr	r1, [pc, #40]	; (8001fcc <HAL_RCC_ClockConfig+0x1cc>)
 8001fa4:	5ccb      	ldrb	r3, [r1, r3]
 8001fa6:	fa22 f303 	lsr.w	r3, r2, r3
 8001faa:	4a09      	ldr	r2, [pc, #36]	; (8001fd0 <HAL_RCC_ClockConfig+0x1d0>)
 8001fac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001fae:	4b09      	ldr	r3, [pc, #36]	; (8001fd4 <HAL_RCC_ClockConfig+0x1d4>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7fe ff36 	bl	8000e24 <HAL_InitTick>

  return HAL_OK;
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3710      	adds	r7, #16
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	40023c00 	.word	0x40023c00
 8001fc8:	40023800 	.word	0x40023800
 8001fcc:	08004754 	.word	0x08004754
 8001fd0:	20000000 	.word	0x20000000
 8001fd4:	20000004 	.word	0x20000004

08001fd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001fdc:	b094      	sub	sp, #80	; 0x50
 8001fde:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	647b      	str	r3, [r7, #68]	; 0x44
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001fe8:	2300      	movs	r3, #0
 8001fea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8001fec:	2300      	movs	r3, #0
 8001fee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ff0:	4b79      	ldr	r3, [pc, #484]	; (80021d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	f003 030c 	and.w	r3, r3, #12
 8001ff8:	2b08      	cmp	r3, #8
 8001ffa:	d00d      	beq.n	8002018 <HAL_RCC_GetSysClockFreq+0x40>
 8001ffc:	2b08      	cmp	r3, #8
 8001ffe:	f200 80e1 	bhi.w	80021c4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002002:	2b00      	cmp	r3, #0
 8002004:	d002      	beq.n	800200c <HAL_RCC_GetSysClockFreq+0x34>
 8002006:	2b04      	cmp	r3, #4
 8002008:	d003      	beq.n	8002012 <HAL_RCC_GetSysClockFreq+0x3a>
 800200a:	e0db      	b.n	80021c4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800200c:	4b73      	ldr	r3, [pc, #460]	; (80021dc <HAL_RCC_GetSysClockFreq+0x204>)
 800200e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002010:	e0db      	b.n	80021ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002012:	4b73      	ldr	r3, [pc, #460]	; (80021e0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002014:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002016:	e0d8      	b.n	80021ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002018:	4b6f      	ldr	r3, [pc, #444]	; (80021d8 <HAL_RCC_GetSysClockFreq+0x200>)
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002020:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002022:	4b6d      	ldr	r3, [pc, #436]	; (80021d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d063      	beq.n	80020f6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800202e:	4b6a      	ldr	r3, [pc, #424]	; (80021d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	099b      	lsrs	r3, r3, #6
 8002034:	2200      	movs	r2, #0
 8002036:	63bb      	str	r3, [r7, #56]	; 0x38
 8002038:	63fa      	str	r2, [r7, #60]	; 0x3c
 800203a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800203c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002040:	633b      	str	r3, [r7, #48]	; 0x30
 8002042:	2300      	movs	r3, #0
 8002044:	637b      	str	r3, [r7, #52]	; 0x34
 8002046:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800204a:	4622      	mov	r2, r4
 800204c:	462b      	mov	r3, r5
 800204e:	f04f 0000 	mov.w	r0, #0
 8002052:	f04f 0100 	mov.w	r1, #0
 8002056:	0159      	lsls	r1, r3, #5
 8002058:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800205c:	0150      	lsls	r0, r2, #5
 800205e:	4602      	mov	r2, r0
 8002060:	460b      	mov	r3, r1
 8002062:	4621      	mov	r1, r4
 8002064:	1a51      	subs	r1, r2, r1
 8002066:	6139      	str	r1, [r7, #16]
 8002068:	4629      	mov	r1, r5
 800206a:	eb63 0301 	sbc.w	r3, r3, r1
 800206e:	617b      	str	r3, [r7, #20]
 8002070:	f04f 0200 	mov.w	r2, #0
 8002074:	f04f 0300 	mov.w	r3, #0
 8002078:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800207c:	4659      	mov	r1, fp
 800207e:	018b      	lsls	r3, r1, #6
 8002080:	4651      	mov	r1, sl
 8002082:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002086:	4651      	mov	r1, sl
 8002088:	018a      	lsls	r2, r1, #6
 800208a:	4651      	mov	r1, sl
 800208c:	ebb2 0801 	subs.w	r8, r2, r1
 8002090:	4659      	mov	r1, fp
 8002092:	eb63 0901 	sbc.w	r9, r3, r1
 8002096:	f04f 0200 	mov.w	r2, #0
 800209a:	f04f 0300 	mov.w	r3, #0
 800209e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80020a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80020a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80020aa:	4690      	mov	r8, r2
 80020ac:	4699      	mov	r9, r3
 80020ae:	4623      	mov	r3, r4
 80020b0:	eb18 0303 	adds.w	r3, r8, r3
 80020b4:	60bb      	str	r3, [r7, #8]
 80020b6:	462b      	mov	r3, r5
 80020b8:	eb49 0303 	adc.w	r3, r9, r3
 80020bc:	60fb      	str	r3, [r7, #12]
 80020be:	f04f 0200 	mov.w	r2, #0
 80020c2:	f04f 0300 	mov.w	r3, #0
 80020c6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80020ca:	4629      	mov	r1, r5
 80020cc:	024b      	lsls	r3, r1, #9
 80020ce:	4621      	mov	r1, r4
 80020d0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80020d4:	4621      	mov	r1, r4
 80020d6:	024a      	lsls	r2, r1, #9
 80020d8:	4610      	mov	r0, r2
 80020da:	4619      	mov	r1, r3
 80020dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020de:	2200      	movs	r2, #0
 80020e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80020e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80020e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80020e8:	f7fe f8ea 	bl	80002c0 <__aeabi_uldivmod>
 80020ec:	4602      	mov	r2, r0
 80020ee:	460b      	mov	r3, r1
 80020f0:	4613      	mov	r3, r2
 80020f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80020f4:	e058      	b.n	80021a8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020f6:	4b38      	ldr	r3, [pc, #224]	; (80021d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	099b      	lsrs	r3, r3, #6
 80020fc:	2200      	movs	r2, #0
 80020fe:	4618      	mov	r0, r3
 8002100:	4611      	mov	r1, r2
 8002102:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002106:	623b      	str	r3, [r7, #32]
 8002108:	2300      	movs	r3, #0
 800210a:	627b      	str	r3, [r7, #36]	; 0x24
 800210c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002110:	4642      	mov	r2, r8
 8002112:	464b      	mov	r3, r9
 8002114:	f04f 0000 	mov.w	r0, #0
 8002118:	f04f 0100 	mov.w	r1, #0
 800211c:	0159      	lsls	r1, r3, #5
 800211e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002122:	0150      	lsls	r0, r2, #5
 8002124:	4602      	mov	r2, r0
 8002126:	460b      	mov	r3, r1
 8002128:	4641      	mov	r1, r8
 800212a:	ebb2 0a01 	subs.w	sl, r2, r1
 800212e:	4649      	mov	r1, r9
 8002130:	eb63 0b01 	sbc.w	fp, r3, r1
 8002134:	f04f 0200 	mov.w	r2, #0
 8002138:	f04f 0300 	mov.w	r3, #0
 800213c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002140:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002144:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002148:	ebb2 040a 	subs.w	r4, r2, sl
 800214c:	eb63 050b 	sbc.w	r5, r3, fp
 8002150:	f04f 0200 	mov.w	r2, #0
 8002154:	f04f 0300 	mov.w	r3, #0
 8002158:	00eb      	lsls	r3, r5, #3
 800215a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800215e:	00e2      	lsls	r2, r4, #3
 8002160:	4614      	mov	r4, r2
 8002162:	461d      	mov	r5, r3
 8002164:	4643      	mov	r3, r8
 8002166:	18e3      	adds	r3, r4, r3
 8002168:	603b      	str	r3, [r7, #0]
 800216a:	464b      	mov	r3, r9
 800216c:	eb45 0303 	adc.w	r3, r5, r3
 8002170:	607b      	str	r3, [r7, #4]
 8002172:	f04f 0200 	mov.w	r2, #0
 8002176:	f04f 0300 	mov.w	r3, #0
 800217a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800217e:	4629      	mov	r1, r5
 8002180:	028b      	lsls	r3, r1, #10
 8002182:	4621      	mov	r1, r4
 8002184:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002188:	4621      	mov	r1, r4
 800218a:	028a      	lsls	r2, r1, #10
 800218c:	4610      	mov	r0, r2
 800218e:	4619      	mov	r1, r3
 8002190:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002192:	2200      	movs	r2, #0
 8002194:	61bb      	str	r3, [r7, #24]
 8002196:	61fa      	str	r2, [r7, #28]
 8002198:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800219c:	f7fe f890 	bl	80002c0 <__aeabi_uldivmod>
 80021a0:	4602      	mov	r2, r0
 80021a2:	460b      	mov	r3, r1
 80021a4:	4613      	mov	r3, r2
 80021a6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80021a8:	4b0b      	ldr	r3, [pc, #44]	; (80021d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	0c1b      	lsrs	r3, r3, #16
 80021ae:	f003 0303 	and.w	r3, r3, #3
 80021b2:	3301      	adds	r3, #1
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80021b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80021ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80021c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80021c2:	e002      	b.n	80021ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80021c4:	4b05      	ldr	r3, [pc, #20]	; (80021dc <HAL_RCC_GetSysClockFreq+0x204>)
 80021c6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80021c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3750      	adds	r7, #80	; 0x50
 80021d0:	46bd      	mov	sp, r7
 80021d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80021d6:	bf00      	nop
 80021d8:	40023800 	.word	0x40023800
 80021dc:	00f42400 	.word	0x00f42400
 80021e0:	007a1200 	.word	0x007a1200

080021e4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021e8:	4b03      	ldr	r3, [pc, #12]	; (80021f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80021ea:	681b      	ldr	r3, [r3, #0]
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	20000000 	.word	0x20000000

080021fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002200:	f7ff fff0 	bl	80021e4 <HAL_RCC_GetHCLKFreq>
 8002204:	4602      	mov	r2, r0
 8002206:	4b05      	ldr	r3, [pc, #20]	; (800221c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	0a9b      	lsrs	r3, r3, #10
 800220c:	f003 0307 	and.w	r3, r3, #7
 8002210:	4903      	ldr	r1, [pc, #12]	; (8002220 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002212:	5ccb      	ldrb	r3, [r1, r3]
 8002214:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002218:	4618      	mov	r0, r3
 800221a:	bd80      	pop	{r7, pc}
 800221c:	40023800 	.word	0x40023800
 8002220:	08004764 	.word	0x08004764

08002224 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002228:	f7ff ffdc 	bl	80021e4 <HAL_RCC_GetHCLKFreq>
 800222c:	4602      	mov	r2, r0
 800222e:	4b05      	ldr	r3, [pc, #20]	; (8002244 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	0b5b      	lsrs	r3, r3, #13
 8002234:	f003 0307 	and.w	r3, r3, #7
 8002238:	4903      	ldr	r1, [pc, #12]	; (8002248 <HAL_RCC_GetPCLK2Freq+0x24>)
 800223a:	5ccb      	ldrb	r3, [r1, r3]
 800223c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002240:	4618      	mov	r0, r3
 8002242:	bd80      	pop	{r7, pc}
 8002244:	40023800 	.word	0x40023800
 8002248:	08004764 	.word	0x08004764

0800224c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b088      	sub	sp, #32
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002254:	2300      	movs	r3, #0
 8002256:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002258:	2300      	movs	r3, #0
 800225a:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 800225c:	2300      	movs	r3, #0
 800225e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002260:	2300      	movs	r3, #0
 8002262:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0301 	and.w	r3, r3, #1
 800226c:	2b00      	cmp	r3, #0
 800226e:	d012      	beq.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002270:	4b65      	ldr	r3, [pc, #404]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	4a64      	ldr	r2, [pc, #400]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002276:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800227a:	6093      	str	r3, [r2, #8]
 800227c:	4b62      	ldr	r3, [pc, #392]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800227e:	689a      	ldr	r2, [r3, #8]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002284:	4960      	ldr	r1, [pc, #384]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002286:	4313      	orrs	r3, r2
 8002288:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800228e:	2b00      	cmp	r3, #0
 8002290:	d101      	bne.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 8002292:	2301      	movs	r3, #1
 8002294:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d017      	beq.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80022a2:	4b59      	ldr	r3, [pc, #356]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80022a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022b0:	4955      	ldr	r1, [pc, #340]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80022b2:	4313      	orrs	r3, r2
 80022b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80022c0:	d101      	bne.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 80022c2:	2301      	movs	r3, #1
 80022c4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d101      	bne.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 80022ce:	2301      	movs	r3, #1
 80022d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d017      	beq.n	800230e <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80022de:	4b4a      	ldr	r3, [pc, #296]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80022e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022e4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ec:	4946      	ldr	r1, [pc, #280]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80022ee:	4313      	orrs	r3, r2
 80022f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022fc:	d101      	bne.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 80022fe:	2301      	movs	r3, #1
 8002300:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002306:	2b00      	cmp	r3, #0
 8002308:	d101      	bne.n	800230e <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 800230a:	2301      	movs	r3, #1
 800230c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0320 	and.w	r3, r3, #32
 8002316:	2b00      	cmp	r3, #0
 8002318:	f000 808b 	beq.w	8002432 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800231c:	4b3a      	ldr	r3, [pc, #232]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800231e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002320:	4a39      	ldr	r2, [pc, #228]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002322:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002326:	6413      	str	r3, [r2, #64]	; 0x40
 8002328:	4b37      	ldr	r3, [pc, #220]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800232a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002330:	60fb      	str	r3, [r7, #12]
 8002332:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002334:	4b35      	ldr	r3, [pc, #212]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a34      	ldr	r2, [pc, #208]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800233a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800233e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002340:	f7fe fdb4 	bl	8000eac <HAL_GetTick>
 8002344:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002346:	e008      	b.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002348:	f7fe fdb0 	bl	8000eac <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b64      	cmp	r3, #100	; 0x64
 8002354:	d901      	bls.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e2bc      	b.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800235a:	4b2c      	ldr	r3, [pc, #176]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002362:	2b00      	cmp	r3, #0
 8002364:	d0f0      	beq.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002366:	4b28      	ldr	r3, [pc, #160]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800236a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800236e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d035      	beq.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800237a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800237e:	693a      	ldr	r2, [r7, #16]
 8002380:	429a      	cmp	r2, r3
 8002382:	d02e      	beq.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002384:	4b20      	ldr	r3, [pc, #128]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002388:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800238c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800238e:	4b1e      	ldr	r3, [pc, #120]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002392:	4a1d      	ldr	r2, [pc, #116]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002394:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002398:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800239a:	4b1b      	ldr	r3, [pc, #108]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800239c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800239e:	4a1a      	ldr	r2, [pc, #104]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80023a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023a4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80023a6:	4a18      	ldr	r2, [pc, #96]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80023ac:	4b16      	ldr	r3, [pc, #88]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80023ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023b0:	f003 0301 	and.w	r3, r3, #1
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d114      	bne.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b8:	f7fe fd78 	bl	8000eac <HAL_GetTick>
 80023bc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023be:	e00a      	b.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023c0:	f7fe fd74 	bl	8000eac <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d901      	bls.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	e27e      	b.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023d6:	4b0c      	ldr	r3, [pc, #48]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80023d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023da:	f003 0302 	and.w	r3, r3, #2
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d0ee      	beq.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80023ee:	d111      	bne.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 80023f0:	4b05      	ldr	r3, [pc, #20]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80023fc:	4b04      	ldr	r3, [pc, #16]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80023fe:	400b      	ands	r3, r1
 8002400:	4901      	ldr	r1, [pc, #4]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002402:	4313      	orrs	r3, r2
 8002404:	608b      	str	r3, [r1, #8]
 8002406:	e00b      	b.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8002408:	40023800 	.word	0x40023800
 800240c:	40007000 	.word	0x40007000
 8002410:	0ffffcff 	.word	0x0ffffcff
 8002414:	4ba4      	ldr	r3, [pc, #656]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	4aa3      	ldr	r2, [pc, #652]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800241a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800241e:	6093      	str	r3, [r2, #8]
 8002420:	4ba1      	ldr	r3, [pc, #644]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002422:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002428:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800242c:	499e      	ldr	r1, [pc, #632]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800242e:	4313      	orrs	r3, r2
 8002430:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0310 	and.w	r3, r3, #16
 800243a:	2b00      	cmp	r3, #0
 800243c:	d010      	beq.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800243e:	4b9a      	ldr	r3, [pc, #616]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002440:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002444:	4a98      	ldr	r2, [pc, #608]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002446:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800244a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800244e:	4b96      	ldr	r3, [pc, #600]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002450:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002458:	4993      	ldr	r1, [pc, #588]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800245a:	4313      	orrs	r3, r2
 800245c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d00a      	beq.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800246c:	4b8e      	ldr	r3, [pc, #568]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800246e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002472:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800247a:	498b      	ldr	r1, [pc, #556]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800247c:	4313      	orrs	r3, r2
 800247e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d00a      	beq.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800248e:	4b86      	ldr	r3, [pc, #536]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002490:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002494:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800249c:	4982      	ldr	r1, [pc, #520]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800249e:	4313      	orrs	r3, r2
 80024a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d00a      	beq.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80024b0:	4b7d      	ldr	r3, [pc, #500]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80024b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024be:	497a      	ldr	r1, [pc, #488]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80024c0:	4313      	orrs	r3, r2
 80024c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d00a      	beq.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024d2:	4b75      	ldr	r3, [pc, #468]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80024d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024d8:	f023 0203 	bic.w	r2, r3, #3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024e0:	4971      	ldr	r1, [pc, #452]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d00a      	beq.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80024f4:	4b6c      	ldr	r3, [pc, #432]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80024f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024fa:	f023 020c 	bic.w	r2, r3, #12
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002502:	4969      	ldr	r1, [pc, #420]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002504:	4313      	orrs	r3, r2
 8002506:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002512:	2b00      	cmp	r3, #0
 8002514:	d00a      	beq.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002516:	4b64      	ldr	r3, [pc, #400]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800251c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002524:	4960      	ldr	r1, [pc, #384]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002526:	4313      	orrs	r3, r2
 8002528:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002534:	2b00      	cmp	r3, #0
 8002536:	d00a      	beq.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002538:	4b5b      	ldr	r3, [pc, #364]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800253a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800253e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002546:	4958      	ldr	r1, [pc, #352]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002548:	4313      	orrs	r3, r2
 800254a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002556:	2b00      	cmp	r3, #0
 8002558:	d00a      	beq.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800255a:	4b53      	ldr	r3, [pc, #332]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800255c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002560:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002568:	494f      	ldr	r1, [pc, #316]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800256a:	4313      	orrs	r3, r2
 800256c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002578:	2b00      	cmp	r3, #0
 800257a:	d00a      	beq.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800257c:	4b4a      	ldr	r3, [pc, #296]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800257e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002582:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800258a:	4947      	ldr	r1, [pc, #284]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800258c:	4313      	orrs	r3, r2
 800258e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d00a      	beq.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800259e:	4b42      	ldr	r3, [pc, #264]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80025a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025a4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ac:	493e      	ldr	r1, [pc, #248]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d00a      	beq.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80025c0:	4b39      	ldr	r3, [pc, #228]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80025c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025c6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ce:	4936      	ldr	r1, [pc, #216]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d011      	beq.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80025e2:	4b31      	ldr	r3, [pc, #196]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80025e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025e8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025f0:	492d      	ldr	r1, [pc, #180]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80025f2:	4313      	orrs	r3, r2
 80025f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002600:	d101      	bne.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 8002602:	2301      	movs	r3, #1
 8002604:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d00a      	beq.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002612:	4b25      	ldr	r3, [pc, #148]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002614:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002618:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002620:	4921      	ldr	r1, [pc, #132]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002622:	4313      	orrs	r3, r2
 8002624:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d00a      	beq.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002634:	4b1c      	ldr	r3, [pc, #112]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800263a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002642:	4919      	ldr	r1, [pc, #100]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002644:	4313      	orrs	r3, r2
 8002646:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d00a      	beq.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002656:	4b14      	ldr	r3, [pc, #80]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002658:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800265c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002664:	4910      	ldr	r1, [pc, #64]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002666:	4313      	orrs	r3, r2
 8002668:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	2b01      	cmp	r3, #1
 8002670:	d006      	beq.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800267a:	2b00      	cmp	r3, #0
 800267c:	f000 809d 	beq.w	80027ba <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002680:	4b09      	ldr	r3, [pc, #36]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a08      	ldr	r2, [pc, #32]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002686:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800268a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800268c:	f7fe fc0e 	bl	8000eac <HAL_GetTick>
 8002690:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002692:	e00b      	b.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002694:	f7fe fc0a 	bl	8000eac <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b64      	cmp	r3, #100	; 0x64
 80026a0:	d904      	bls.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e116      	b.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x688>
 80026a6:	bf00      	nop
 80026a8:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80026ac:	4b8b      	ldr	r3, [pc, #556]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d1ed      	bne.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0301 	and.w	r3, r3, #1
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d017      	beq.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d113      	bne.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80026cc:	4b83      	ldr	r3, [pc, #524]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80026ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026d2:	0e1b      	lsrs	r3, r3, #24
 80026d4:	f003 030f 	and.w	r3, r3, #15
 80026d8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	019a      	lsls	r2, r3, #6
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	061b      	lsls	r3, r3, #24
 80026e4:	431a      	orrs	r2, r3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	071b      	lsls	r3, r3, #28
 80026ec:	497b      	ldr	r1, [pc, #492]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d004      	beq.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x4be>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002704:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002708:	d00a      	beq.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002712:	2b00      	cmp	r3, #0
 8002714:	d024      	beq.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800271a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800271e:	d11f      	bne.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002720:	4b6e      	ldr	r3, [pc, #440]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002722:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002726:	0f1b      	lsrs	r3, r3, #28
 8002728:	f003 0307 	and.w	r3, r3, #7
 800272c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	019a      	lsls	r2, r3, #6
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	061b      	lsls	r3, r3, #24
 800273a:	431a      	orrs	r2, r3
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	071b      	lsls	r3, r3, #28
 8002740:	4966      	ldr	r1, [pc, #408]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002742:	4313      	orrs	r3, r2
 8002744:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002748:	4b64      	ldr	r3, [pc, #400]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800274a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800274e:	f023 021f 	bic.w	r2, r3, #31
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	69db      	ldr	r3, [r3, #28]
 8002756:	3b01      	subs	r3, #1
 8002758:	4960      	ldr	r1, [pc, #384]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800275a:	4313      	orrs	r3, r2
 800275c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d00d      	beq.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	019a      	lsls	r2, r3, #6
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	061b      	lsls	r3, r3, #24
 8002778:	431a      	orrs	r2, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	071b      	lsls	r3, r3, #28
 8002780:	4956      	ldr	r1, [pc, #344]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002782:	4313      	orrs	r3, r2
 8002784:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002788:	4b54      	ldr	r3, [pc, #336]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a53      	ldr	r2, [pc, #332]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800278e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002792:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002794:	f7fe fb8a 	bl	8000eac <HAL_GetTick>
 8002798:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800279a:	e008      	b.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800279c:	f7fe fb86 	bl	8000eac <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b64      	cmp	r3, #100	; 0x64
 80027a8:	d901      	bls.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e092      	b.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80027ae:	4b4b      	ldr	r3, [pc, #300]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d0f0      	beq.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	2b01      	cmp	r3, #1
 80027be:	f040 8088 	bne.w	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80027c2:	4b46      	ldr	r3, [pc, #280]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a45      	ldr	r2, [pc, #276]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80027c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027ce:	f7fe fb6d 	bl	8000eac <HAL_GetTick>
 80027d2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80027d4:	e008      	b.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80027d6:	f7fe fb69 	bl	8000eac <HAL_GetTick>
 80027da:	4602      	mov	r2, r0
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	2b64      	cmp	r3, #100	; 0x64
 80027e2:	d901      	bls.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80027e4:	2303      	movs	r3, #3
 80027e6:	e075      	b.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80027e8:	4b3c      	ldr	r3, [pc, #240]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027f4:	d0ef      	beq.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d003      	beq.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x5be>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002806:	2b00      	cmp	r3, #0
 8002808:	d009      	beq.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002812:	2b00      	cmp	r3, #0
 8002814:	d024      	beq.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800281a:	2b00      	cmp	r3, #0
 800281c:	d120      	bne.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800281e:	4b2f      	ldr	r3, [pc, #188]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002820:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002824:	0c1b      	lsrs	r3, r3, #16
 8002826:	f003 0303 	and.w	r3, r3, #3
 800282a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	691b      	ldr	r3, [r3, #16]
 8002830:	019a      	lsls	r2, r3, #6
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	041b      	lsls	r3, r3, #16
 8002836:	431a      	orrs	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	695b      	ldr	r3, [r3, #20]
 800283c:	061b      	lsls	r3, r3, #24
 800283e:	4927      	ldr	r1, [pc, #156]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002840:	4313      	orrs	r3, r2
 8002842:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002846:	4b25      	ldr	r3, [pc, #148]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002848:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800284c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6a1b      	ldr	r3, [r3, #32]
 8002854:	3b01      	subs	r3, #1
 8002856:	021b      	lsls	r3, r3, #8
 8002858:	4920      	ldr	r1, [pc, #128]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800285a:	4313      	orrs	r3, r2
 800285c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d018      	beq.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x652>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002870:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002874:	d113      	bne.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002876:	4b19      	ldr	r3, [pc, #100]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002878:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800287c:	0e1b      	lsrs	r3, r3, #24
 800287e:	f003 030f 	and.w	r3, r3, #15
 8002882:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	691b      	ldr	r3, [r3, #16]
 8002888:	019a      	lsls	r2, r3, #6
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	699b      	ldr	r3, [r3, #24]
 800288e:	041b      	lsls	r3, r3, #16
 8002890:	431a      	orrs	r2, r3
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	061b      	lsls	r3, r3, #24
 8002896:	4911      	ldr	r1, [pc, #68]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002898:	4313      	orrs	r3, r2
 800289a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800289e:	4b0f      	ldr	r3, [pc, #60]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a0e      	ldr	r2, [pc, #56]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80028a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028aa:	f7fe faff 	bl	8000eac <HAL_GetTick>
 80028ae:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80028b0:	e008      	b.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80028b2:	f7fe fafb 	bl	8000eac <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	2b64      	cmp	r3, #100	; 0x64
 80028be:	d901      	bls.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e007      	b.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80028c4:	4b05      	ldr	r3, [pc, #20]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80028cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028d0:	d1ef      	bne.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 80028d2:	2300      	movs	r3, #0
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3720      	adds	r7, #32
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	40023800 	.word	0x40023800

080028e0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d101      	bne.n	80028f6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e071      	b.n	80029da <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	7f5b      	ldrb	r3, [r3, #29]
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d105      	bne.n	800290c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f7fe f8ca 	bl	8000aa0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2202      	movs	r2, #2
 8002910:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	f003 0310 	and.w	r3, r3, #16
 800291c:	2b10      	cmp	r3, #16
 800291e:	d053      	beq.n	80029c8 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	22ca      	movs	r2, #202	; 0xca
 8002926:	625a      	str	r2, [r3, #36]	; 0x24
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2253      	movs	r2, #83	; 0x53
 800292e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f000 f881 	bl	8002a38 <RTC_EnterInitMode>
 8002936:	4603      	mov	r3, r0
 8002938:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800293a:	7bfb      	ldrb	r3, [r7, #15]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d12a      	bne.n	8002996 <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	6899      	ldr	r1, [r3, #8]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	4b26      	ldr	r3, [pc, #152]	; (80029e4 <HAL_RTC_Init+0x104>)
 800294c:	400b      	ands	r3, r1
 800294e:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	6899      	ldr	r1, [r3, #8]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685a      	ldr	r2, [r3, #4]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	431a      	orrs	r2, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	695b      	ldr	r3, [r3, #20]
 8002964:	431a      	orrs	r2, r3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	430a      	orrs	r2, r1
 800296c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	68d2      	ldr	r2, [r2, #12]
 8002976:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	6919      	ldr	r1, [r3, #16]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	041a      	lsls	r2, r3, #16
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	430a      	orrs	r2, r1
 800298a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f000 f88a 	bl	8002aa6 <RTC_ExitInitMode>
 8002992:	4603      	mov	r3, r0
 8002994:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8002996:	7bfb      	ldrb	r3, [r7, #15]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d110      	bne.n	80029be <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f022 0208 	bic.w	r2, r2, #8
 80029aa:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	699a      	ldr	r2, [r3, #24]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	430a      	orrs	r2, r1
 80029bc:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	22ff      	movs	r2, #255	; 0xff
 80029c4:	625a      	str	r2, [r3, #36]	; 0x24
 80029c6:	e001      	b.n	80029cc <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80029c8:	2300      	movs	r3, #0
 80029ca:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80029cc:	7bfb      	ldrb	r3, [r7, #15]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d102      	bne.n	80029d8 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2201      	movs	r2, #1
 80029d6:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80029d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3710      	adds	r7, #16
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	ff8fffbf 	.word	0xff8fffbf

080029e8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80029f0:	2300      	movs	r3, #0
 80029f2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	68da      	ldr	r2, [r3, #12]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002a02:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a04:	f7fe fa52 	bl	8000eac <HAL_GetTick>
 8002a08:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002a0a:	e009      	b.n	8002a20 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002a0c:	f7fe fa4e 	bl	8000eac <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a1a:	d901      	bls.n	8002a20 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e007      	b.n	8002a30 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	f003 0320 	and.w	r3, r3, #32
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d0ee      	beq.n	8002a0c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8002a2e:	2300      	movs	r3, #0
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3710      	adds	r7, #16
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a40:	2300      	movs	r3, #0
 8002a42:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002a44:	2300      	movs	r3, #0
 8002a46:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d122      	bne.n	8002a9c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	68da      	ldr	r2, [r3, #12]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002a64:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002a66:	f7fe fa21 	bl	8000eac <HAL_GetTick>
 8002a6a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002a6c:	e00c      	b.n	8002a88 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002a6e:	f7fe fa1d 	bl	8000eac <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a7c:	d904      	bls.n	8002a88 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2204      	movs	r2, #4
 8002a82:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d102      	bne.n	8002a9c <RTC_EnterInitMode+0x64>
 8002a96:	7bfb      	ldrb	r3, [r7, #15]
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d1e8      	bne.n	8002a6e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3710      	adds	r7, #16
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}

08002aa6 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002aa6:	b580      	push	{r7, lr}
 8002aa8:	b084      	sub	sp, #16
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	68da      	ldr	r2, [r3, #12]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ac0:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f003 0320 	and.w	r3, r3, #32
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d10a      	bne.n	8002ae6 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f7ff ff89 	bl	80029e8 <HAL_RTC_WaitForSynchro>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d004      	beq.n	8002ae6 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2204      	movs	r2, #4
 8002ae0:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002ae6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3710      	adds	r7, #16
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b087      	sub	sp, #28
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	60b9      	str	r1, [r7, #8]
 8002afa:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8002afc:	4b59      	ldr	r3, [pc, #356]	; (8002c64 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a59      	ldr	r2, [pc, #356]	; (8002c68 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 8002b02:	fba2 2303 	umull	r2, r3, r2, r3
 8002b06:	0adb      	lsrs	r3, r3, #11
 8002b08:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002b0c:	fb02 f303 	mul.w	r3, r2, r3
 8002b10:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	7f1b      	ldrb	r3, [r3, #28]
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d101      	bne.n	8002b1e <HAL_RTCEx_SetWakeUpTimer_IT+0x2e>
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	e09b      	b.n	8002c56 <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2201      	movs	r2, #1
 8002b22:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2202      	movs	r2, #2
 8002b28:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	22ca      	movs	r2, #202	; 0xca
 8002b30:	625a      	str	r2, [r3, #36]	; 0x24
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	2253      	movs	r2, #83	; 0x53
 8002b38:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d017      	beq.n	8002b78 <HAL_RTCEx_SetWakeUpTimer_IT+0x88>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	1e5a      	subs	r2, r3, #1
 8002b4c:	617a      	str	r2, [r7, #20]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d10b      	bne.n	8002b6a <HAL_RTCEx_SetWakeUpTimer_IT+0x7a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	22ff      	movs	r2, #255	; 0xff
 8002b58:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2203      	movs	r2, #3
 8002b5e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2200      	movs	r2, #0
 8002b64:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e075      	b.n	8002c56 <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	f003 0304 	and.w	r3, r3, #4
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d1e7      	bne.n	8002b48 <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	689a      	ldr	r2, [r3, #8]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b86:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	b2da      	uxtb	r2, r3
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002b98:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8002b9a:	4b32      	ldr	r3, [pc, #200]	; (8002c64 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a32      	ldr	r2, [pc, #200]	; (8002c68 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 8002ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba4:	0adb      	lsrs	r3, r3, #11
 8002ba6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002baa:	fb02 f303 	mul.w	r3, r2, r3
 8002bae:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    if (count-- == 0U)
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	1e5a      	subs	r2, r3, #1
 8002bb4:	617a      	str	r2, [r7, #20]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d10b      	bne.n	8002bd2 <HAL_RTCEx_SetWakeUpTimer_IT+0xe2>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	22ff      	movs	r2, #255	; 0xff
 8002bc0:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2203      	movs	r2, #3
 8002bc6:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e041      	b.n	8002c56 <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	f003 0304 	and.w	r3, r3, #4
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d0e7      	beq.n	8002bb0 <HAL_RTCEx_SetWakeUpTimer_IT+0xc0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	689a      	ldr	r2, [r3, #8]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f022 0207 	bic.w	r2, r2, #7
 8002bee:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	6899      	ldr	r1, [r3, #8]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	430a      	orrs	r2, r1
 8002bfe:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	68ba      	ldr	r2, [r7, #8]
 8002c06:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8002c08:	4b18      	ldr	r3, [pc, #96]	; (8002c6c <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a17      	ldr	r2, [pc, #92]	; (8002c6c <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8002c0e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002c12:	6013      	str	r3, [r2, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8002c14:	4b15      	ldr	r3, [pc, #84]	; (8002c6c <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	4a14      	ldr	r2, [pc, #80]	; (8002c6c <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8002c1a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002c1e:	6093      	str	r3, [r2, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	689a      	ldr	r2, [r3, #8]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c2e:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	689a      	ldr	r2, [r3, #8]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c3e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	22ff      	movs	r2, #255	; 0xff
 8002c46:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2200      	movs	r2, #0
 8002c52:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	371c      	adds	r7, #28
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	20000000 	.word	0x20000000
 8002c68:	10624dd3 	.word	0x10624dd3
 8002c6c:	40013c00 	.word	0x40013c00

08002c70 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	7f1b      	ldrb	r3, [r3, #28]
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d101      	bne.n	8002c88 <HAL_RTCEx_DeactivateWakeUpTimer+0x18>
 8002c84:	2302      	movs	r3, #2
 8002c86:	e047      	b.n	8002d18 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2202      	movs	r2, #2
 8002c92:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	22ca      	movs	r2, #202	; 0xca
 8002c9a:	625a      	str	r2, [r3, #36]	; 0x24
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2253      	movs	r2, #83	; 0x53
 8002ca2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	689a      	ldr	r2, [r3, #8]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cb2:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	689a      	ldr	r2, [r3, #8]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002cc2:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002cc4:	f7fe f8f2 	bl	8000eac <HAL_GetTick>
 8002cc8:	60f8      	str	r0, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8002cca:	e013      	b.n	8002cf4 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002ccc:	f7fe f8ee 	bl	8000eac <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002cda:	d90b      	bls.n	8002cf4 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	22ff      	movs	r2, #255	; 0xff
 8002ce2:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2203      	movs	r2, #3
 8002ce8:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	e011      	b.n	8002d18 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	f003 0304 	and.w	r3, r3, #4
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d0e4      	beq.n	8002ccc <HAL_RTCEx_DeactivateWakeUpTimer+0x5c>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	22ff      	movs	r2, #255	; 0xff
 8002d08:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2200      	movs	r2, #0
 8002d14:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8002d16:	2300      	movs	r3, #0
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3710      	adds	r7, #16
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8002d28:	4b0e      	ldr	r3, [pc, #56]	; (8002d64 <HAL_RTCEx_WakeUpTimerIRQHandler+0x44>)
 8002d2a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002d2e:	615a      	str	r2, [r3, #20]

  /* Get the pending status of the Wakeup timer Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d00b      	beq.n	8002d56 <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the Wakeup timer interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	b2da      	uxtb	r2, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002d4e:	60da      	str	r2, [r3, #12]

    /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f000 f809 	bl	8002d68 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2201      	movs	r2, #1
 8002d5a:	775a      	strb	r2, [r3, #29]
}
 8002d5c:	bf00      	nop
 8002d5e:	3708      	adds	r7, #8
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	40013c00 	.word	0x40013c00

08002d68 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d101      	bne.n	8002d8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e040      	b.n	8002e10 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d106      	bne.n	8002da4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f7fd feb4 	bl	8000b0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2224      	movs	r2, #36	; 0x24
 8002da8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f022 0201 	bic.w	r2, r2, #1
 8002db8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f000 f8b0 	bl	8002f20 <UART_SetConfig>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d101      	bne.n	8002dca <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e022      	b.n	8002e10 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d002      	beq.n	8002dd8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f000 fb08 	bl	80033e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	685a      	ldr	r2, [r3, #4]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002de6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	689a      	ldr	r2, [r3, #8]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002df6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f042 0201 	orr.w	r2, r2, #1
 8002e06:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f000 fb8f 	bl	800352c <UART_CheckIdleState>
 8002e0e:	4603      	mov	r3, r0
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3708      	adds	r7, #8
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b08a      	sub	sp, #40	; 0x28
 8002e1c:	af02      	add	r7, sp, #8
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	60b9      	str	r1, [r7, #8]
 8002e22:	603b      	str	r3, [r7, #0]
 8002e24:	4613      	mov	r3, r2
 8002e26:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e2c:	2b20      	cmp	r3, #32
 8002e2e:	d171      	bne.n	8002f14 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d002      	beq.n	8002e3c <HAL_UART_Transmit+0x24>
 8002e36:	88fb      	ldrh	r3, [r7, #6]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d101      	bne.n	8002e40 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e06a      	b.n	8002f16 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2221      	movs	r2, #33	; 0x21
 8002e4c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e4e:	f7fe f82d 	bl	8000eac <HAL_GetTick>
 8002e52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	88fa      	ldrh	r2, [r7, #6]
 8002e58:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	88fa      	ldrh	r2, [r7, #6]
 8002e60:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e6c:	d108      	bne.n	8002e80 <HAL_UART_Transmit+0x68>
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	691b      	ldr	r3, [r3, #16]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d104      	bne.n	8002e80 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002e76:	2300      	movs	r3, #0
 8002e78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	61bb      	str	r3, [r7, #24]
 8002e7e:	e003      	b.n	8002e88 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e84:	2300      	movs	r3, #0
 8002e86:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002e88:	e02c      	b.n	8002ee4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	9300      	str	r3, [sp, #0]
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	2200      	movs	r2, #0
 8002e92:	2180      	movs	r1, #128	; 0x80
 8002e94:	68f8      	ldr	r0, [r7, #12]
 8002e96:	f000 fb80 	bl	800359a <UART_WaitOnFlagUntilTimeout>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d001      	beq.n	8002ea4 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	e038      	b.n	8002f16 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d10b      	bne.n	8002ec2 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002eaa:	69bb      	ldr	r3, [r7, #24]
 8002eac:	881b      	ldrh	r3, [r3, #0]
 8002eae:	461a      	mov	r2, r3
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002eb8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	3302      	adds	r3, #2
 8002ebe:	61bb      	str	r3, [r7, #24]
 8002ec0:	e007      	b.n	8002ed2 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	781a      	ldrb	r2, [r3, #0]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	3301      	adds	r3, #1
 8002ed0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	3b01      	subs	r3, #1
 8002edc:	b29a      	uxth	r2, r3
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d1cc      	bne.n	8002e8a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	9300      	str	r3, [sp, #0]
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	2140      	movs	r1, #64	; 0x40
 8002efa:	68f8      	ldr	r0, [r7, #12]
 8002efc:	f000 fb4d 	bl	800359a <UART_WaitOnFlagUntilTimeout>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d001      	beq.n	8002f0a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e005      	b.n	8002f16 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2220      	movs	r2, #32
 8002f0e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002f10:	2300      	movs	r3, #0
 8002f12:	e000      	b.n	8002f16 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002f14:	2302      	movs	r3, #2
  }
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3720      	adds	r7, #32
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
	...

08002f20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b088      	sub	sp, #32
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	689a      	ldr	r2, [r3, #8]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	691b      	ldr	r3, [r3, #16]
 8002f34:	431a      	orrs	r2, r3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	695b      	ldr	r3, [r3, #20]
 8002f3a:	431a      	orrs	r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	69db      	ldr	r3, [r3, #28]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	4ba6      	ldr	r3, [pc, #664]	; (80031e4 <UART_SetConfig+0x2c4>)
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	6812      	ldr	r2, [r2, #0]
 8002f52:	6979      	ldr	r1, [r7, #20]
 8002f54:	430b      	orrs	r3, r1
 8002f56:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	68da      	ldr	r2, [r3, #12]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	430a      	orrs	r2, r1
 8002f6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6a1b      	ldr	r3, [r3, #32]
 8002f78:	697a      	ldr	r2, [r7, #20]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	697a      	ldr	r2, [r7, #20]
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a94      	ldr	r2, [pc, #592]	; (80031e8 <UART_SetConfig+0x2c8>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d120      	bne.n	8002fde <UART_SetConfig+0xbe>
 8002f9c:	4b93      	ldr	r3, [pc, #588]	; (80031ec <UART_SetConfig+0x2cc>)
 8002f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fa2:	f003 0303 	and.w	r3, r3, #3
 8002fa6:	2b03      	cmp	r3, #3
 8002fa8:	d816      	bhi.n	8002fd8 <UART_SetConfig+0xb8>
 8002faa:	a201      	add	r2, pc, #4	; (adr r2, 8002fb0 <UART_SetConfig+0x90>)
 8002fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fb0:	08002fc1 	.word	0x08002fc1
 8002fb4:	08002fcd 	.word	0x08002fcd
 8002fb8:	08002fc7 	.word	0x08002fc7
 8002fbc:	08002fd3 	.word	0x08002fd3
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	77fb      	strb	r3, [r7, #31]
 8002fc4:	e150      	b.n	8003268 <UART_SetConfig+0x348>
 8002fc6:	2302      	movs	r3, #2
 8002fc8:	77fb      	strb	r3, [r7, #31]
 8002fca:	e14d      	b.n	8003268 <UART_SetConfig+0x348>
 8002fcc:	2304      	movs	r3, #4
 8002fce:	77fb      	strb	r3, [r7, #31]
 8002fd0:	e14a      	b.n	8003268 <UART_SetConfig+0x348>
 8002fd2:	2308      	movs	r3, #8
 8002fd4:	77fb      	strb	r3, [r7, #31]
 8002fd6:	e147      	b.n	8003268 <UART_SetConfig+0x348>
 8002fd8:	2310      	movs	r3, #16
 8002fda:	77fb      	strb	r3, [r7, #31]
 8002fdc:	e144      	b.n	8003268 <UART_SetConfig+0x348>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a83      	ldr	r2, [pc, #524]	; (80031f0 <UART_SetConfig+0x2d0>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d132      	bne.n	800304e <UART_SetConfig+0x12e>
 8002fe8:	4b80      	ldr	r3, [pc, #512]	; (80031ec <UART_SetConfig+0x2cc>)
 8002fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fee:	f003 030c 	and.w	r3, r3, #12
 8002ff2:	2b0c      	cmp	r3, #12
 8002ff4:	d828      	bhi.n	8003048 <UART_SetConfig+0x128>
 8002ff6:	a201      	add	r2, pc, #4	; (adr r2, 8002ffc <UART_SetConfig+0xdc>)
 8002ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ffc:	08003031 	.word	0x08003031
 8003000:	08003049 	.word	0x08003049
 8003004:	08003049 	.word	0x08003049
 8003008:	08003049 	.word	0x08003049
 800300c:	0800303d 	.word	0x0800303d
 8003010:	08003049 	.word	0x08003049
 8003014:	08003049 	.word	0x08003049
 8003018:	08003049 	.word	0x08003049
 800301c:	08003037 	.word	0x08003037
 8003020:	08003049 	.word	0x08003049
 8003024:	08003049 	.word	0x08003049
 8003028:	08003049 	.word	0x08003049
 800302c:	08003043 	.word	0x08003043
 8003030:	2300      	movs	r3, #0
 8003032:	77fb      	strb	r3, [r7, #31]
 8003034:	e118      	b.n	8003268 <UART_SetConfig+0x348>
 8003036:	2302      	movs	r3, #2
 8003038:	77fb      	strb	r3, [r7, #31]
 800303a:	e115      	b.n	8003268 <UART_SetConfig+0x348>
 800303c:	2304      	movs	r3, #4
 800303e:	77fb      	strb	r3, [r7, #31]
 8003040:	e112      	b.n	8003268 <UART_SetConfig+0x348>
 8003042:	2308      	movs	r3, #8
 8003044:	77fb      	strb	r3, [r7, #31]
 8003046:	e10f      	b.n	8003268 <UART_SetConfig+0x348>
 8003048:	2310      	movs	r3, #16
 800304a:	77fb      	strb	r3, [r7, #31]
 800304c:	e10c      	b.n	8003268 <UART_SetConfig+0x348>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a68      	ldr	r2, [pc, #416]	; (80031f4 <UART_SetConfig+0x2d4>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d120      	bne.n	800309a <UART_SetConfig+0x17a>
 8003058:	4b64      	ldr	r3, [pc, #400]	; (80031ec <UART_SetConfig+0x2cc>)
 800305a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800305e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003062:	2b30      	cmp	r3, #48	; 0x30
 8003064:	d013      	beq.n	800308e <UART_SetConfig+0x16e>
 8003066:	2b30      	cmp	r3, #48	; 0x30
 8003068:	d814      	bhi.n	8003094 <UART_SetConfig+0x174>
 800306a:	2b20      	cmp	r3, #32
 800306c:	d009      	beq.n	8003082 <UART_SetConfig+0x162>
 800306e:	2b20      	cmp	r3, #32
 8003070:	d810      	bhi.n	8003094 <UART_SetConfig+0x174>
 8003072:	2b00      	cmp	r3, #0
 8003074:	d002      	beq.n	800307c <UART_SetConfig+0x15c>
 8003076:	2b10      	cmp	r3, #16
 8003078:	d006      	beq.n	8003088 <UART_SetConfig+0x168>
 800307a:	e00b      	b.n	8003094 <UART_SetConfig+0x174>
 800307c:	2300      	movs	r3, #0
 800307e:	77fb      	strb	r3, [r7, #31]
 8003080:	e0f2      	b.n	8003268 <UART_SetConfig+0x348>
 8003082:	2302      	movs	r3, #2
 8003084:	77fb      	strb	r3, [r7, #31]
 8003086:	e0ef      	b.n	8003268 <UART_SetConfig+0x348>
 8003088:	2304      	movs	r3, #4
 800308a:	77fb      	strb	r3, [r7, #31]
 800308c:	e0ec      	b.n	8003268 <UART_SetConfig+0x348>
 800308e:	2308      	movs	r3, #8
 8003090:	77fb      	strb	r3, [r7, #31]
 8003092:	e0e9      	b.n	8003268 <UART_SetConfig+0x348>
 8003094:	2310      	movs	r3, #16
 8003096:	77fb      	strb	r3, [r7, #31]
 8003098:	e0e6      	b.n	8003268 <UART_SetConfig+0x348>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a56      	ldr	r2, [pc, #344]	; (80031f8 <UART_SetConfig+0x2d8>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d120      	bne.n	80030e6 <UART_SetConfig+0x1c6>
 80030a4:	4b51      	ldr	r3, [pc, #324]	; (80031ec <UART_SetConfig+0x2cc>)
 80030a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030aa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80030ae:	2bc0      	cmp	r3, #192	; 0xc0
 80030b0:	d013      	beq.n	80030da <UART_SetConfig+0x1ba>
 80030b2:	2bc0      	cmp	r3, #192	; 0xc0
 80030b4:	d814      	bhi.n	80030e0 <UART_SetConfig+0x1c0>
 80030b6:	2b80      	cmp	r3, #128	; 0x80
 80030b8:	d009      	beq.n	80030ce <UART_SetConfig+0x1ae>
 80030ba:	2b80      	cmp	r3, #128	; 0x80
 80030bc:	d810      	bhi.n	80030e0 <UART_SetConfig+0x1c0>
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d002      	beq.n	80030c8 <UART_SetConfig+0x1a8>
 80030c2:	2b40      	cmp	r3, #64	; 0x40
 80030c4:	d006      	beq.n	80030d4 <UART_SetConfig+0x1b4>
 80030c6:	e00b      	b.n	80030e0 <UART_SetConfig+0x1c0>
 80030c8:	2300      	movs	r3, #0
 80030ca:	77fb      	strb	r3, [r7, #31]
 80030cc:	e0cc      	b.n	8003268 <UART_SetConfig+0x348>
 80030ce:	2302      	movs	r3, #2
 80030d0:	77fb      	strb	r3, [r7, #31]
 80030d2:	e0c9      	b.n	8003268 <UART_SetConfig+0x348>
 80030d4:	2304      	movs	r3, #4
 80030d6:	77fb      	strb	r3, [r7, #31]
 80030d8:	e0c6      	b.n	8003268 <UART_SetConfig+0x348>
 80030da:	2308      	movs	r3, #8
 80030dc:	77fb      	strb	r3, [r7, #31]
 80030de:	e0c3      	b.n	8003268 <UART_SetConfig+0x348>
 80030e0:	2310      	movs	r3, #16
 80030e2:	77fb      	strb	r3, [r7, #31]
 80030e4:	e0c0      	b.n	8003268 <UART_SetConfig+0x348>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a44      	ldr	r2, [pc, #272]	; (80031fc <UART_SetConfig+0x2dc>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d125      	bne.n	800313c <UART_SetConfig+0x21c>
 80030f0:	4b3e      	ldr	r3, [pc, #248]	; (80031ec <UART_SetConfig+0x2cc>)
 80030f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030fe:	d017      	beq.n	8003130 <UART_SetConfig+0x210>
 8003100:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003104:	d817      	bhi.n	8003136 <UART_SetConfig+0x216>
 8003106:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800310a:	d00b      	beq.n	8003124 <UART_SetConfig+0x204>
 800310c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003110:	d811      	bhi.n	8003136 <UART_SetConfig+0x216>
 8003112:	2b00      	cmp	r3, #0
 8003114:	d003      	beq.n	800311e <UART_SetConfig+0x1fe>
 8003116:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800311a:	d006      	beq.n	800312a <UART_SetConfig+0x20a>
 800311c:	e00b      	b.n	8003136 <UART_SetConfig+0x216>
 800311e:	2300      	movs	r3, #0
 8003120:	77fb      	strb	r3, [r7, #31]
 8003122:	e0a1      	b.n	8003268 <UART_SetConfig+0x348>
 8003124:	2302      	movs	r3, #2
 8003126:	77fb      	strb	r3, [r7, #31]
 8003128:	e09e      	b.n	8003268 <UART_SetConfig+0x348>
 800312a:	2304      	movs	r3, #4
 800312c:	77fb      	strb	r3, [r7, #31]
 800312e:	e09b      	b.n	8003268 <UART_SetConfig+0x348>
 8003130:	2308      	movs	r3, #8
 8003132:	77fb      	strb	r3, [r7, #31]
 8003134:	e098      	b.n	8003268 <UART_SetConfig+0x348>
 8003136:	2310      	movs	r3, #16
 8003138:	77fb      	strb	r3, [r7, #31]
 800313a:	e095      	b.n	8003268 <UART_SetConfig+0x348>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a2f      	ldr	r2, [pc, #188]	; (8003200 <UART_SetConfig+0x2e0>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d125      	bne.n	8003192 <UART_SetConfig+0x272>
 8003146:	4b29      	ldr	r3, [pc, #164]	; (80031ec <UART_SetConfig+0x2cc>)
 8003148:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800314c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003150:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003154:	d017      	beq.n	8003186 <UART_SetConfig+0x266>
 8003156:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800315a:	d817      	bhi.n	800318c <UART_SetConfig+0x26c>
 800315c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003160:	d00b      	beq.n	800317a <UART_SetConfig+0x25a>
 8003162:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003166:	d811      	bhi.n	800318c <UART_SetConfig+0x26c>
 8003168:	2b00      	cmp	r3, #0
 800316a:	d003      	beq.n	8003174 <UART_SetConfig+0x254>
 800316c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003170:	d006      	beq.n	8003180 <UART_SetConfig+0x260>
 8003172:	e00b      	b.n	800318c <UART_SetConfig+0x26c>
 8003174:	2301      	movs	r3, #1
 8003176:	77fb      	strb	r3, [r7, #31]
 8003178:	e076      	b.n	8003268 <UART_SetConfig+0x348>
 800317a:	2302      	movs	r3, #2
 800317c:	77fb      	strb	r3, [r7, #31]
 800317e:	e073      	b.n	8003268 <UART_SetConfig+0x348>
 8003180:	2304      	movs	r3, #4
 8003182:	77fb      	strb	r3, [r7, #31]
 8003184:	e070      	b.n	8003268 <UART_SetConfig+0x348>
 8003186:	2308      	movs	r3, #8
 8003188:	77fb      	strb	r3, [r7, #31]
 800318a:	e06d      	b.n	8003268 <UART_SetConfig+0x348>
 800318c:	2310      	movs	r3, #16
 800318e:	77fb      	strb	r3, [r7, #31]
 8003190:	e06a      	b.n	8003268 <UART_SetConfig+0x348>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a1b      	ldr	r2, [pc, #108]	; (8003204 <UART_SetConfig+0x2e4>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d138      	bne.n	800320e <UART_SetConfig+0x2ee>
 800319c:	4b13      	ldr	r3, [pc, #76]	; (80031ec <UART_SetConfig+0x2cc>)
 800319e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031a2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80031a6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80031aa:	d017      	beq.n	80031dc <UART_SetConfig+0x2bc>
 80031ac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80031b0:	d82a      	bhi.n	8003208 <UART_SetConfig+0x2e8>
 80031b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031b6:	d00b      	beq.n	80031d0 <UART_SetConfig+0x2b0>
 80031b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031bc:	d824      	bhi.n	8003208 <UART_SetConfig+0x2e8>
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d003      	beq.n	80031ca <UART_SetConfig+0x2aa>
 80031c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031c6:	d006      	beq.n	80031d6 <UART_SetConfig+0x2b6>
 80031c8:	e01e      	b.n	8003208 <UART_SetConfig+0x2e8>
 80031ca:	2300      	movs	r3, #0
 80031cc:	77fb      	strb	r3, [r7, #31]
 80031ce:	e04b      	b.n	8003268 <UART_SetConfig+0x348>
 80031d0:	2302      	movs	r3, #2
 80031d2:	77fb      	strb	r3, [r7, #31]
 80031d4:	e048      	b.n	8003268 <UART_SetConfig+0x348>
 80031d6:	2304      	movs	r3, #4
 80031d8:	77fb      	strb	r3, [r7, #31]
 80031da:	e045      	b.n	8003268 <UART_SetConfig+0x348>
 80031dc:	2308      	movs	r3, #8
 80031de:	77fb      	strb	r3, [r7, #31]
 80031e0:	e042      	b.n	8003268 <UART_SetConfig+0x348>
 80031e2:	bf00      	nop
 80031e4:	efff69f3 	.word	0xefff69f3
 80031e8:	40011000 	.word	0x40011000
 80031ec:	40023800 	.word	0x40023800
 80031f0:	40004400 	.word	0x40004400
 80031f4:	40004800 	.word	0x40004800
 80031f8:	40004c00 	.word	0x40004c00
 80031fc:	40005000 	.word	0x40005000
 8003200:	40011400 	.word	0x40011400
 8003204:	40007800 	.word	0x40007800
 8003208:	2310      	movs	r3, #16
 800320a:	77fb      	strb	r3, [r7, #31]
 800320c:	e02c      	b.n	8003268 <UART_SetConfig+0x348>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a72      	ldr	r2, [pc, #456]	; (80033dc <UART_SetConfig+0x4bc>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d125      	bne.n	8003264 <UART_SetConfig+0x344>
 8003218:	4b71      	ldr	r3, [pc, #452]	; (80033e0 <UART_SetConfig+0x4c0>)
 800321a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800321e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003222:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003226:	d017      	beq.n	8003258 <UART_SetConfig+0x338>
 8003228:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800322c:	d817      	bhi.n	800325e <UART_SetConfig+0x33e>
 800322e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003232:	d00b      	beq.n	800324c <UART_SetConfig+0x32c>
 8003234:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003238:	d811      	bhi.n	800325e <UART_SetConfig+0x33e>
 800323a:	2b00      	cmp	r3, #0
 800323c:	d003      	beq.n	8003246 <UART_SetConfig+0x326>
 800323e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003242:	d006      	beq.n	8003252 <UART_SetConfig+0x332>
 8003244:	e00b      	b.n	800325e <UART_SetConfig+0x33e>
 8003246:	2300      	movs	r3, #0
 8003248:	77fb      	strb	r3, [r7, #31]
 800324a:	e00d      	b.n	8003268 <UART_SetConfig+0x348>
 800324c:	2302      	movs	r3, #2
 800324e:	77fb      	strb	r3, [r7, #31]
 8003250:	e00a      	b.n	8003268 <UART_SetConfig+0x348>
 8003252:	2304      	movs	r3, #4
 8003254:	77fb      	strb	r3, [r7, #31]
 8003256:	e007      	b.n	8003268 <UART_SetConfig+0x348>
 8003258:	2308      	movs	r3, #8
 800325a:	77fb      	strb	r3, [r7, #31]
 800325c:	e004      	b.n	8003268 <UART_SetConfig+0x348>
 800325e:	2310      	movs	r3, #16
 8003260:	77fb      	strb	r3, [r7, #31]
 8003262:	e001      	b.n	8003268 <UART_SetConfig+0x348>
 8003264:	2310      	movs	r3, #16
 8003266:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	69db      	ldr	r3, [r3, #28]
 800326c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003270:	d15b      	bne.n	800332a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003272:	7ffb      	ldrb	r3, [r7, #31]
 8003274:	2b08      	cmp	r3, #8
 8003276:	d828      	bhi.n	80032ca <UART_SetConfig+0x3aa>
 8003278:	a201      	add	r2, pc, #4	; (adr r2, 8003280 <UART_SetConfig+0x360>)
 800327a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800327e:	bf00      	nop
 8003280:	080032a5 	.word	0x080032a5
 8003284:	080032ad 	.word	0x080032ad
 8003288:	080032b5 	.word	0x080032b5
 800328c:	080032cb 	.word	0x080032cb
 8003290:	080032bb 	.word	0x080032bb
 8003294:	080032cb 	.word	0x080032cb
 8003298:	080032cb 	.word	0x080032cb
 800329c:	080032cb 	.word	0x080032cb
 80032a0:	080032c3 	.word	0x080032c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032a4:	f7fe ffaa 	bl	80021fc <HAL_RCC_GetPCLK1Freq>
 80032a8:	61b8      	str	r0, [r7, #24]
        break;
 80032aa:	e013      	b.n	80032d4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032ac:	f7fe ffba 	bl	8002224 <HAL_RCC_GetPCLK2Freq>
 80032b0:	61b8      	str	r0, [r7, #24]
        break;
 80032b2:	e00f      	b.n	80032d4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032b4:	4b4b      	ldr	r3, [pc, #300]	; (80033e4 <UART_SetConfig+0x4c4>)
 80032b6:	61bb      	str	r3, [r7, #24]
        break;
 80032b8:	e00c      	b.n	80032d4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032ba:	f7fe fe8d 	bl	8001fd8 <HAL_RCC_GetSysClockFreq>
 80032be:	61b8      	str	r0, [r7, #24]
        break;
 80032c0:	e008      	b.n	80032d4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032c6:	61bb      	str	r3, [r7, #24]
        break;
 80032c8:	e004      	b.n	80032d4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80032ca:	2300      	movs	r3, #0
 80032cc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	77bb      	strb	r3, [r7, #30]
        break;
 80032d2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80032d4:	69bb      	ldr	r3, [r7, #24]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d074      	beq.n	80033c4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80032da:	69bb      	ldr	r3, [r7, #24]
 80032dc:	005a      	lsls	r2, r3, #1
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	085b      	lsrs	r3, r3, #1
 80032e4:	441a      	add	r2, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ee:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	2b0f      	cmp	r3, #15
 80032f4:	d916      	bls.n	8003324 <UART_SetConfig+0x404>
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032fc:	d212      	bcs.n	8003324 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	b29b      	uxth	r3, r3
 8003302:	f023 030f 	bic.w	r3, r3, #15
 8003306:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	085b      	lsrs	r3, r3, #1
 800330c:	b29b      	uxth	r3, r3
 800330e:	f003 0307 	and.w	r3, r3, #7
 8003312:	b29a      	uxth	r2, r3
 8003314:	89fb      	ldrh	r3, [r7, #14]
 8003316:	4313      	orrs	r3, r2
 8003318:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	89fa      	ldrh	r2, [r7, #14]
 8003320:	60da      	str	r2, [r3, #12]
 8003322:	e04f      	b.n	80033c4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	77bb      	strb	r3, [r7, #30]
 8003328:	e04c      	b.n	80033c4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800332a:	7ffb      	ldrb	r3, [r7, #31]
 800332c:	2b08      	cmp	r3, #8
 800332e:	d828      	bhi.n	8003382 <UART_SetConfig+0x462>
 8003330:	a201      	add	r2, pc, #4	; (adr r2, 8003338 <UART_SetConfig+0x418>)
 8003332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003336:	bf00      	nop
 8003338:	0800335d 	.word	0x0800335d
 800333c:	08003365 	.word	0x08003365
 8003340:	0800336d 	.word	0x0800336d
 8003344:	08003383 	.word	0x08003383
 8003348:	08003373 	.word	0x08003373
 800334c:	08003383 	.word	0x08003383
 8003350:	08003383 	.word	0x08003383
 8003354:	08003383 	.word	0x08003383
 8003358:	0800337b 	.word	0x0800337b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800335c:	f7fe ff4e 	bl	80021fc <HAL_RCC_GetPCLK1Freq>
 8003360:	61b8      	str	r0, [r7, #24]
        break;
 8003362:	e013      	b.n	800338c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003364:	f7fe ff5e 	bl	8002224 <HAL_RCC_GetPCLK2Freq>
 8003368:	61b8      	str	r0, [r7, #24]
        break;
 800336a:	e00f      	b.n	800338c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800336c:	4b1d      	ldr	r3, [pc, #116]	; (80033e4 <UART_SetConfig+0x4c4>)
 800336e:	61bb      	str	r3, [r7, #24]
        break;
 8003370:	e00c      	b.n	800338c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003372:	f7fe fe31 	bl	8001fd8 <HAL_RCC_GetSysClockFreq>
 8003376:	61b8      	str	r0, [r7, #24]
        break;
 8003378:	e008      	b.n	800338c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800337a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800337e:	61bb      	str	r3, [r7, #24]
        break;
 8003380:	e004      	b.n	800338c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003382:	2300      	movs	r3, #0
 8003384:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	77bb      	strb	r3, [r7, #30]
        break;
 800338a:	bf00      	nop
    }

    if (pclk != 0U)
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d018      	beq.n	80033c4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	085a      	lsrs	r2, r3, #1
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	441a      	add	r2, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033a4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	2b0f      	cmp	r3, #15
 80033aa:	d909      	bls.n	80033c0 <UART_SetConfig+0x4a0>
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033b2:	d205      	bcs.n	80033c0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	b29a      	uxth	r2, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	60da      	str	r2, [r3, #12]
 80033be:	e001      	b.n	80033c4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80033d0:	7fbb      	ldrb	r3, [r7, #30]
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3720      	adds	r7, #32
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	40007c00 	.word	0x40007c00
 80033e0:	40023800 	.word	0x40023800
 80033e4:	00f42400 	.word	0x00f42400

080033e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f4:	f003 0301 	and.w	r3, r3, #1
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d00a      	beq.n	8003412 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	430a      	orrs	r2, r1
 8003410:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003416:	f003 0302 	and.w	r3, r3, #2
 800341a:	2b00      	cmp	r3, #0
 800341c:	d00a      	beq.n	8003434 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	430a      	orrs	r2, r1
 8003432:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003438:	f003 0304 	and.w	r3, r3, #4
 800343c:	2b00      	cmp	r3, #0
 800343e:	d00a      	beq.n	8003456 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	430a      	orrs	r2, r1
 8003454:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345a:	f003 0308 	and.w	r3, r3, #8
 800345e:	2b00      	cmp	r3, #0
 8003460:	d00a      	beq.n	8003478 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	430a      	orrs	r2, r1
 8003476:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347c:	f003 0310 	and.w	r3, r3, #16
 8003480:	2b00      	cmp	r3, #0
 8003482:	d00a      	beq.n	800349a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	430a      	orrs	r2, r1
 8003498:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349e:	f003 0320 	and.w	r3, r3, #32
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d00a      	beq.n	80034bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	430a      	orrs	r2, r1
 80034ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d01a      	beq.n	80034fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	430a      	orrs	r2, r1
 80034dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034e6:	d10a      	bne.n	80034fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	430a      	orrs	r2, r1
 80034fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003506:	2b00      	cmp	r3, #0
 8003508:	d00a      	beq.n	8003520 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	430a      	orrs	r2, r1
 800351e:	605a      	str	r2, [r3, #4]
  }
}
 8003520:	bf00      	nop
 8003522:	370c      	adds	r7, #12
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr

0800352c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b086      	sub	sp, #24
 8003530:	af02      	add	r7, sp, #8
 8003532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800353c:	f7fd fcb6 	bl	8000eac <HAL_GetTick>
 8003540:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0308 	and.w	r3, r3, #8
 800354c:	2b08      	cmp	r3, #8
 800354e:	d10e      	bne.n	800356e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003550:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003554:	9300      	str	r3, [sp, #0]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2200      	movs	r2, #0
 800355a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f000 f81b 	bl	800359a <UART_WaitOnFlagUntilTimeout>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d001      	beq.n	800356e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e011      	b.n	8003592 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2220      	movs	r2, #32
 8003572:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2220      	movs	r2, #32
 8003578:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	3710      	adds	r7, #16
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}

0800359a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800359a:	b580      	push	{r7, lr}
 800359c:	b09c      	sub	sp, #112	; 0x70
 800359e:	af00      	add	r7, sp, #0
 80035a0:	60f8      	str	r0, [r7, #12]
 80035a2:	60b9      	str	r1, [r7, #8]
 80035a4:	603b      	str	r3, [r7, #0]
 80035a6:	4613      	mov	r3, r2
 80035a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035aa:	e0a7      	b.n	80036fc <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035b2:	f000 80a3 	beq.w	80036fc <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035b6:	f7fd fc79 	bl	8000eac <HAL_GetTick>
 80035ba:	4602      	mov	r2, r0
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d302      	bcc.n	80035cc <UART_WaitOnFlagUntilTimeout+0x32>
 80035c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d13f      	bne.n	800364c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035d4:	e853 3f00 	ldrex	r3, [r3]
 80035d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80035da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80035e0:	667b      	str	r3, [r7, #100]	; 0x64
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	461a      	mov	r2, r3
 80035e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80035ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80035ec:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80035f0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80035f2:	e841 2300 	strex	r3, r2, [r1]
 80035f6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80035f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d1e6      	bne.n	80035cc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	3308      	adds	r3, #8
 8003604:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003606:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003608:	e853 3f00 	ldrex	r3, [r3]
 800360c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800360e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003610:	f023 0301 	bic.w	r3, r3, #1
 8003614:	663b      	str	r3, [r7, #96]	; 0x60
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	3308      	adds	r3, #8
 800361c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800361e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003620:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003622:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003624:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003626:	e841 2300 	strex	r3, r2, [r1]
 800362a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800362c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800362e:	2b00      	cmp	r3, #0
 8003630:	d1e5      	bne.n	80035fe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2220      	movs	r2, #32
 8003636:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2220      	movs	r2, #32
 800363c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2200      	movs	r2, #0
 8003644:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003648:	2303      	movs	r3, #3
 800364a:	e068      	b.n	800371e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0304 	and.w	r3, r3, #4
 8003656:	2b00      	cmp	r3, #0
 8003658:	d050      	beq.n	80036fc <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	69db      	ldr	r3, [r3, #28]
 8003660:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003664:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003668:	d148      	bne.n	80036fc <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003672:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800367a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800367c:	e853 3f00 	ldrex	r3, [r3]
 8003680:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003684:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003688:	66fb      	str	r3, [r7, #108]	; 0x6c
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	461a      	mov	r2, r3
 8003690:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003692:	637b      	str	r3, [r7, #52]	; 0x34
 8003694:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003696:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003698:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800369a:	e841 2300 	strex	r3, r2, [r1]
 800369e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80036a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d1e6      	bne.n	8003674 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	3308      	adds	r3, #8
 80036ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	e853 3f00 	ldrex	r3, [r3]
 80036b4:	613b      	str	r3, [r7, #16]
   return(result);
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	f023 0301 	bic.w	r3, r3, #1
 80036bc:	66bb      	str	r3, [r7, #104]	; 0x68
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	3308      	adds	r3, #8
 80036c4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80036c6:	623a      	str	r2, [r7, #32]
 80036c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ca:	69f9      	ldr	r1, [r7, #28]
 80036cc:	6a3a      	ldr	r2, [r7, #32]
 80036ce:	e841 2300 	strex	r3, r2, [r1]
 80036d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d1e5      	bne.n	80036a6 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2220      	movs	r2, #32
 80036de:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2220      	movs	r2, #32
 80036e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2220      	movs	r2, #32
 80036ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80036f8:	2303      	movs	r3, #3
 80036fa:	e010      	b.n	800371e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	69da      	ldr	r2, [r3, #28]
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	4013      	ands	r3, r2
 8003706:	68ba      	ldr	r2, [r7, #8]
 8003708:	429a      	cmp	r2, r3
 800370a:	bf0c      	ite	eq
 800370c:	2301      	moveq	r3, #1
 800370e:	2300      	movne	r3, #0
 8003710:	b2db      	uxtb	r3, r3
 8003712:	461a      	mov	r2, r3
 8003714:	79fb      	ldrb	r3, [r7, #7]
 8003716:	429a      	cmp	r2, r3
 8003718:	f43f af48 	beq.w	80035ac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800371c:	2300      	movs	r3, #0
}
 800371e:	4618      	mov	r0, r3
 8003720:	3770      	adds	r7, #112	; 0x70
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
	...

08003728 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003728:	b084      	sub	sp, #16
 800372a:	b580      	push	{r7, lr}
 800372c:	b084      	sub	sp, #16
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
 8003732:	f107 001c 	add.w	r0, r7, #28
 8003736:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800373a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800373c:	2b01      	cmp	r3, #1
 800373e:	d126      	bne.n	800378e <USB_CoreInit+0x66>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003744:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	68da      	ldr	r2, [r3, #12]
 8003750:	4b38      	ldr	r3, [pc, #224]	; (8003834 <USB_CoreInit+0x10c>)
 8003752:	4013      	ands	r3, r2
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	60d3      	str	r3, [r2, #12]

#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	f043 0210 	orr.w	r2, r3, #16
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	60da      	str	r2, [r3, #12]
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003770:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003772:	2b01      	cmp	r3, #1
 8003774:	d105      	bne.n	8003782 <USB_CoreInit+0x5a>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 fad0 	bl	8003d28 <USB_CoreReset>
 8003788:	4603      	mov	r3, r0
 800378a:	73fb      	strb	r3, [r7, #15]
 800378c:	e03a      	b.n	8003804 <USB_CoreInit+0xdc>
  }
#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800378e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003790:	2b03      	cmp	r3, #3
 8003792:	d126      	bne.n	80037e2 <USB_CoreInit+0xba>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003798:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The UTMI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	68da      	ldr	r2, [r3, #12]
 80037a4:	4b23      	ldr	r3, [pc, #140]	; (8003834 <USB_CoreInit+0x10c>)
 80037a6:	4013      	ands	r3, r2
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	60da      	str	r2, [r3, #12]

    /* Select UTMI Interface */
    USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	f023 0210 	bic.w	r2, r3, #16
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	60da      	str	r2, [r3, #12]
    {
      return HAL_ERROR;
    }
#endif /* USBPHYC */

    if (cfg.use_external_vbus == 1U)
 80037c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d105      	bne.n	80037d6 <USB_CoreInit+0xae>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f000 faa6 	bl	8003d28 <USB_CoreReset>
 80037dc:	4603      	mov	r3, r0
 80037de:	73fb      	strb	r3, [r7, #15]
 80037e0:	e010      	b.n	8003804 <USB_CoreInit+0xdc>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f000 fa9a 	bl	8003d28 <USB_CoreReset>
 80037f4:	4603      	mov	r3, r0
 80037f6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037fc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8003804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003806:	2b01      	cmp	r3, #1
 8003808:	d10b      	bne.n	8003822 <USB_CoreInit+0xfa>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	f043 0206 	orr.w	r2, r3, #6
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	f043 0220 	orr.w	r2, r3, #32
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003822:	7bfb      	ldrb	r3, [r7, #15]
}
 8003824:	4618      	mov	r0, r3
 8003826:	3710      	adds	r7, #16
 8003828:	46bd      	mov	sp, r7
 800382a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800382e:	b004      	add	sp, #16
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop
 8003834:	ffbdffbf 	.word	0xffbdffbf

08003838 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	f023 0201 	bic.w	r2, r3, #1
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800384c:	2300      	movs	r3, #0
}
 800384e:	4618      	mov	r0, r3
 8003850:	370c      	adds	r7, #12
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr

0800385a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800385a:	b580      	push	{r7, lr}
 800385c:	b084      	sub	sp, #16
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
 8003862:	460b      	mov	r3, r1
 8003864:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003866:	2300      	movs	r3, #0
 8003868:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003876:	78fb      	ldrb	r3, [r7, #3]
 8003878:	2b01      	cmp	r3, #1
 800387a:	d115      	bne.n	80038a8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003888:	2001      	movs	r0, #1
 800388a:	f7fd fb1b 	bl	8000ec4 <HAL_Delay>
      ms++;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	3301      	adds	r3, #1
 8003892:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f000 fa39 	bl	8003d0c <USB_GetMode>
 800389a:	4603      	mov	r3, r0
 800389c:	2b01      	cmp	r3, #1
 800389e:	d01e      	beq.n	80038de <USB_SetCurrentMode+0x84>
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2b31      	cmp	r3, #49	; 0x31
 80038a4:	d9f0      	bls.n	8003888 <USB_SetCurrentMode+0x2e>
 80038a6:	e01a      	b.n	80038de <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80038a8:	78fb      	ldrb	r3, [r7, #3]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d115      	bne.n	80038da <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80038ba:	2001      	movs	r0, #1
 80038bc:	f7fd fb02 	bl	8000ec4 <HAL_Delay>
      ms++;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	3301      	adds	r3, #1
 80038c4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f000 fa20 	bl	8003d0c <USB_GetMode>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d005      	beq.n	80038de <USB_SetCurrentMode+0x84>
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2b31      	cmp	r3, #49	; 0x31
 80038d6:	d9f0      	bls.n	80038ba <USB_SetCurrentMode+0x60>
 80038d8:	e001      	b.n	80038de <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e005      	b.n	80038ea <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2b32      	cmp	r3, #50	; 0x32
 80038e2:	d101      	bne.n	80038e8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e000      	b.n	80038ea <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3710      	adds	r7, #16
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
	...

080038f4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80038f4:	b084      	sub	sp, #16
 80038f6:	b580      	push	{r7, lr}
 80038f8:	b086      	sub	sp, #24
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
 80038fe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003902:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003906:	2300      	movs	r3, #0
 8003908:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800390e:	2300      	movs	r3, #0
 8003910:	613b      	str	r3, [r7, #16]
 8003912:	e009      	b.n	8003928 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	3340      	adds	r3, #64	; 0x40
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	4413      	add	r3, r2
 800391e:	2200      	movs	r2, #0
 8003920:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	3301      	adds	r3, #1
 8003926:	613b      	str	r3, [r7, #16]
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	2b0e      	cmp	r3, #14
 800392c:	d9f2      	bls.n	8003914 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800392e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003930:	2b00      	cmp	r3, #0
 8003932:	d11c      	bne.n	800396e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	68fa      	ldr	r2, [r7, #12]
 800393e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003942:	f043 0302 	orr.w	r3, r3, #2
 8003946:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800394c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	601a      	str	r2, [r3, #0]
 800396c:	e005      	b.n	800397a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003972:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003980:	461a      	mov	r2, r3
 8003982:	2300      	movs	r3, #0
 8003984:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800398c:	4619      	mov	r1, r3
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003994:	461a      	mov	r2, r3
 8003996:	680b      	ldr	r3, [r1, #0]
 8003998:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800399a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800399c:	2b01      	cmp	r3, #1
 800399e:	d10c      	bne.n	80039ba <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80039a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d104      	bne.n	80039b0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80039a6:	2100      	movs	r1, #0
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f000 f975 	bl	8003c98 <USB_SetDevSpeed>
 80039ae:	e018      	b.n	80039e2 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80039b0:	2101      	movs	r1, #1
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 f970 	bl	8003c98 <USB_SetDevSpeed>
 80039b8:	e013      	b.n	80039e2 <USB_DevInit+0xee>
    }
  }
#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80039ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039bc:	2b03      	cmp	r3, #3
 80039be:	d10c      	bne.n	80039da <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80039c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d104      	bne.n	80039d0 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80039c6:	2100      	movs	r1, #0
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f000 f965 	bl	8003c98 <USB_SetDevSpeed>
 80039ce:	e008      	b.n	80039e2 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80039d0:	2101      	movs	r1, #1
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 f960 	bl	8003c98 <USB_SetDevSpeed>
 80039d8:	e003      	b.n	80039e2 <USB_DevInit+0xee>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80039da:	2103      	movs	r1, #3
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f000 f95b 	bl	8003c98 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80039e2:	2110      	movs	r1, #16
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f000 f8f3 	bl	8003bd0 <USB_FlushTxFifo>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d001      	beq.n	80039f4 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f000 f91f 	bl	8003c38 <USB_FlushRxFifo>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d001      	beq.n	8003a04 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a16:	461a      	mov	r2, r3
 8003a18:	2300      	movs	r3, #0
 8003a1a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a22:	461a      	mov	r2, r3
 8003a24:	2300      	movs	r3, #0
 8003a26:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a28:	2300      	movs	r3, #0
 8003a2a:	613b      	str	r3, [r7, #16]
 8003a2c:	e043      	b.n	8003ab6 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	015a      	lsls	r2, r3, #5
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	4413      	add	r3, r2
 8003a36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a44:	d118      	bne.n	8003a78 <USB_DevInit+0x184>
    {
      if (i == 0U)
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d10a      	bne.n	8003a62 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	015a      	lsls	r2, r3, #5
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	4413      	add	r3, r2
 8003a54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a58:	461a      	mov	r2, r3
 8003a5a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003a5e:	6013      	str	r3, [r2, #0]
 8003a60:	e013      	b.n	8003a8a <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	015a      	lsls	r2, r3, #5
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	4413      	add	r3, r2
 8003a6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a6e:	461a      	mov	r2, r3
 8003a70:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003a74:	6013      	str	r3, [r2, #0]
 8003a76:	e008      	b.n	8003a8a <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	015a      	lsls	r2, r3, #5
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	4413      	add	r3, r2
 8003a80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a84:	461a      	mov	r2, r3
 8003a86:	2300      	movs	r3, #0
 8003a88:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	015a      	lsls	r2, r3, #5
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	4413      	add	r3, r2
 8003a92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a96:	461a      	mov	r2, r3
 8003a98:	2300      	movs	r3, #0
 8003a9a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	015a      	lsls	r2, r3, #5
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003aae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	613b      	str	r3, [r7, #16]
 8003ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab8:	693a      	ldr	r2, [r7, #16]
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d3b7      	bcc.n	8003a2e <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003abe:	2300      	movs	r3, #0
 8003ac0:	613b      	str	r3, [r7, #16]
 8003ac2:	e043      	b.n	8003b4c <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	015a      	lsls	r2, r3, #5
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	4413      	add	r3, r2
 8003acc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ad6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ada:	d118      	bne.n	8003b0e <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d10a      	bne.n	8003af8 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	015a      	lsls	r2, r3, #5
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	4413      	add	r3, r2
 8003aea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aee:	461a      	mov	r2, r3
 8003af0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003af4:	6013      	str	r3, [r2, #0]
 8003af6:	e013      	b.n	8003b20 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	015a      	lsls	r2, r3, #5
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	4413      	add	r3, r2
 8003b00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b04:	461a      	mov	r2, r3
 8003b06:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003b0a:	6013      	str	r3, [r2, #0]
 8003b0c:	e008      	b.n	8003b20 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	015a      	lsls	r2, r3, #5
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	4413      	add	r3, r2
 8003b16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	015a      	lsls	r2, r3, #5
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	4413      	add	r3, r2
 8003b28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	2300      	movs	r3, #0
 8003b30:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	015a      	lsls	r2, r3, #5
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	4413      	add	r3, r2
 8003b3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b3e:	461a      	mov	r2, r3
 8003b40:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003b44:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	3301      	adds	r3, #1
 8003b4a:	613b      	str	r3, [r7, #16]
 8003b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4e:	693a      	ldr	r2, [r7, #16]
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d3b7      	bcc.n	8003ac4 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b5a:	691b      	ldr	r3, [r3, #16]
 8003b5c:	68fa      	ldr	r2, [r7, #12]
 8003b5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b62:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b66:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003b74:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d105      	bne.n	8003b88 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	699b      	ldr	r3, [r3, #24]
 8003b80:	f043 0210 	orr.w	r2, r3, #16
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	699a      	ldr	r2, [r3, #24]
 8003b8c:	4b0e      	ldr	r3, [pc, #56]	; (8003bc8 <USB_DevInit+0x2d4>)
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003b94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d005      	beq.n	8003ba6 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	f043 0208 	orr.w	r2, r3, #8
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003ba6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d105      	bne.n	8003bb8 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	699a      	ldr	r2, [r3, #24]
 8003bb0:	4b06      	ldr	r3, [pc, #24]	; (8003bcc <USB_DevInit+0x2d8>)
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003bb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3718      	adds	r7, #24
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003bc4:	b004      	add	sp, #16
 8003bc6:	4770      	bx	lr
 8003bc8:	803c3800 	.word	0x803c3800
 8003bcc:	40000004 	.word	0x40000004

08003bd0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b085      	sub	sp, #20
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	3301      	adds	r3, #1
 8003be2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	4a13      	ldr	r2, [pc, #76]	; (8003c34 <USB_FlushTxFifo+0x64>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d901      	bls.n	8003bf0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003bec:	2303      	movs	r3, #3
 8003bee:	e01b      	b.n	8003c28 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	691b      	ldr	r3, [r3, #16]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	daf2      	bge.n	8003bde <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	019b      	lsls	r3, r3, #6
 8003c00:	f043 0220 	orr.w	r2, r3, #32
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	4a08      	ldr	r2, [pc, #32]	; (8003c34 <USB_FlushTxFifo+0x64>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d901      	bls.n	8003c1a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e006      	b.n	8003c28 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	f003 0320 	and.w	r3, r3, #32
 8003c22:	2b20      	cmp	r3, #32
 8003c24:	d0f0      	beq.n	8003c08 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003c26:	2300      	movs	r3, #0
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3714      	adds	r7, #20
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr
 8003c34:	00030d40 	.word	0x00030d40

08003c38 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b085      	sub	sp, #20
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003c40:	2300      	movs	r3, #0
 8003c42:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	3301      	adds	r3, #1
 8003c48:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	4a11      	ldr	r2, [pc, #68]	; (8003c94 <USB_FlushRxFifo+0x5c>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d901      	bls.n	8003c56 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e018      	b.n	8003c88 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	691b      	ldr	r3, [r3, #16]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	daf2      	bge.n	8003c44 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2210      	movs	r2, #16
 8003c66:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	3301      	adds	r3, #1
 8003c6c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	4a08      	ldr	r2, [pc, #32]	; (8003c94 <USB_FlushRxFifo+0x5c>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d901      	bls.n	8003c7a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	e006      	b.n	8003c88 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	691b      	ldr	r3, [r3, #16]
 8003c7e:	f003 0310 	and.w	r3, r3, #16
 8003c82:	2b10      	cmp	r3, #16
 8003c84:	d0f0      	beq.n	8003c68 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003c86:	2300      	movs	r3, #0
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3714      	adds	r7, #20
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr
 8003c94:	00030d40 	.word	0x00030d40

08003c98 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b085      	sub	sp, #20
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	460b      	mov	r3, r1
 8003ca2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	78fb      	ldrb	r3, [r7, #3]
 8003cb2:	68f9      	ldr	r1, [r7, #12]
 8003cb4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003cbc:	2300      	movs	r3, #0
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3714      	adds	r7, #20
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr

08003cca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003cca:	b480      	push	{r7}
 8003ccc:	b085      	sub	sp, #20
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	68fa      	ldr	r2, [r7, #12]
 8003ce0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003ce4:	f023 0303 	bic.w	r3, r3, #3
 8003ce8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	68fa      	ldr	r2, [r7, #12]
 8003cf4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cf8:	f043 0302 	orr.w	r3, r3, #2
 8003cfc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003cfe:	2300      	movs	r3, #0
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3714      	adds	r7, #20
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	695b      	ldr	r3, [r3, #20]
 8003d18:	f003 0301 	and.w	r3, r3, #1
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	370c      	adds	r7, #12
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr

08003d28 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b085      	sub	sp, #20
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003d30:	2300      	movs	r3, #0
 8003d32:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	3301      	adds	r3, #1
 8003d38:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	4a13      	ldr	r2, [pc, #76]	; (8003d8c <USB_CoreReset+0x64>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d901      	bls.n	8003d46 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e01b      	b.n	8003d7e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	691b      	ldr	r3, [r3, #16]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	daf2      	bge.n	8003d34 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	f043 0201 	orr.w	r2, r3, #1
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	3301      	adds	r3, #1
 8003d62:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	4a09      	ldr	r2, [pc, #36]	; (8003d8c <USB_CoreReset+0x64>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d901      	bls.n	8003d70 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	e006      	b.n	8003d7e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	691b      	ldr	r3, [r3, #16]
 8003d74:	f003 0301 	and.w	r3, r3, #1
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d0f0      	beq.n	8003d5e <USB_CoreReset+0x36>

  return HAL_OK;
 8003d7c:	2300      	movs	r3, #0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3714      	adds	r7, #20
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr
 8003d8a:	bf00      	nop
 8003d8c:	00030d40 	.word	0x00030d40

08003d90 <siprintf>:
 8003d90:	b40e      	push	{r1, r2, r3}
 8003d92:	b500      	push	{lr}
 8003d94:	b09c      	sub	sp, #112	; 0x70
 8003d96:	ab1d      	add	r3, sp, #116	; 0x74
 8003d98:	9002      	str	r0, [sp, #8]
 8003d9a:	9006      	str	r0, [sp, #24]
 8003d9c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003da0:	4809      	ldr	r0, [pc, #36]	; (8003dc8 <siprintf+0x38>)
 8003da2:	9107      	str	r1, [sp, #28]
 8003da4:	9104      	str	r1, [sp, #16]
 8003da6:	4909      	ldr	r1, [pc, #36]	; (8003dcc <siprintf+0x3c>)
 8003da8:	f853 2b04 	ldr.w	r2, [r3], #4
 8003dac:	9105      	str	r1, [sp, #20]
 8003dae:	6800      	ldr	r0, [r0, #0]
 8003db0:	9301      	str	r3, [sp, #4]
 8003db2:	a902      	add	r1, sp, #8
 8003db4:	f000 f992 	bl	80040dc <_svfiprintf_r>
 8003db8:	9b02      	ldr	r3, [sp, #8]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	701a      	strb	r2, [r3, #0]
 8003dbe:	b01c      	add	sp, #112	; 0x70
 8003dc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8003dc4:	b003      	add	sp, #12
 8003dc6:	4770      	bx	lr
 8003dc8:	20000058 	.word	0x20000058
 8003dcc:	ffff0208 	.word	0xffff0208

08003dd0 <memset>:
 8003dd0:	4402      	add	r2, r0
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d100      	bne.n	8003dda <memset+0xa>
 8003dd8:	4770      	bx	lr
 8003dda:	f803 1b01 	strb.w	r1, [r3], #1
 8003dde:	e7f9      	b.n	8003dd4 <memset+0x4>

08003de0 <__errno>:
 8003de0:	4b01      	ldr	r3, [pc, #4]	; (8003de8 <__errno+0x8>)
 8003de2:	6818      	ldr	r0, [r3, #0]
 8003de4:	4770      	bx	lr
 8003de6:	bf00      	nop
 8003de8:	20000058 	.word	0x20000058

08003dec <__libc_init_array>:
 8003dec:	b570      	push	{r4, r5, r6, lr}
 8003dee:	4d0d      	ldr	r5, [pc, #52]	; (8003e24 <__libc_init_array+0x38>)
 8003df0:	4c0d      	ldr	r4, [pc, #52]	; (8003e28 <__libc_init_array+0x3c>)
 8003df2:	1b64      	subs	r4, r4, r5
 8003df4:	10a4      	asrs	r4, r4, #2
 8003df6:	2600      	movs	r6, #0
 8003df8:	42a6      	cmp	r6, r4
 8003dfa:	d109      	bne.n	8003e10 <__libc_init_array+0x24>
 8003dfc:	4d0b      	ldr	r5, [pc, #44]	; (8003e2c <__libc_init_array+0x40>)
 8003dfe:	4c0c      	ldr	r4, [pc, #48]	; (8003e30 <__libc_init_array+0x44>)
 8003e00:	f000 fc6a 	bl	80046d8 <_init>
 8003e04:	1b64      	subs	r4, r4, r5
 8003e06:	10a4      	asrs	r4, r4, #2
 8003e08:	2600      	movs	r6, #0
 8003e0a:	42a6      	cmp	r6, r4
 8003e0c:	d105      	bne.n	8003e1a <__libc_init_array+0x2e>
 8003e0e:	bd70      	pop	{r4, r5, r6, pc}
 8003e10:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e14:	4798      	blx	r3
 8003e16:	3601      	adds	r6, #1
 8003e18:	e7ee      	b.n	8003df8 <__libc_init_array+0xc>
 8003e1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e1e:	4798      	blx	r3
 8003e20:	3601      	adds	r6, #1
 8003e22:	e7f2      	b.n	8003e0a <__libc_init_array+0x1e>
 8003e24:	080047a8 	.word	0x080047a8
 8003e28:	080047a8 	.word	0x080047a8
 8003e2c:	080047a8 	.word	0x080047a8
 8003e30:	080047ac 	.word	0x080047ac

08003e34 <__retarget_lock_acquire_recursive>:
 8003e34:	4770      	bx	lr

08003e36 <__retarget_lock_release_recursive>:
 8003e36:	4770      	bx	lr

08003e38 <_free_r>:
 8003e38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003e3a:	2900      	cmp	r1, #0
 8003e3c:	d044      	beq.n	8003ec8 <_free_r+0x90>
 8003e3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e42:	9001      	str	r0, [sp, #4]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	f1a1 0404 	sub.w	r4, r1, #4
 8003e4a:	bfb8      	it	lt
 8003e4c:	18e4      	addlt	r4, r4, r3
 8003e4e:	f000 f8df 	bl	8004010 <__malloc_lock>
 8003e52:	4a1e      	ldr	r2, [pc, #120]	; (8003ecc <_free_r+0x94>)
 8003e54:	9801      	ldr	r0, [sp, #4]
 8003e56:	6813      	ldr	r3, [r2, #0]
 8003e58:	b933      	cbnz	r3, 8003e68 <_free_r+0x30>
 8003e5a:	6063      	str	r3, [r4, #4]
 8003e5c:	6014      	str	r4, [r2, #0]
 8003e5e:	b003      	add	sp, #12
 8003e60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003e64:	f000 b8da 	b.w	800401c <__malloc_unlock>
 8003e68:	42a3      	cmp	r3, r4
 8003e6a:	d908      	bls.n	8003e7e <_free_r+0x46>
 8003e6c:	6825      	ldr	r5, [r4, #0]
 8003e6e:	1961      	adds	r1, r4, r5
 8003e70:	428b      	cmp	r3, r1
 8003e72:	bf01      	itttt	eq
 8003e74:	6819      	ldreq	r1, [r3, #0]
 8003e76:	685b      	ldreq	r3, [r3, #4]
 8003e78:	1949      	addeq	r1, r1, r5
 8003e7a:	6021      	streq	r1, [r4, #0]
 8003e7c:	e7ed      	b.n	8003e5a <_free_r+0x22>
 8003e7e:	461a      	mov	r2, r3
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	b10b      	cbz	r3, 8003e88 <_free_r+0x50>
 8003e84:	42a3      	cmp	r3, r4
 8003e86:	d9fa      	bls.n	8003e7e <_free_r+0x46>
 8003e88:	6811      	ldr	r1, [r2, #0]
 8003e8a:	1855      	adds	r5, r2, r1
 8003e8c:	42a5      	cmp	r5, r4
 8003e8e:	d10b      	bne.n	8003ea8 <_free_r+0x70>
 8003e90:	6824      	ldr	r4, [r4, #0]
 8003e92:	4421      	add	r1, r4
 8003e94:	1854      	adds	r4, r2, r1
 8003e96:	42a3      	cmp	r3, r4
 8003e98:	6011      	str	r1, [r2, #0]
 8003e9a:	d1e0      	bne.n	8003e5e <_free_r+0x26>
 8003e9c:	681c      	ldr	r4, [r3, #0]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	6053      	str	r3, [r2, #4]
 8003ea2:	440c      	add	r4, r1
 8003ea4:	6014      	str	r4, [r2, #0]
 8003ea6:	e7da      	b.n	8003e5e <_free_r+0x26>
 8003ea8:	d902      	bls.n	8003eb0 <_free_r+0x78>
 8003eaa:	230c      	movs	r3, #12
 8003eac:	6003      	str	r3, [r0, #0]
 8003eae:	e7d6      	b.n	8003e5e <_free_r+0x26>
 8003eb0:	6825      	ldr	r5, [r4, #0]
 8003eb2:	1961      	adds	r1, r4, r5
 8003eb4:	428b      	cmp	r3, r1
 8003eb6:	bf04      	itt	eq
 8003eb8:	6819      	ldreq	r1, [r3, #0]
 8003eba:	685b      	ldreq	r3, [r3, #4]
 8003ebc:	6063      	str	r3, [r4, #4]
 8003ebe:	bf04      	itt	eq
 8003ec0:	1949      	addeq	r1, r1, r5
 8003ec2:	6021      	streq	r1, [r4, #0]
 8003ec4:	6054      	str	r4, [r2, #4]
 8003ec6:	e7ca      	b.n	8003e5e <_free_r+0x26>
 8003ec8:	b003      	add	sp, #12
 8003eca:	bd30      	pop	{r4, r5, pc}
 8003ecc:	20000770 	.word	0x20000770

08003ed0 <sbrk_aligned>:
 8003ed0:	b570      	push	{r4, r5, r6, lr}
 8003ed2:	4e0e      	ldr	r6, [pc, #56]	; (8003f0c <sbrk_aligned+0x3c>)
 8003ed4:	460c      	mov	r4, r1
 8003ed6:	6831      	ldr	r1, [r6, #0]
 8003ed8:	4605      	mov	r5, r0
 8003eda:	b911      	cbnz	r1, 8003ee2 <sbrk_aligned+0x12>
 8003edc:	f000 fba6 	bl	800462c <_sbrk_r>
 8003ee0:	6030      	str	r0, [r6, #0]
 8003ee2:	4621      	mov	r1, r4
 8003ee4:	4628      	mov	r0, r5
 8003ee6:	f000 fba1 	bl	800462c <_sbrk_r>
 8003eea:	1c43      	adds	r3, r0, #1
 8003eec:	d00a      	beq.n	8003f04 <sbrk_aligned+0x34>
 8003eee:	1cc4      	adds	r4, r0, #3
 8003ef0:	f024 0403 	bic.w	r4, r4, #3
 8003ef4:	42a0      	cmp	r0, r4
 8003ef6:	d007      	beq.n	8003f08 <sbrk_aligned+0x38>
 8003ef8:	1a21      	subs	r1, r4, r0
 8003efa:	4628      	mov	r0, r5
 8003efc:	f000 fb96 	bl	800462c <_sbrk_r>
 8003f00:	3001      	adds	r0, #1
 8003f02:	d101      	bne.n	8003f08 <sbrk_aligned+0x38>
 8003f04:	f04f 34ff 	mov.w	r4, #4294967295
 8003f08:	4620      	mov	r0, r4
 8003f0a:	bd70      	pop	{r4, r5, r6, pc}
 8003f0c:	20000774 	.word	0x20000774

08003f10 <_malloc_r>:
 8003f10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f14:	1ccd      	adds	r5, r1, #3
 8003f16:	f025 0503 	bic.w	r5, r5, #3
 8003f1a:	3508      	adds	r5, #8
 8003f1c:	2d0c      	cmp	r5, #12
 8003f1e:	bf38      	it	cc
 8003f20:	250c      	movcc	r5, #12
 8003f22:	2d00      	cmp	r5, #0
 8003f24:	4607      	mov	r7, r0
 8003f26:	db01      	blt.n	8003f2c <_malloc_r+0x1c>
 8003f28:	42a9      	cmp	r1, r5
 8003f2a:	d905      	bls.n	8003f38 <_malloc_r+0x28>
 8003f2c:	230c      	movs	r3, #12
 8003f2e:	603b      	str	r3, [r7, #0]
 8003f30:	2600      	movs	r6, #0
 8003f32:	4630      	mov	r0, r6
 8003f34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f38:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800400c <_malloc_r+0xfc>
 8003f3c:	f000 f868 	bl	8004010 <__malloc_lock>
 8003f40:	f8d8 3000 	ldr.w	r3, [r8]
 8003f44:	461c      	mov	r4, r3
 8003f46:	bb5c      	cbnz	r4, 8003fa0 <_malloc_r+0x90>
 8003f48:	4629      	mov	r1, r5
 8003f4a:	4638      	mov	r0, r7
 8003f4c:	f7ff ffc0 	bl	8003ed0 <sbrk_aligned>
 8003f50:	1c43      	adds	r3, r0, #1
 8003f52:	4604      	mov	r4, r0
 8003f54:	d155      	bne.n	8004002 <_malloc_r+0xf2>
 8003f56:	f8d8 4000 	ldr.w	r4, [r8]
 8003f5a:	4626      	mov	r6, r4
 8003f5c:	2e00      	cmp	r6, #0
 8003f5e:	d145      	bne.n	8003fec <_malloc_r+0xdc>
 8003f60:	2c00      	cmp	r4, #0
 8003f62:	d048      	beq.n	8003ff6 <_malloc_r+0xe6>
 8003f64:	6823      	ldr	r3, [r4, #0]
 8003f66:	4631      	mov	r1, r6
 8003f68:	4638      	mov	r0, r7
 8003f6a:	eb04 0903 	add.w	r9, r4, r3
 8003f6e:	f000 fb5d 	bl	800462c <_sbrk_r>
 8003f72:	4581      	cmp	r9, r0
 8003f74:	d13f      	bne.n	8003ff6 <_malloc_r+0xe6>
 8003f76:	6821      	ldr	r1, [r4, #0]
 8003f78:	1a6d      	subs	r5, r5, r1
 8003f7a:	4629      	mov	r1, r5
 8003f7c:	4638      	mov	r0, r7
 8003f7e:	f7ff ffa7 	bl	8003ed0 <sbrk_aligned>
 8003f82:	3001      	adds	r0, #1
 8003f84:	d037      	beq.n	8003ff6 <_malloc_r+0xe6>
 8003f86:	6823      	ldr	r3, [r4, #0]
 8003f88:	442b      	add	r3, r5
 8003f8a:	6023      	str	r3, [r4, #0]
 8003f8c:	f8d8 3000 	ldr.w	r3, [r8]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d038      	beq.n	8004006 <_malloc_r+0xf6>
 8003f94:	685a      	ldr	r2, [r3, #4]
 8003f96:	42a2      	cmp	r2, r4
 8003f98:	d12b      	bne.n	8003ff2 <_malloc_r+0xe2>
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	605a      	str	r2, [r3, #4]
 8003f9e:	e00f      	b.n	8003fc0 <_malloc_r+0xb0>
 8003fa0:	6822      	ldr	r2, [r4, #0]
 8003fa2:	1b52      	subs	r2, r2, r5
 8003fa4:	d41f      	bmi.n	8003fe6 <_malloc_r+0xd6>
 8003fa6:	2a0b      	cmp	r2, #11
 8003fa8:	d917      	bls.n	8003fda <_malloc_r+0xca>
 8003faa:	1961      	adds	r1, r4, r5
 8003fac:	42a3      	cmp	r3, r4
 8003fae:	6025      	str	r5, [r4, #0]
 8003fb0:	bf18      	it	ne
 8003fb2:	6059      	strne	r1, [r3, #4]
 8003fb4:	6863      	ldr	r3, [r4, #4]
 8003fb6:	bf08      	it	eq
 8003fb8:	f8c8 1000 	streq.w	r1, [r8]
 8003fbc:	5162      	str	r2, [r4, r5]
 8003fbe:	604b      	str	r3, [r1, #4]
 8003fc0:	4638      	mov	r0, r7
 8003fc2:	f104 060b 	add.w	r6, r4, #11
 8003fc6:	f000 f829 	bl	800401c <__malloc_unlock>
 8003fca:	f026 0607 	bic.w	r6, r6, #7
 8003fce:	1d23      	adds	r3, r4, #4
 8003fd0:	1af2      	subs	r2, r6, r3
 8003fd2:	d0ae      	beq.n	8003f32 <_malloc_r+0x22>
 8003fd4:	1b9b      	subs	r3, r3, r6
 8003fd6:	50a3      	str	r3, [r4, r2]
 8003fd8:	e7ab      	b.n	8003f32 <_malloc_r+0x22>
 8003fda:	42a3      	cmp	r3, r4
 8003fdc:	6862      	ldr	r2, [r4, #4]
 8003fde:	d1dd      	bne.n	8003f9c <_malloc_r+0x8c>
 8003fe0:	f8c8 2000 	str.w	r2, [r8]
 8003fe4:	e7ec      	b.n	8003fc0 <_malloc_r+0xb0>
 8003fe6:	4623      	mov	r3, r4
 8003fe8:	6864      	ldr	r4, [r4, #4]
 8003fea:	e7ac      	b.n	8003f46 <_malloc_r+0x36>
 8003fec:	4634      	mov	r4, r6
 8003fee:	6876      	ldr	r6, [r6, #4]
 8003ff0:	e7b4      	b.n	8003f5c <_malloc_r+0x4c>
 8003ff2:	4613      	mov	r3, r2
 8003ff4:	e7cc      	b.n	8003f90 <_malloc_r+0x80>
 8003ff6:	230c      	movs	r3, #12
 8003ff8:	603b      	str	r3, [r7, #0]
 8003ffa:	4638      	mov	r0, r7
 8003ffc:	f000 f80e 	bl	800401c <__malloc_unlock>
 8004000:	e797      	b.n	8003f32 <_malloc_r+0x22>
 8004002:	6025      	str	r5, [r4, #0]
 8004004:	e7dc      	b.n	8003fc0 <_malloc_r+0xb0>
 8004006:	605b      	str	r3, [r3, #4]
 8004008:	deff      	udf	#255	; 0xff
 800400a:	bf00      	nop
 800400c:	20000770 	.word	0x20000770

08004010 <__malloc_lock>:
 8004010:	4801      	ldr	r0, [pc, #4]	; (8004018 <__malloc_lock+0x8>)
 8004012:	f7ff bf0f 	b.w	8003e34 <__retarget_lock_acquire_recursive>
 8004016:	bf00      	nop
 8004018:	2000076c 	.word	0x2000076c

0800401c <__malloc_unlock>:
 800401c:	4801      	ldr	r0, [pc, #4]	; (8004024 <__malloc_unlock+0x8>)
 800401e:	f7ff bf0a 	b.w	8003e36 <__retarget_lock_release_recursive>
 8004022:	bf00      	nop
 8004024:	2000076c 	.word	0x2000076c

08004028 <__ssputs_r>:
 8004028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800402c:	688e      	ldr	r6, [r1, #8]
 800402e:	461f      	mov	r7, r3
 8004030:	42be      	cmp	r6, r7
 8004032:	680b      	ldr	r3, [r1, #0]
 8004034:	4682      	mov	sl, r0
 8004036:	460c      	mov	r4, r1
 8004038:	4690      	mov	r8, r2
 800403a:	d82c      	bhi.n	8004096 <__ssputs_r+0x6e>
 800403c:	898a      	ldrh	r2, [r1, #12]
 800403e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004042:	d026      	beq.n	8004092 <__ssputs_r+0x6a>
 8004044:	6965      	ldr	r5, [r4, #20]
 8004046:	6909      	ldr	r1, [r1, #16]
 8004048:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800404c:	eba3 0901 	sub.w	r9, r3, r1
 8004050:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004054:	1c7b      	adds	r3, r7, #1
 8004056:	444b      	add	r3, r9
 8004058:	106d      	asrs	r5, r5, #1
 800405a:	429d      	cmp	r5, r3
 800405c:	bf38      	it	cc
 800405e:	461d      	movcc	r5, r3
 8004060:	0553      	lsls	r3, r2, #21
 8004062:	d527      	bpl.n	80040b4 <__ssputs_r+0x8c>
 8004064:	4629      	mov	r1, r5
 8004066:	f7ff ff53 	bl	8003f10 <_malloc_r>
 800406a:	4606      	mov	r6, r0
 800406c:	b360      	cbz	r0, 80040c8 <__ssputs_r+0xa0>
 800406e:	6921      	ldr	r1, [r4, #16]
 8004070:	464a      	mov	r2, r9
 8004072:	f000 faeb 	bl	800464c <memcpy>
 8004076:	89a3      	ldrh	r3, [r4, #12]
 8004078:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800407c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004080:	81a3      	strh	r3, [r4, #12]
 8004082:	6126      	str	r6, [r4, #16]
 8004084:	6165      	str	r5, [r4, #20]
 8004086:	444e      	add	r6, r9
 8004088:	eba5 0509 	sub.w	r5, r5, r9
 800408c:	6026      	str	r6, [r4, #0]
 800408e:	60a5      	str	r5, [r4, #8]
 8004090:	463e      	mov	r6, r7
 8004092:	42be      	cmp	r6, r7
 8004094:	d900      	bls.n	8004098 <__ssputs_r+0x70>
 8004096:	463e      	mov	r6, r7
 8004098:	6820      	ldr	r0, [r4, #0]
 800409a:	4632      	mov	r2, r6
 800409c:	4641      	mov	r1, r8
 800409e:	f000 faab 	bl	80045f8 <memmove>
 80040a2:	68a3      	ldr	r3, [r4, #8]
 80040a4:	1b9b      	subs	r3, r3, r6
 80040a6:	60a3      	str	r3, [r4, #8]
 80040a8:	6823      	ldr	r3, [r4, #0]
 80040aa:	4433      	add	r3, r6
 80040ac:	6023      	str	r3, [r4, #0]
 80040ae:	2000      	movs	r0, #0
 80040b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040b4:	462a      	mov	r2, r5
 80040b6:	f000 fad7 	bl	8004668 <_realloc_r>
 80040ba:	4606      	mov	r6, r0
 80040bc:	2800      	cmp	r0, #0
 80040be:	d1e0      	bne.n	8004082 <__ssputs_r+0x5a>
 80040c0:	6921      	ldr	r1, [r4, #16]
 80040c2:	4650      	mov	r0, sl
 80040c4:	f7ff feb8 	bl	8003e38 <_free_r>
 80040c8:	230c      	movs	r3, #12
 80040ca:	f8ca 3000 	str.w	r3, [sl]
 80040ce:	89a3      	ldrh	r3, [r4, #12]
 80040d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040d4:	81a3      	strh	r3, [r4, #12]
 80040d6:	f04f 30ff 	mov.w	r0, #4294967295
 80040da:	e7e9      	b.n	80040b0 <__ssputs_r+0x88>

080040dc <_svfiprintf_r>:
 80040dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040e0:	4698      	mov	r8, r3
 80040e2:	898b      	ldrh	r3, [r1, #12]
 80040e4:	061b      	lsls	r3, r3, #24
 80040e6:	b09d      	sub	sp, #116	; 0x74
 80040e8:	4607      	mov	r7, r0
 80040ea:	460d      	mov	r5, r1
 80040ec:	4614      	mov	r4, r2
 80040ee:	d50e      	bpl.n	800410e <_svfiprintf_r+0x32>
 80040f0:	690b      	ldr	r3, [r1, #16]
 80040f2:	b963      	cbnz	r3, 800410e <_svfiprintf_r+0x32>
 80040f4:	2140      	movs	r1, #64	; 0x40
 80040f6:	f7ff ff0b 	bl	8003f10 <_malloc_r>
 80040fa:	6028      	str	r0, [r5, #0]
 80040fc:	6128      	str	r0, [r5, #16]
 80040fe:	b920      	cbnz	r0, 800410a <_svfiprintf_r+0x2e>
 8004100:	230c      	movs	r3, #12
 8004102:	603b      	str	r3, [r7, #0]
 8004104:	f04f 30ff 	mov.w	r0, #4294967295
 8004108:	e0d0      	b.n	80042ac <_svfiprintf_r+0x1d0>
 800410a:	2340      	movs	r3, #64	; 0x40
 800410c:	616b      	str	r3, [r5, #20]
 800410e:	2300      	movs	r3, #0
 8004110:	9309      	str	r3, [sp, #36]	; 0x24
 8004112:	2320      	movs	r3, #32
 8004114:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004118:	f8cd 800c 	str.w	r8, [sp, #12]
 800411c:	2330      	movs	r3, #48	; 0x30
 800411e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80042c4 <_svfiprintf_r+0x1e8>
 8004122:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004126:	f04f 0901 	mov.w	r9, #1
 800412a:	4623      	mov	r3, r4
 800412c:	469a      	mov	sl, r3
 800412e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004132:	b10a      	cbz	r2, 8004138 <_svfiprintf_r+0x5c>
 8004134:	2a25      	cmp	r2, #37	; 0x25
 8004136:	d1f9      	bne.n	800412c <_svfiprintf_r+0x50>
 8004138:	ebba 0b04 	subs.w	fp, sl, r4
 800413c:	d00b      	beq.n	8004156 <_svfiprintf_r+0x7a>
 800413e:	465b      	mov	r3, fp
 8004140:	4622      	mov	r2, r4
 8004142:	4629      	mov	r1, r5
 8004144:	4638      	mov	r0, r7
 8004146:	f7ff ff6f 	bl	8004028 <__ssputs_r>
 800414a:	3001      	adds	r0, #1
 800414c:	f000 80a9 	beq.w	80042a2 <_svfiprintf_r+0x1c6>
 8004150:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004152:	445a      	add	r2, fp
 8004154:	9209      	str	r2, [sp, #36]	; 0x24
 8004156:	f89a 3000 	ldrb.w	r3, [sl]
 800415a:	2b00      	cmp	r3, #0
 800415c:	f000 80a1 	beq.w	80042a2 <_svfiprintf_r+0x1c6>
 8004160:	2300      	movs	r3, #0
 8004162:	f04f 32ff 	mov.w	r2, #4294967295
 8004166:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800416a:	f10a 0a01 	add.w	sl, sl, #1
 800416e:	9304      	str	r3, [sp, #16]
 8004170:	9307      	str	r3, [sp, #28]
 8004172:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004176:	931a      	str	r3, [sp, #104]	; 0x68
 8004178:	4654      	mov	r4, sl
 800417a:	2205      	movs	r2, #5
 800417c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004180:	4850      	ldr	r0, [pc, #320]	; (80042c4 <_svfiprintf_r+0x1e8>)
 8004182:	f7fc f84d 	bl	8000220 <memchr>
 8004186:	9a04      	ldr	r2, [sp, #16]
 8004188:	b9d8      	cbnz	r0, 80041c2 <_svfiprintf_r+0xe6>
 800418a:	06d0      	lsls	r0, r2, #27
 800418c:	bf44      	itt	mi
 800418e:	2320      	movmi	r3, #32
 8004190:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004194:	0711      	lsls	r1, r2, #28
 8004196:	bf44      	itt	mi
 8004198:	232b      	movmi	r3, #43	; 0x2b
 800419a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800419e:	f89a 3000 	ldrb.w	r3, [sl]
 80041a2:	2b2a      	cmp	r3, #42	; 0x2a
 80041a4:	d015      	beq.n	80041d2 <_svfiprintf_r+0xf6>
 80041a6:	9a07      	ldr	r2, [sp, #28]
 80041a8:	4654      	mov	r4, sl
 80041aa:	2000      	movs	r0, #0
 80041ac:	f04f 0c0a 	mov.w	ip, #10
 80041b0:	4621      	mov	r1, r4
 80041b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80041b6:	3b30      	subs	r3, #48	; 0x30
 80041b8:	2b09      	cmp	r3, #9
 80041ba:	d94d      	bls.n	8004258 <_svfiprintf_r+0x17c>
 80041bc:	b1b0      	cbz	r0, 80041ec <_svfiprintf_r+0x110>
 80041be:	9207      	str	r2, [sp, #28]
 80041c0:	e014      	b.n	80041ec <_svfiprintf_r+0x110>
 80041c2:	eba0 0308 	sub.w	r3, r0, r8
 80041c6:	fa09 f303 	lsl.w	r3, r9, r3
 80041ca:	4313      	orrs	r3, r2
 80041cc:	9304      	str	r3, [sp, #16]
 80041ce:	46a2      	mov	sl, r4
 80041d0:	e7d2      	b.n	8004178 <_svfiprintf_r+0x9c>
 80041d2:	9b03      	ldr	r3, [sp, #12]
 80041d4:	1d19      	adds	r1, r3, #4
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	9103      	str	r1, [sp, #12]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	bfbb      	ittet	lt
 80041de:	425b      	neglt	r3, r3
 80041e0:	f042 0202 	orrlt.w	r2, r2, #2
 80041e4:	9307      	strge	r3, [sp, #28]
 80041e6:	9307      	strlt	r3, [sp, #28]
 80041e8:	bfb8      	it	lt
 80041ea:	9204      	strlt	r2, [sp, #16]
 80041ec:	7823      	ldrb	r3, [r4, #0]
 80041ee:	2b2e      	cmp	r3, #46	; 0x2e
 80041f0:	d10c      	bne.n	800420c <_svfiprintf_r+0x130>
 80041f2:	7863      	ldrb	r3, [r4, #1]
 80041f4:	2b2a      	cmp	r3, #42	; 0x2a
 80041f6:	d134      	bne.n	8004262 <_svfiprintf_r+0x186>
 80041f8:	9b03      	ldr	r3, [sp, #12]
 80041fa:	1d1a      	adds	r2, r3, #4
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	9203      	str	r2, [sp, #12]
 8004200:	2b00      	cmp	r3, #0
 8004202:	bfb8      	it	lt
 8004204:	f04f 33ff 	movlt.w	r3, #4294967295
 8004208:	3402      	adds	r4, #2
 800420a:	9305      	str	r3, [sp, #20]
 800420c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80042d4 <_svfiprintf_r+0x1f8>
 8004210:	7821      	ldrb	r1, [r4, #0]
 8004212:	2203      	movs	r2, #3
 8004214:	4650      	mov	r0, sl
 8004216:	f7fc f803 	bl	8000220 <memchr>
 800421a:	b138      	cbz	r0, 800422c <_svfiprintf_r+0x150>
 800421c:	9b04      	ldr	r3, [sp, #16]
 800421e:	eba0 000a 	sub.w	r0, r0, sl
 8004222:	2240      	movs	r2, #64	; 0x40
 8004224:	4082      	lsls	r2, r0
 8004226:	4313      	orrs	r3, r2
 8004228:	3401      	adds	r4, #1
 800422a:	9304      	str	r3, [sp, #16]
 800422c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004230:	4825      	ldr	r0, [pc, #148]	; (80042c8 <_svfiprintf_r+0x1ec>)
 8004232:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004236:	2206      	movs	r2, #6
 8004238:	f7fb fff2 	bl	8000220 <memchr>
 800423c:	2800      	cmp	r0, #0
 800423e:	d038      	beq.n	80042b2 <_svfiprintf_r+0x1d6>
 8004240:	4b22      	ldr	r3, [pc, #136]	; (80042cc <_svfiprintf_r+0x1f0>)
 8004242:	bb1b      	cbnz	r3, 800428c <_svfiprintf_r+0x1b0>
 8004244:	9b03      	ldr	r3, [sp, #12]
 8004246:	3307      	adds	r3, #7
 8004248:	f023 0307 	bic.w	r3, r3, #7
 800424c:	3308      	adds	r3, #8
 800424e:	9303      	str	r3, [sp, #12]
 8004250:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004252:	4433      	add	r3, r6
 8004254:	9309      	str	r3, [sp, #36]	; 0x24
 8004256:	e768      	b.n	800412a <_svfiprintf_r+0x4e>
 8004258:	fb0c 3202 	mla	r2, ip, r2, r3
 800425c:	460c      	mov	r4, r1
 800425e:	2001      	movs	r0, #1
 8004260:	e7a6      	b.n	80041b0 <_svfiprintf_r+0xd4>
 8004262:	2300      	movs	r3, #0
 8004264:	3401      	adds	r4, #1
 8004266:	9305      	str	r3, [sp, #20]
 8004268:	4619      	mov	r1, r3
 800426a:	f04f 0c0a 	mov.w	ip, #10
 800426e:	4620      	mov	r0, r4
 8004270:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004274:	3a30      	subs	r2, #48	; 0x30
 8004276:	2a09      	cmp	r2, #9
 8004278:	d903      	bls.n	8004282 <_svfiprintf_r+0x1a6>
 800427a:	2b00      	cmp	r3, #0
 800427c:	d0c6      	beq.n	800420c <_svfiprintf_r+0x130>
 800427e:	9105      	str	r1, [sp, #20]
 8004280:	e7c4      	b.n	800420c <_svfiprintf_r+0x130>
 8004282:	fb0c 2101 	mla	r1, ip, r1, r2
 8004286:	4604      	mov	r4, r0
 8004288:	2301      	movs	r3, #1
 800428a:	e7f0      	b.n	800426e <_svfiprintf_r+0x192>
 800428c:	ab03      	add	r3, sp, #12
 800428e:	9300      	str	r3, [sp, #0]
 8004290:	462a      	mov	r2, r5
 8004292:	4b0f      	ldr	r3, [pc, #60]	; (80042d0 <_svfiprintf_r+0x1f4>)
 8004294:	a904      	add	r1, sp, #16
 8004296:	4638      	mov	r0, r7
 8004298:	f3af 8000 	nop.w
 800429c:	1c42      	adds	r2, r0, #1
 800429e:	4606      	mov	r6, r0
 80042a0:	d1d6      	bne.n	8004250 <_svfiprintf_r+0x174>
 80042a2:	89ab      	ldrh	r3, [r5, #12]
 80042a4:	065b      	lsls	r3, r3, #25
 80042a6:	f53f af2d 	bmi.w	8004104 <_svfiprintf_r+0x28>
 80042aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80042ac:	b01d      	add	sp, #116	; 0x74
 80042ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042b2:	ab03      	add	r3, sp, #12
 80042b4:	9300      	str	r3, [sp, #0]
 80042b6:	462a      	mov	r2, r5
 80042b8:	4b05      	ldr	r3, [pc, #20]	; (80042d0 <_svfiprintf_r+0x1f4>)
 80042ba:	a904      	add	r1, sp, #16
 80042bc:	4638      	mov	r0, r7
 80042be:	f000 f879 	bl	80043b4 <_printf_i>
 80042c2:	e7eb      	b.n	800429c <_svfiprintf_r+0x1c0>
 80042c4:	0800476c 	.word	0x0800476c
 80042c8:	08004776 	.word	0x08004776
 80042cc:	00000000 	.word	0x00000000
 80042d0:	08004029 	.word	0x08004029
 80042d4:	08004772 	.word	0x08004772

080042d8 <_printf_common>:
 80042d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042dc:	4616      	mov	r6, r2
 80042de:	4699      	mov	r9, r3
 80042e0:	688a      	ldr	r2, [r1, #8]
 80042e2:	690b      	ldr	r3, [r1, #16]
 80042e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80042e8:	4293      	cmp	r3, r2
 80042ea:	bfb8      	it	lt
 80042ec:	4613      	movlt	r3, r2
 80042ee:	6033      	str	r3, [r6, #0]
 80042f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80042f4:	4607      	mov	r7, r0
 80042f6:	460c      	mov	r4, r1
 80042f8:	b10a      	cbz	r2, 80042fe <_printf_common+0x26>
 80042fa:	3301      	adds	r3, #1
 80042fc:	6033      	str	r3, [r6, #0]
 80042fe:	6823      	ldr	r3, [r4, #0]
 8004300:	0699      	lsls	r1, r3, #26
 8004302:	bf42      	ittt	mi
 8004304:	6833      	ldrmi	r3, [r6, #0]
 8004306:	3302      	addmi	r3, #2
 8004308:	6033      	strmi	r3, [r6, #0]
 800430a:	6825      	ldr	r5, [r4, #0]
 800430c:	f015 0506 	ands.w	r5, r5, #6
 8004310:	d106      	bne.n	8004320 <_printf_common+0x48>
 8004312:	f104 0a19 	add.w	sl, r4, #25
 8004316:	68e3      	ldr	r3, [r4, #12]
 8004318:	6832      	ldr	r2, [r6, #0]
 800431a:	1a9b      	subs	r3, r3, r2
 800431c:	42ab      	cmp	r3, r5
 800431e:	dc26      	bgt.n	800436e <_printf_common+0x96>
 8004320:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004324:	1e13      	subs	r3, r2, #0
 8004326:	6822      	ldr	r2, [r4, #0]
 8004328:	bf18      	it	ne
 800432a:	2301      	movne	r3, #1
 800432c:	0692      	lsls	r2, r2, #26
 800432e:	d42b      	bmi.n	8004388 <_printf_common+0xb0>
 8004330:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004334:	4649      	mov	r1, r9
 8004336:	4638      	mov	r0, r7
 8004338:	47c0      	blx	r8
 800433a:	3001      	adds	r0, #1
 800433c:	d01e      	beq.n	800437c <_printf_common+0xa4>
 800433e:	6823      	ldr	r3, [r4, #0]
 8004340:	6922      	ldr	r2, [r4, #16]
 8004342:	f003 0306 	and.w	r3, r3, #6
 8004346:	2b04      	cmp	r3, #4
 8004348:	bf02      	ittt	eq
 800434a:	68e5      	ldreq	r5, [r4, #12]
 800434c:	6833      	ldreq	r3, [r6, #0]
 800434e:	1aed      	subeq	r5, r5, r3
 8004350:	68a3      	ldr	r3, [r4, #8]
 8004352:	bf0c      	ite	eq
 8004354:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004358:	2500      	movne	r5, #0
 800435a:	4293      	cmp	r3, r2
 800435c:	bfc4      	itt	gt
 800435e:	1a9b      	subgt	r3, r3, r2
 8004360:	18ed      	addgt	r5, r5, r3
 8004362:	2600      	movs	r6, #0
 8004364:	341a      	adds	r4, #26
 8004366:	42b5      	cmp	r5, r6
 8004368:	d11a      	bne.n	80043a0 <_printf_common+0xc8>
 800436a:	2000      	movs	r0, #0
 800436c:	e008      	b.n	8004380 <_printf_common+0xa8>
 800436e:	2301      	movs	r3, #1
 8004370:	4652      	mov	r2, sl
 8004372:	4649      	mov	r1, r9
 8004374:	4638      	mov	r0, r7
 8004376:	47c0      	blx	r8
 8004378:	3001      	adds	r0, #1
 800437a:	d103      	bne.n	8004384 <_printf_common+0xac>
 800437c:	f04f 30ff 	mov.w	r0, #4294967295
 8004380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004384:	3501      	adds	r5, #1
 8004386:	e7c6      	b.n	8004316 <_printf_common+0x3e>
 8004388:	18e1      	adds	r1, r4, r3
 800438a:	1c5a      	adds	r2, r3, #1
 800438c:	2030      	movs	r0, #48	; 0x30
 800438e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004392:	4422      	add	r2, r4
 8004394:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004398:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800439c:	3302      	adds	r3, #2
 800439e:	e7c7      	b.n	8004330 <_printf_common+0x58>
 80043a0:	2301      	movs	r3, #1
 80043a2:	4622      	mov	r2, r4
 80043a4:	4649      	mov	r1, r9
 80043a6:	4638      	mov	r0, r7
 80043a8:	47c0      	blx	r8
 80043aa:	3001      	adds	r0, #1
 80043ac:	d0e6      	beq.n	800437c <_printf_common+0xa4>
 80043ae:	3601      	adds	r6, #1
 80043b0:	e7d9      	b.n	8004366 <_printf_common+0x8e>
	...

080043b4 <_printf_i>:
 80043b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80043b8:	7e0f      	ldrb	r7, [r1, #24]
 80043ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80043bc:	2f78      	cmp	r7, #120	; 0x78
 80043be:	4691      	mov	r9, r2
 80043c0:	4680      	mov	r8, r0
 80043c2:	460c      	mov	r4, r1
 80043c4:	469a      	mov	sl, r3
 80043c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80043ca:	d807      	bhi.n	80043dc <_printf_i+0x28>
 80043cc:	2f62      	cmp	r7, #98	; 0x62
 80043ce:	d80a      	bhi.n	80043e6 <_printf_i+0x32>
 80043d0:	2f00      	cmp	r7, #0
 80043d2:	f000 80d4 	beq.w	800457e <_printf_i+0x1ca>
 80043d6:	2f58      	cmp	r7, #88	; 0x58
 80043d8:	f000 80c0 	beq.w	800455c <_printf_i+0x1a8>
 80043dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80043e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80043e4:	e03a      	b.n	800445c <_printf_i+0xa8>
 80043e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80043ea:	2b15      	cmp	r3, #21
 80043ec:	d8f6      	bhi.n	80043dc <_printf_i+0x28>
 80043ee:	a101      	add	r1, pc, #4	; (adr r1, 80043f4 <_printf_i+0x40>)
 80043f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80043f4:	0800444d 	.word	0x0800444d
 80043f8:	08004461 	.word	0x08004461
 80043fc:	080043dd 	.word	0x080043dd
 8004400:	080043dd 	.word	0x080043dd
 8004404:	080043dd 	.word	0x080043dd
 8004408:	080043dd 	.word	0x080043dd
 800440c:	08004461 	.word	0x08004461
 8004410:	080043dd 	.word	0x080043dd
 8004414:	080043dd 	.word	0x080043dd
 8004418:	080043dd 	.word	0x080043dd
 800441c:	080043dd 	.word	0x080043dd
 8004420:	08004565 	.word	0x08004565
 8004424:	0800448d 	.word	0x0800448d
 8004428:	0800451f 	.word	0x0800451f
 800442c:	080043dd 	.word	0x080043dd
 8004430:	080043dd 	.word	0x080043dd
 8004434:	08004587 	.word	0x08004587
 8004438:	080043dd 	.word	0x080043dd
 800443c:	0800448d 	.word	0x0800448d
 8004440:	080043dd 	.word	0x080043dd
 8004444:	080043dd 	.word	0x080043dd
 8004448:	08004527 	.word	0x08004527
 800444c:	682b      	ldr	r3, [r5, #0]
 800444e:	1d1a      	adds	r2, r3, #4
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	602a      	str	r2, [r5, #0]
 8004454:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004458:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800445c:	2301      	movs	r3, #1
 800445e:	e09f      	b.n	80045a0 <_printf_i+0x1ec>
 8004460:	6820      	ldr	r0, [r4, #0]
 8004462:	682b      	ldr	r3, [r5, #0]
 8004464:	0607      	lsls	r7, r0, #24
 8004466:	f103 0104 	add.w	r1, r3, #4
 800446a:	6029      	str	r1, [r5, #0]
 800446c:	d501      	bpl.n	8004472 <_printf_i+0xbe>
 800446e:	681e      	ldr	r6, [r3, #0]
 8004470:	e003      	b.n	800447a <_printf_i+0xc6>
 8004472:	0646      	lsls	r6, r0, #25
 8004474:	d5fb      	bpl.n	800446e <_printf_i+0xba>
 8004476:	f9b3 6000 	ldrsh.w	r6, [r3]
 800447a:	2e00      	cmp	r6, #0
 800447c:	da03      	bge.n	8004486 <_printf_i+0xd2>
 800447e:	232d      	movs	r3, #45	; 0x2d
 8004480:	4276      	negs	r6, r6
 8004482:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004486:	485a      	ldr	r0, [pc, #360]	; (80045f0 <_printf_i+0x23c>)
 8004488:	230a      	movs	r3, #10
 800448a:	e012      	b.n	80044b2 <_printf_i+0xfe>
 800448c:	682b      	ldr	r3, [r5, #0]
 800448e:	6820      	ldr	r0, [r4, #0]
 8004490:	1d19      	adds	r1, r3, #4
 8004492:	6029      	str	r1, [r5, #0]
 8004494:	0605      	lsls	r5, r0, #24
 8004496:	d501      	bpl.n	800449c <_printf_i+0xe8>
 8004498:	681e      	ldr	r6, [r3, #0]
 800449a:	e002      	b.n	80044a2 <_printf_i+0xee>
 800449c:	0641      	lsls	r1, r0, #25
 800449e:	d5fb      	bpl.n	8004498 <_printf_i+0xe4>
 80044a0:	881e      	ldrh	r6, [r3, #0]
 80044a2:	4853      	ldr	r0, [pc, #332]	; (80045f0 <_printf_i+0x23c>)
 80044a4:	2f6f      	cmp	r7, #111	; 0x6f
 80044a6:	bf0c      	ite	eq
 80044a8:	2308      	moveq	r3, #8
 80044aa:	230a      	movne	r3, #10
 80044ac:	2100      	movs	r1, #0
 80044ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80044b2:	6865      	ldr	r5, [r4, #4]
 80044b4:	60a5      	str	r5, [r4, #8]
 80044b6:	2d00      	cmp	r5, #0
 80044b8:	bfa2      	ittt	ge
 80044ba:	6821      	ldrge	r1, [r4, #0]
 80044bc:	f021 0104 	bicge.w	r1, r1, #4
 80044c0:	6021      	strge	r1, [r4, #0]
 80044c2:	b90e      	cbnz	r6, 80044c8 <_printf_i+0x114>
 80044c4:	2d00      	cmp	r5, #0
 80044c6:	d04b      	beq.n	8004560 <_printf_i+0x1ac>
 80044c8:	4615      	mov	r5, r2
 80044ca:	fbb6 f1f3 	udiv	r1, r6, r3
 80044ce:	fb03 6711 	mls	r7, r3, r1, r6
 80044d2:	5dc7      	ldrb	r7, [r0, r7]
 80044d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80044d8:	4637      	mov	r7, r6
 80044da:	42bb      	cmp	r3, r7
 80044dc:	460e      	mov	r6, r1
 80044de:	d9f4      	bls.n	80044ca <_printf_i+0x116>
 80044e0:	2b08      	cmp	r3, #8
 80044e2:	d10b      	bne.n	80044fc <_printf_i+0x148>
 80044e4:	6823      	ldr	r3, [r4, #0]
 80044e6:	07de      	lsls	r6, r3, #31
 80044e8:	d508      	bpl.n	80044fc <_printf_i+0x148>
 80044ea:	6923      	ldr	r3, [r4, #16]
 80044ec:	6861      	ldr	r1, [r4, #4]
 80044ee:	4299      	cmp	r1, r3
 80044f0:	bfde      	ittt	le
 80044f2:	2330      	movle	r3, #48	; 0x30
 80044f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80044f8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80044fc:	1b52      	subs	r2, r2, r5
 80044fe:	6122      	str	r2, [r4, #16]
 8004500:	f8cd a000 	str.w	sl, [sp]
 8004504:	464b      	mov	r3, r9
 8004506:	aa03      	add	r2, sp, #12
 8004508:	4621      	mov	r1, r4
 800450a:	4640      	mov	r0, r8
 800450c:	f7ff fee4 	bl	80042d8 <_printf_common>
 8004510:	3001      	adds	r0, #1
 8004512:	d14a      	bne.n	80045aa <_printf_i+0x1f6>
 8004514:	f04f 30ff 	mov.w	r0, #4294967295
 8004518:	b004      	add	sp, #16
 800451a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800451e:	6823      	ldr	r3, [r4, #0]
 8004520:	f043 0320 	orr.w	r3, r3, #32
 8004524:	6023      	str	r3, [r4, #0]
 8004526:	4833      	ldr	r0, [pc, #204]	; (80045f4 <_printf_i+0x240>)
 8004528:	2778      	movs	r7, #120	; 0x78
 800452a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800452e:	6823      	ldr	r3, [r4, #0]
 8004530:	6829      	ldr	r1, [r5, #0]
 8004532:	061f      	lsls	r7, r3, #24
 8004534:	f851 6b04 	ldr.w	r6, [r1], #4
 8004538:	d402      	bmi.n	8004540 <_printf_i+0x18c>
 800453a:	065f      	lsls	r7, r3, #25
 800453c:	bf48      	it	mi
 800453e:	b2b6      	uxthmi	r6, r6
 8004540:	07df      	lsls	r7, r3, #31
 8004542:	bf48      	it	mi
 8004544:	f043 0320 	orrmi.w	r3, r3, #32
 8004548:	6029      	str	r1, [r5, #0]
 800454a:	bf48      	it	mi
 800454c:	6023      	strmi	r3, [r4, #0]
 800454e:	b91e      	cbnz	r6, 8004558 <_printf_i+0x1a4>
 8004550:	6823      	ldr	r3, [r4, #0]
 8004552:	f023 0320 	bic.w	r3, r3, #32
 8004556:	6023      	str	r3, [r4, #0]
 8004558:	2310      	movs	r3, #16
 800455a:	e7a7      	b.n	80044ac <_printf_i+0xf8>
 800455c:	4824      	ldr	r0, [pc, #144]	; (80045f0 <_printf_i+0x23c>)
 800455e:	e7e4      	b.n	800452a <_printf_i+0x176>
 8004560:	4615      	mov	r5, r2
 8004562:	e7bd      	b.n	80044e0 <_printf_i+0x12c>
 8004564:	682b      	ldr	r3, [r5, #0]
 8004566:	6826      	ldr	r6, [r4, #0]
 8004568:	6961      	ldr	r1, [r4, #20]
 800456a:	1d18      	adds	r0, r3, #4
 800456c:	6028      	str	r0, [r5, #0]
 800456e:	0635      	lsls	r5, r6, #24
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	d501      	bpl.n	8004578 <_printf_i+0x1c4>
 8004574:	6019      	str	r1, [r3, #0]
 8004576:	e002      	b.n	800457e <_printf_i+0x1ca>
 8004578:	0670      	lsls	r0, r6, #25
 800457a:	d5fb      	bpl.n	8004574 <_printf_i+0x1c0>
 800457c:	8019      	strh	r1, [r3, #0]
 800457e:	2300      	movs	r3, #0
 8004580:	6123      	str	r3, [r4, #16]
 8004582:	4615      	mov	r5, r2
 8004584:	e7bc      	b.n	8004500 <_printf_i+0x14c>
 8004586:	682b      	ldr	r3, [r5, #0]
 8004588:	1d1a      	adds	r2, r3, #4
 800458a:	602a      	str	r2, [r5, #0]
 800458c:	681d      	ldr	r5, [r3, #0]
 800458e:	6862      	ldr	r2, [r4, #4]
 8004590:	2100      	movs	r1, #0
 8004592:	4628      	mov	r0, r5
 8004594:	f7fb fe44 	bl	8000220 <memchr>
 8004598:	b108      	cbz	r0, 800459e <_printf_i+0x1ea>
 800459a:	1b40      	subs	r0, r0, r5
 800459c:	6060      	str	r0, [r4, #4]
 800459e:	6863      	ldr	r3, [r4, #4]
 80045a0:	6123      	str	r3, [r4, #16]
 80045a2:	2300      	movs	r3, #0
 80045a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045a8:	e7aa      	b.n	8004500 <_printf_i+0x14c>
 80045aa:	6923      	ldr	r3, [r4, #16]
 80045ac:	462a      	mov	r2, r5
 80045ae:	4649      	mov	r1, r9
 80045b0:	4640      	mov	r0, r8
 80045b2:	47d0      	blx	sl
 80045b4:	3001      	adds	r0, #1
 80045b6:	d0ad      	beq.n	8004514 <_printf_i+0x160>
 80045b8:	6823      	ldr	r3, [r4, #0]
 80045ba:	079b      	lsls	r3, r3, #30
 80045bc:	d413      	bmi.n	80045e6 <_printf_i+0x232>
 80045be:	68e0      	ldr	r0, [r4, #12]
 80045c0:	9b03      	ldr	r3, [sp, #12]
 80045c2:	4298      	cmp	r0, r3
 80045c4:	bfb8      	it	lt
 80045c6:	4618      	movlt	r0, r3
 80045c8:	e7a6      	b.n	8004518 <_printf_i+0x164>
 80045ca:	2301      	movs	r3, #1
 80045cc:	4632      	mov	r2, r6
 80045ce:	4649      	mov	r1, r9
 80045d0:	4640      	mov	r0, r8
 80045d2:	47d0      	blx	sl
 80045d4:	3001      	adds	r0, #1
 80045d6:	d09d      	beq.n	8004514 <_printf_i+0x160>
 80045d8:	3501      	adds	r5, #1
 80045da:	68e3      	ldr	r3, [r4, #12]
 80045dc:	9903      	ldr	r1, [sp, #12]
 80045de:	1a5b      	subs	r3, r3, r1
 80045e0:	42ab      	cmp	r3, r5
 80045e2:	dcf2      	bgt.n	80045ca <_printf_i+0x216>
 80045e4:	e7eb      	b.n	80045be <_printf_i+0x20a>
 80045e6:	2500      	movs	r5, #0
 80045e8:	f104 0619 	add.w	r6, r4, #25
 80045ec:	e7f5      	b.n	80045da <_printf_i+0x226>
 80045ee:	bf00      	nop
 80045f0:	0800477d 	.word	0x0800477d
 80045f4:	0800478e 	.word	0x0800478e

080045f8 <memmove>:
 80045f8:	4288      	cmp	r0, r1
 80045fa:	b510      	push	{r4, lr}
 80045fc:	eb01 0402 	add.w	r4, r1, r2
 8004600:	d902      	bls.n	8004608 <memmove+0x10>
 8004602:	4284      	cmp	r4, r0
 8004604:	4623      	mov	r3, r4
 8004606:	d807      	bhi.n	8004618 <memmove+0x20>
 8004608:	1e43      	subs	r3, r0, #1
 800460a:	42a1      	cmp	r1, r4
 800460c:	d008      	beq.n	8004620 <memmove+0x28>
 800460e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004612:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004616:	e7f8      	b.n	800460a <memmove+0x12>
 8004618:	4402      	add	r2, r0
 800461a:	4601      	mov	r1, r0
 800461c:	428a      	cmp	r2, r1
 800461e:	d100      	bne.n	8004622 <memmove+0x2a>
 8004620:	bd10      	pop	{r4, pc}
 8004622:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004626:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800462a:	e7f7      	b.n	800461c <memmove+0x24>

0800462c <_sbrk_r>:
 800462c:	b538      	push	{r3, r4, r5, lr}
 800462e:	4d06      	ldr	r5, [pc, #24]	; (8004648 <_sbrk_r+0x1c>)
 8004630:	2300      	movs	r3, #0
 8004632:	4604      	mov	r4, r0
 8004634:	4608      	mov	r0, r1
 8004636:	602b      	str	r3, [r5, #0]
 8004638:	f7fc fb76 	bl	8000d28 <_sbrk>
 800463c:	1c43      	adds	r3, r0, #1
 800463e:	d102      	bne.n	8004646 <_sbrk_r+0x1a>
 8004640:	682b      	ldr	r3, [r5, #0]
 8004642:	b103      	cbz	r3, 8004646 <_sbrk_r+0x1a>
 8004644:	6023      	str	r3, [r4, #0]
 8004646:	bd38      	pop	{r3, r4, r5, pc}
 8004648:	20000768 	.word	0x20000768

0800464c <memcpy>:
 800464c:	440a      	add	r2, r1
 800464e:	4291      	cmp	r1, r2
 8004650:	f100 33ff 	add.w	r3, r0, #4294967295
 8004654:	d100      	bne.n	8004658 <memcpy+0xc>
 8004656:	4770      	bx	lr
 8004658:	b510      	push	{r4, lr}
 800465a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800465e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004662:	4291      	cmp	r1, r2
 8004664:	d1f9      	bne.n	800465a <memcpy+0xe>
 8004666:	bd10      	pop	{r4, pc}

08004668 <_realloc_r>:
 8004668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800466c:	4680      	mov	r8, r0
 800466e:	4614      	mov	r4, r2
 8004670:	460e      	mov	r6, r1
 8004672:	b921      	cbnz	r1, 800467e <_realloc_r+0x16>
 8004674:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004678:	4611      	mov	r1, r2
 800467a:	f7ff bc49 	b.w	8003f10 <_malloc_r>
 800467e:	b92a      	cbnz	r2, 800468c <_realloc_r+0x24>
 8004680:	f7ff fbda 	bl	8003e38 <_free_r>
 8004684:	4625      	mov	r5, r4
 8004686:	4628      	mov	r0, r5
 8004688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800468c:	f000 f81b 	bl	80046c6 <_malloc_usable_size_r>
 8004690:	4284      	cmp	r4, r0
 8004692:	4607      	mov	r7, r0
 8004694:	d802      	bhi.n	800469c <_realloc_r+0x34>
 8004696:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800469a:	d812      	bhi.n	80046c2 <_realloc_r+0x5a>
 800469c:	4621      	mov	r1, r4
 800469e:	4640      	mov	r0, r8
 80046a0:	f7ff fc36 	bl	8003f10 <_malloc_r>
 80046a4:	4605      	mov	r5, r0
 80046a6:	2800      	cmp	r0, #0
 80046a8:	d0ed      	beq.n	8004686 <_realloc_r+0x1e>
 80046aa:	42bc      	cmp	r4, r7
 80046ac:	4622      	mov	r2, r4
 80046ae:	4631      	mov	r1, r6
 80046b0:	bf28      	it	cs
 80046b2:	463a      	movcs	r2, r7
 80046b4:	f7ff ffca 	bl	800464c <memcpy>
 80046b8:	4631      	mov	r1, r6
 80046ba:	4640      	mov	r0, r8
 80046bc:	f7ff fbbc 	bl	8003e38 <_free_r>
 80046c0:	e7e1      	b.n	8004686 <_realloc_r+0x1e>
 80046c2:	4635      	mov	r5, r6
 80046c4:	e7df      	b.n	8004686 <_realloc_r+0x1e>

080046c6 <_malloc_usable_size_r>:
 80046c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046ca:	1f18      	subs	r0, r3, #4
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	bfbc      	itt	lt
 80046d0:	580b      	ldrlt	r3, [r1, r0]
 80046d2:	18c0      	addlt	r0, r0, r3
 80046d4:	4770      	bx	lr
	...

080046d8 <_init>:
 80046d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046da:	bf00      	nop
 80046dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046de:	bc08      	pop	{r3}
 80046e0:	469e      	mov	lr, r3
 80046e2:	4770      	bx	lr

080046e4 <_fini>:
 80046e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046e6:	bf00      	nop
 80046e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046ea:	bc08      	pop	{r3}
 80046ec:	469e      	mov	lr, r3
 80046ee:	4770      	bx	lr
