
OLED_IRDA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c74  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000680  08006e54  08006e54  00016e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074d4  080074d4  00020064  2**0
                  CONTENTS
  4 .ARM          00000008  080074d4  080074d4  000174d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080074dc  080074dc  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074dc  080074dc  000174dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080074e0  080074e0  000174e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080074e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b40  20000064  08007548  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ba4  08007548  00020ba4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016425  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002da5  00000000  00000000  000364fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001328  00000000  00000000  000392a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ef1  00000000  00000000  0003a5d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023cf5  00000000  00000000  0003b4c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018749  00000000  00000000  0005f1b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dfc73  00000000  00000000  000778ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000056d0  00000000  00000000  00157574  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  0015cc44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000064 	.word	0x20000064
 80001fc:	00000000 	.word	0x00000000
 8000200:	08006e3c 	.word	0x08006e3c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000068 	.word	0x20000068
 800021c:	08006e3c 	.word	0x08006e3c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <HAL_UART_RxCpltCallback>:
uint8_t 			is_uart5_rcv = false;
uint8_t 			uart4_rcv_buf, uart4_data_ob;
uint8_t 			uart5_rcv_buf, uart5_data_ob;
HAL_StatusTypeDef	ret_stat;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
	if( huart == &huart4 ){
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	4a19      	ldr	r2, [pc, #100]	; (800062c <HAL_UART_RxCpltCallback+0x70>)
 80005c8:	4293      	cmp	r3, r2
 80005ca:	d113      	bne.n	80005f4 <HAL_UART_RxCpltCallback+0x38>
		uart4_data_ob = uart4_rcv_buf;
 80005cc:	4b18      	ldr	r3, [pc, #96]	; (8000630 <HAL_UART_RxCpltCallback+0x74>)
 80005ce:	781a      	ldrb	r2, [r3, #0]
 80005d0:	4b18      	ldr	r3, [pc, #96]	; (8000634 <HAL_UART_RxCpltCallback+0x78>)
 80005d2:	701a      	strb	r2, [r3, #0]
		uart4_rcv_buf = 0;
 80005d4:	4b16      	ldr	r3, [pc, #88]	; (8000630 <HAL_UART_RxCpltCallback+0x74>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart4, &uart4_rcv_buf, 1);
 80005da:	2201      	movs	r2, #1
 80005dc:	4914      	ldr	r1, [pc, #80]	; (8000630 <HAL_UART_RxCpltCallback+0x74>)
 80005de:	4813      	ldr	r0, [pc, #76]	; (800062c <HAL_UART_RxCpltCallback+0x70>)
 80005e0:	f004 f80e 	bl	8004600 <HAL_UART_Receive_IT>
		HAL_GPIO_TogglePin( GPIOB, LD2_Pin );
 80005e4:	2180      	movs	r1, #128	; 0x80
 80005e6:	4814      	ldr	r0, [pc, #80]	; (8000638 <HAL_UART_RxCpltCallback+0x7c>)
 80005e8:	f001 fb07 	bl	8001bfa <HAL_GPIO_TogglePin>

		is_uart4_rcv = true;
 80005ec:	4b13      	ldr	r3, [pc, #76]	; (800063c <HAL_UART_RxCpltCallback+0x80>)
 80005ee:	2201      	movs	r2, #1
 80005f0:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart5, &uart5_rcv_buf, 1);
		HAL_GPIO_TogglePin( GPIOB, LD3_Pin );

		is_uart5_rcv = true;
	}
}
 80005f2:	e017      	b.n	8000624 <HAL_UART_RxCpltCallback+0x68>
	else if( huart == &huart5 ){
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	4a12      	ldr	r2, [pc, #72]	; (8000640 <HAL_UART_RxCpltCallback+0x84>)
 80005f8:	4293      	cmp	r3, r2
 80005fa:	d113      	bne.n	8000624 <HAL_UART_RxCpltCallback+0x68>
		uart5_data_ob = uart5_rcv_buf;
 80005fc:	4b11      	ldr	r3, [pc, #68]	; (8000644 <HAL_UART_RxCpltCallback+0x88>)
 80005fe:	781a      	ldrb	r2, [r3, #0]
 8000600:	4b11      	ldr	r3, [pc, #68]	; (8000648 <HAL_UART_RxCpltCallback+0x8c>)
 8000602:	701a      	strb	r2, [r3, #0]
		uart5_rcv_buf = 0;
 8000604:	4b0f      	ldr	r3, [pc, #60]	; (8000644 <HAL_UART_RxCpltCallback+0x88>)
 8000606:	2200      	movs	r2, #0
 8000608:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart5, &uart5_rcv_buf, 1);
 800060a:	2201      	movs	r2, #1
 800060c:	490d      	ldr	r1, [pc, #52]	; (8000644 <HAL_UART_RxCpltCallback+0x88>)
 800060e:	480c      	ldr	r0, [pc, #48]	; (8000640 <HAL_UART_RxCpltCallback+0x84>)
 8000610:	f003 fff6 	bl	8004600 <HAL_UART_Receive_IT>
		HAL_GPIO_TogglePin( GPIOB, LD3_Pin );
 8000614:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000618:	4807      	ldr	r0, [pc, #28]	; (8000638 <HAL_UART_RxCpltCallback+0x7c>)
 800061a:	f001 faee 	bl	8001bfa <HAL_GPIO_TogglePin>
		is_uart5_rcv = true;
 800061e:	4b0b      	ldr	r3, [pc, #44]	; (800064c <HAL_UART_RxCpltCallback+0x90>)
 8000620:	2201      	movs	r2, #1
 8000622:	701a      	strb	r2, [r3, #0]
}
 8000624:	bf00      	nop
 8000626:	3708      	adds	r7, #8
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	2000016c 	.word	0x2000016c
 8000630:	20000846 	.word	0x20000846
 8000634:	20000847 	.word	0x20000847
 8000638:	40020400 	.word	0x40020400
 800063c:	20000844 	.word	0x20000844
 8000640:	200001f4 	.word	0x200001f4
 8000644:	20000848 	.word	0x20000848
 8000648:	20000849 	.word	0x20000849
 800064c:	20000845 	.word	0x20000845

08000650 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000650:	b5b0      	push	{r4, r5, r7, lr}
 8000652:	b086      	sub	sp, #24
 8000654:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000656:	f000 fef6 	bl	8001446 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800065a:	f000 f8cd 	bl	80007f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800065e:	f000 fad3 	bl	8000c08 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000662:	f000 fa71 	bl	8000b48 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000666:	f000 fa9f 	bl	8000ba8 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 800066a:	f000 f931 	bl	80008d0 <MX_I2C1_Init>
  MX_UART4_Init();
 800066e:	f000 fa0b 	bl	8000a88 <MX_UART4_Init>
  MX_TIM14_Init();
 8000672:	f000 f9bb 	bl	80009ec <MX_TIM14_Init>
  MX_TIM13_Init();
 8000676:	f000 f96b 	bl	8000950 <MX_TIM13_Init>
  MX_UART5_Init();
 800067a:	f000 fa35 	bl	8000ae8 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */

  TIM14->CCR1 = 2;
 800067e:	4b4a      	ldr	r3, [pc, #296]	; (80007a8 <main+0x158>)
 8000680:	2202      	movs	r2, #2
 8000682:	635a      	str	r2, [r3, #52]	; 0x34
  TIM13->CCR1 = 2;
 8000684:	4b49      	ldr	r3, [pc, #292]	; (80007ac <main+0x15c>)
 8000686:	2202      	movs	r2, #2
 8000688:	635a      	str	r2, [r3, #52]	; 0x34

  HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 800068a:	2100      	movs	r1, #0
 800068c:	4848      	ldr	r0, [pc, #288]	; (80007b0 <main+0x160>)
 800068e:	f003 f9b5 	bl	80039fc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 8000692:	2100      	movs	r1, #0
 8000694:	4847      	ldr	r0, [pc, #284]	; (80007b4 <main+0x164>)
 8000696:	f003 f9b1 	bl	80039fc <HAL_TIM_PWM_Start>

  HAL_UART_Receive_IT(&huart4, &uart4_rcv_buf, 1);
 800069a:	2201      	movs	r2, #1
 800069c:	4946      	ldr	r1, [pc, #280]	; (80007b8 <main+0x168>)
 800069e:	4847      	ldr	r0, [pc, #284]	; (80007bc <main+0x16c>)
 80006a0:	f003 ffae 	bl	8004600 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart5, &uart5_rcv_buf, 1);
 80006a4:	2201      	movs	r2, #1
 80006a6:	4946      	ldr	r1, [pc, #280]	; (80007c0 <main+0x170>)
 80006a8:	4846      	ldr	r0, [pc, #280]	; (80007c4 <main+0x174>)
 80006aa:	f003 ffa9 	bl	8004600 <HAL_UART_Receive_IT>

  ssd1306_Init();
 80006ae:	f005 fd1f 	bl	80060f0 <ssd1306_Init>

  ssd1306_Fill(White);
 80006b2:	2001      	movs	r0, #1
 80006b4:	f005 fd86 	bl	80061c4 <ssd1306_Fill>
  ssd1306_UpdateScreen();
 80006b8:	f005 fda8 	bl	800620c <ssd1306_UpdateScreen>

  char str[] = "Malloy Aeronautics";
 80006bc:	4b42      	ldr	r3, [pc, #264]	; (80007c8 <main+0x178>)
 80006be:	1d3c      	adds	r4, r7, #4
 80006c0:	461d      	mov	r5, r3
 80006c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006c6:	682b      	ldr	r3, [r5, #0]
 80006c8:	461a      	mov	r2, r3
 80006ca:	8022      	strh	r2, [r4, #0]
 80006cc:	3402      	adds	r4, #2
 80006ce:	0c1b      	lsrs	r3, r3, #16
 80006d0:	7023      	strb	r3, [r4, #0]
  ssd1306_SetCursor(10, 2);
 80006d2:	2102      	movs	r1, #2
 80006d4:	200a      	movs	r0, #10
 80006d6:	f005 fec3 	bl	8006460 <ssd1306_SetCursor>
  ssd1306_WriteString(str, Font_6x8, Black);
 80006da:	4a3c      	ldr	r2, [pc, #240]	; (80007cc <main+0x17c>)
 80006dc:	1d38      	adds	r0, r7, #4
 80006de:	2300      	movs	r3, #0
 80006e0:	ca06      	ldmia	r2, {r1, r2}
 80006e2:	f005 fe97 	bl	8006414 <ssd1306_WriteString>
  ssd1306_SetCursor(10, 12);
 80006e6:	210c      	movs	r1, #12
 80006e8:	200a      	movs	r0, #10
 80006ea:	f005 feb9 	bl	8006460 <ssd1306_SetCursor>
  ssd1306_WriteString(str, Font_6x8, Black);
 80006ee:	4a37      	ldr	r2, [pc, #220]	; (80007cc <main+0x17c>)
 80006f0:	1d38      	adds	r0, r7, #4
 80006f2:	2300      	movs	r3, #0
 80006f4:	ca06      	ldmia	r2, {r1, r2}
 80006f6:	f005 fe8d 	bl	8006414 <ssd1306_WriteString>
  ssd1306_SetCursor(10, 22);
 80006fa:	2116      	movs	r1, #22
 80006fc:	200a      	movs	r0, #10
 80006fe:	f005 feaf 	bl	8006460 <ssd1306_SetCursor>
  ssd1306_WriteString(str, Font_6x8, Black);
 8000702:	4a32      	ldr	r2, [pc, #200]	; (80007cc <main+0x17c>)
 8000704:	1d38      	adds	r0, r7, #4
 8000706:	2300      	movs	r3, #0
 8000708:	ca06      	ldmia	r2, {r1, r2}
 800070a:	f005 fe83 	bl	8006414 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 800070e:	f005 fd7d 	bl	800620c <ssd1306_UpdateScreen>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t dat = 0x55;
 8000712:	2355      	movs	r3, #85	; 0x55
 8000714:	70fb      	strb	r3, [r7, #3]

    /* USER CODE BEGIN 3 */
	// --- Testing for IR ---


	HAL_GPIO_TogglePin( GPIOB, LD1_Pin );
 8000716:	2101      	movs	r1, #1
 8000718:	482d      	ldr	r0, [pc, #180]	; (80007d0 <main+0x180>)
 800071a:	f001 fa6e 	bl	8001bfa <HAL_GPIO_TogglePin>
  	HAL_UART_Transmit( &huart4, &dat, 1, 100 );
 800071e:	1cf9      	adds	r1, r7, #3
 8000720:	2364      	movs	r3, #100	; 0x64
 8000722:	2201      	movs	r2, #1
 8000724:	4825      	ldr	r0, [pc, #148]	; (80007bc <main+0x16c>)
 8000726:	f003 fee8 	bl	80044fa <HAL_UART_Transmit>
	HAL_UART_Transmit( &huart5, &dat, 1, 100 );
 800072a:	1cf9      	adds	r1, r7, #3
 800072c:	2364      	movs	r3, #100	; 0x64
 800072e:	2201      	movs	r2, #1
 8000730:	4824      	ldr	r0, [pc, #144]	; (80007c4 <main+0x174>)
 8000732:	f003 fee2 	bl	80044fa <HAL_UART_Transmit>
	if( is_uart4_rcv ){
 8000736:	4b27      	ldr	r3, [pc, #156]	; (80007d4 <main+0x184>)
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	2b00      	cmp	r3, #0
 800073c:	d017      	beq.n	800076e <main+0x11e>
		uart_len = sprintf(uart_msg, "UART4_RCV ... %d ...", uart4_data_ob );
 800073e:	4b26      	ldr	r3, [pc, #152]	; (80007d8 <main+0x188>)
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	461a      	mov	r2, r3
 8000744:	4925      	ldr	r1, [pc, #148]	; (80007dc <main+0x18c>)
 8000746:	4826      	ldr	r0, [pc, #152]	; (80007e0 <main+0x190>)
 8000748:	f005 fed4 	bl	80064f4 <siprintf>
 800074c:	4603      	mov	r3, r0
 800074e:	4a25      	ldr	r2, [pc, #148]	; (80007e4 <main+0x194>)
 8000750:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(&huart3, (uint8_t*)uart_msg, uart_len, 100);
 8000752:	4b24      	ldr	r3, [pc, #144]	; (80007e4 <main+0x194>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	b29a      	uxth	r2, r3
 8000758:	2364      	movs	r3, #100	; 0x64
 800075a:	4921      	ldr	r1, [pc, #132]	; (80007e0 <main+0x190>)
 800075c:	4822      	ldr	r0, [pc, #136]	; (80007e8 <main+0x198>)
 800075e:	f003 fecc 	bl	80044fa <HAL_UART_Transmit>
		uart4_data_ob = 0;
 8000762:	4b1d      	ldr	r3, [pc, #116]	; (80007d8 <main+0x188>)
 8000764:	2200      	movs	r2, #0
 8000766:	701a      	strb	r2, [r3, #0]
		is_uart4_rcv = false;
 8000768:	4b1a      	ldr	r3, [pc, #104]	; (80007d4 <main+0x184>)
 800076a:	2200      	movs	r2, #0
 800076c:	701a      	strb	r2, [r3, #0]
	}
	if( is_uart5_rcv ){
 800076e:	4b1f      	ldr	r3, [pc, #124]	; (80007ec <main+0x19c>)
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d0cf      	beq.n	8000716 <main+0xc6>
		uart_len = sprintf(uart_msg, "UART5_RCV ... %d ...", uart5_data_ob );
 8000776:	4b1e      	ldr	r3, [pc, #120]	; (80007f0 <main+0x1a0>)
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	461a      	mov	r2, r3
 800077c:	491d      	ldr	r1, [pc, #116]	; (80007f4 <main+0x1a4>)
 800077e:	4818      	ldr	r0, [pc, #96]	; (80007e0 <main+0x190>)
 8000780:	f005 feb8 	bl	80064f4 <siprintf>
 8000784:	4603      	mov	r3, r0
 8000786:	4a17      	ldr	r2, [pc, #92]	; (80007e4 <main+0x194>)
 8000788:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(&huart3, (uint8_t*)uart_msg, uart_len, 100);
 800078a:	4b16      	ldr	r3, [pc, #88]	; (80007e4 <main+0x194>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	b29a      	uxth	r2, r3
 8000790:	2364      	movs	r3, #100	; 0x64
 8000792:	4913      	ldr	r1, [pc, #76]	; (80007e0 <main+0x190>)
 8000794:	4814      	ldr	r0, [pc, #80]	; (80007e8 <main+0x198>)
 8000796:	f003 feb0 	bl	80044fa <HAL_UART_Transmit>
		uart5_data_ob = 0;
 800079a:	4b15      	ldr	r3, [pc, #84]	; (80007f0 <main+0x1a0>)
 800079c:	2200      	movs	r2, #0
 800079e:	701a      	strb	r2, [r3, #0]
		is_uart5_rcv = false;
 80007a0:	4b12      	ldr	r3, [pc, #72]	; (80007ec <main+0x19c>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_TogglePin( GPIOB, LD1_Pin );
 80007a6:	e7b6      	b.n	8000716 <main+0xc6>
 80007a8:	40002000 	.word	0x40002000
 80007ac:	40001c00 	.word	0x40001c00
 80007b0:	20000120 	.word	0x20000120
 80007b4:	200000d4 	.word	0x200000d4
 80007b8:	20000846 	.word	0x20000846
 80007bc:	2000016c 	.word	0x2000016c
 80007c0:	20000848 	.word	0x20000848
 80007c4:	200001f4 	.word	0x200001f4
 80007c8:	08006e84 	.word	0x08006e84
 80007cc:	2000000c 	.word	0x2000000c
 80007d0:	40020400 	.word	0x40020400
 80007d4:	20000844 	.word	0x20000844
 80007d8:	20000847 	.word	0x20000847
 80007dc:	08006e54 	.word	0x08006e54
 80007e0:	2000080c 	.word	0x2000080c
 80007e4:	20000840 	.word	0x20000840
 80007e8:	2000027c 	.word	0x2000027c
 80007ec:	20000845 	.word	0x20000845
 80007f0:	20000849 	.word	0x20000849
 80007f4:	08006e6c 	.word	0x08006e6c

080007f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b094      	sub	sp, #80	; 0x50
 80007fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007fe:	f107 0320 	add.w	r3, r7, #32
 8000802:	2230      	movs	r2, #48	; 0x30
 8000804:	2100      	movs	r1, #0
 8000806:	4618      	mov	r0, r3
 8000808:	f005 fe94 	bl	8006534 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800080c:	f107 030c 	add.w	r3, r7, #12
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	605a      	str	r2, [r3, #4]
 8000816:	609a      	str	r2, [r3, #8]
 8000818:	60da      	str	r2, [r3, #12]
 800081a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800081c:	4b2a      	ldr	r3, [pc, #168]	; (80008c8 <SystemClock_Config+0xd0>)
 800081e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000820:	4a29      	ldr	r2, [pc, #164]	; (80008c8 <SystemClock_Config+0xd0>)
 8000822:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000826:	6413      	str	r3, [r2, #64]	; 0x40
 8000828:	4b27      	ldr	r3, [pc, #156]	; (80008c8 <SystemClock_Config+0xd0>)
 800082a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000830:	60bb      	str	r3, [r7, #8]
 8000832:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000834:	4b25      	ldr	r3, [pc, #148]	; (80008cc <SystemClock_Config+0xd4>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a24      	ldr	r2, [pc, #144]	; (80008cc <SystemClock_Config+0xd4>)
 800083a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800083e:	6013      	str	r3, [r2, #0]
 8000840:	4b22      	ldr	r3, [pc, #136]	; (80008cc <SystemClock_Config+0xd4>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000848:	607b      	str	r3, [r7, #4]
 800084a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800084c:	2301      	movs	r3, #1
 800084e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000850:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000854:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000856:	2302      	movs	r3, #2
 8000858:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800085a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800085e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000860:	2304      	movs	r3, #4
 8000862:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000864:	23d8      	movs	r3, #216	; 0xd8
 8000866:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000868:	2302      	movs	r3, #2
 800086a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800086c:	2309      	movs	r3, #9
 800086e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000870:	f107 0320 	add.w	r3, r7, #32
 8000874:	4618      	mov	r0, r3
 8000876:	f001 fff5 	bl	8002864 <HAL_RCC_OscConfig>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000880:	f000 fa80 	bl	8000d84 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000884:	f001 ff9e 	bl	80027c4 <HAL_PWREx_EnableOverDrive>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800088e:	f000 fa79 	bl	8000d84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000892:	230f      	movs	r3, #15
 8000894:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000896:	2302      	movs	r3, #2
 8000898:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800089a:	2300      	movs	r3, #0
 800089c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800089e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008a8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80008aa:	f107 030c 	add.w	r3, r7, #12
 80008ae:	2107      	movs	r1, #7
 80008b0:	4618      	mov	r0, r3
 80008b2:	f002 fa7b 	bl	8002dac <HAL_RCC_ClockConfig>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80008bc:	f000 fa62 	bl	8000d84 <Error_Handler>
  }
}
 80008c0:	bf00      	nop
 80008c2:	3750      	adds	r7, #80	; 0x50
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	40023800 	.word	0x40023800
 80008cc:	40007000 	.word	0x40007000

080008d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008d4:	4b1b      	ldr	r3, [pc, #108]	; (8000944 <MX_I2C1_Init+0x74>)
 80008d6:	4a1c      	ldr	r2, [pc, #112]	; (8000948 <MX_I2C1_Init+0x78>)
 80008d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 80008da:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <MX_I2C1_Init+0x74>)
 80008dc:	4a1b      	ldr	r2, [pc, #108]	; (800094c <MX_I2C1_Init+0x7c>)
 80008de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80008e0:	4b18      	ldr	r3, [pc, #96]	; (8000944 <MX_I2C1_Init+0x74>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008e6:	4b17      	ldr	r3, [pc, #92]	; (8000944 <MX_I2C1_Init+0x74>)
 80008e8:	2201      	movs	r2, #1
 80008ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008ec:	4b15      	ldr	r3, [pc, #84]	; (8000944 <MX_I2C1_Init+0x74>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008f2:	4b14      	ldr	r3, [pc, #80]	; (8000944 <MX_I2C1_Init+0x74>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008f8:	4b12      	ldr	r3, [pc, #72]	; (8000944 <MX_I2C1_Init+0x74>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008fe:	4b11      	ldr	r3, [pc, #68]	; (8000944 <MX_I2C1_Init+0x74>)
 8000900:	2200      	movs	r2, #0
 8000902:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000904:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <MX_I2C1_Init+0x74>)
 8000906:	2200      	movs	r2, #0
 8000908:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800090a:	480e      	ldr	r0, [pc, #56]	; (8000944 <MX_I2C1_Init+0x74>)
 800090c:	f001 f990 	bl	8001c30 <HAL_I2C_Init>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000916:	f000 fa35 	bl	8000d84 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800091a:	2100      	movs	r1, #0
 800091c:	4809      	ldr	r0, [pc, #36]	; (8000944 <MX_I2C1_Init+0x74>)
 800091e:	f001 fd71 	bl	8002404 <HAL_I2CEx_ConfigAnalogFilter>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000928:	f000 fa2c 	bl	8000d84 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800092c:	2100      	movs	r1, #0
 800092e:	4805      	ldr	r0, [pc, #20]	; (8000944 <MX_I2C1_Init+0x74>)
 8000930:	f001 fdb3 	bl	800249a <HAL_I2CEx_ConfigDigitalFilter>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800093a:	f000 fa23 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	20000080 	.word	0x20000080
 8000948:	40005400 	.word	0x40005400
 800094c:	20404768 	.word	0x20404768

08000950 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b088      	sub	sp, #32
 8000954:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000956:	1d3b      	adds	r3, r7, #4
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
 8000964:	615a      	str	r2, [r3, #20]
 8000966:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8000968:	4b1e      	ldr	r3, [pc, #120]	; (80009e4 <MX_TIM13_Init+0x94>)
 800096a:	4a1f      	ldr	r2, [pc, #124]	; (80009e8 <MX_TIM13_Init+0x98>)
 800096c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 750-1;
 800096e:	4b1d      	ldr	r3, [pc, #116]	; (80009e4 <MX_TIM13_Init+0x94>)
 8000970:	f240 22ed 	movw	r2, #749	; 0x2ed
 8000974:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000976:	4b1b      	ldr	r3, [pc, #108]	; (80009e4 <MX_TIM13_Init+0x94>)
 8000978:	2200      	movs	r2, #0
 800097a:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 4-1;
 800097c:	4b19      	ldr	r3, [pc, #100]	; (80009e4 <MX_TIM13_Init+0x94>)
 800097e:	2203      	movs	r2, #3
 8000980:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000982:	4b18      	ldr	r3, [pc, #96]	; (80009e4 <MX_TIM13_Init+0x94>)
 8000984:	2200      	movs	r2, #0
 8000986:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000988:	4b16      	ldr	r3, [pc, #88]	; (80009e4 <MX_TIM13_Init+0x94>)
 800098a:	2200      	movs	r2, #0
 800098c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800098e:	4815      	ldr	r0, [pc, #84]	; (80009e4 <MX_TIM13_Init+0x94>)
 8000990:	f002 ff7c 	bl	800388c <HAL_TIM_Base_Init>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 800099a:	f000 f9f3 	bl	8000d84 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 800099e:	4811      	ldr	r0, [pc, #68]	; (80009e4 <MX_TIM13_Init+0x94>)
 80009a0:	f002 ffcb 	bl	800393a <HAL_TIM_PWM_Init>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 80009aa:	f000 f9eb 	bl	8000d84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009ae:	2360      	movs	r3, #96	; 0x60
 80009b0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80009b2:	2300      	movs	r3, #0
 80009b4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009b6:	2300      	movs	r3, #0
 80009b8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009ba:	2300      	movs	r3, #0
 80009bc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009be:	1d3b      	adds	r3, r7, #4
 80009c0:	2200      	movs	r2, #0
 80009c2:	4619      	mov	r1, r3
 80009c4:	4807      	ldr	r0, [pc, #28]	; (80009e4 <MX_TIM13_Init+0x94>)
 80009c6:	f003 f913 	bl	8003bf0 <HAL_TIM_PWM_ConfigChannel>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 80009d0:	f000 f9d8 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 80009d4:	4803      	ldr	r0, [pc, #12]	; (80009e4 <MX_TIM13_Init+0x94>)
 80009d6:	f000 fa93 	bl	8000f00 <HAL_TIM_MspPostInit>

}
 80009da:	bf00      	nop
 80009dc:	3720      	adds	r7, #32
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	200000d4 	.word	0x200000d4
 80009e8:	40001c00 	.word	0x40001c00

080009ec <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b088      	sub	sp, #32
 80009f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80009f2:	1d3b      	adds	r3, r7, #4
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	605a      	str	r2, [r3, #4]
 80009fa:	609a      	str	r2, [r3, #8]
 80009fc:	60da      	str	r2, [r3, #12]
 80009fe:	611a      	str	r2, [r3, #16]
 8000a00:	615a      	str	r2, [r3, #20]
 8000a02:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000a04:	4b1e      	ldr	r3, [pc, #120]	; (8000a80 <MX_TIM14_Init+0x94>)
 8000a06:	4a1f      	ldr	r2, [pc, #124]	; (8000a84 <MX_TIM14_Init+0x98>)
 8000a08:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 482-1;
 8000a0a:	4b1d      	ldr	r3, [pc, #116]	; (8000a80 <MX_TIM14_Init+0x94>)
 8000a0c:	f240 12e1 	movw	r2, #481	; 0x1e1
 8000a10:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a12:	4b1b      	ldr	r3, [pc, #108]	; (8000a80 <MX_TIM14_Init+0x94>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 4-1;
 8000a18:	4b19      	ldr	r3, [pc, #100]	; (8000a80 <MX_TIM14_Init+0x94>)
 8000a1a:	2203      	movs	r2, #3
 8000a1c:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a1e:	4b18      	ldr	r3, [pc, #96]	; (8000a80 <MX_TIM14_Init+0x94>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a24:	4b16      	ldr	r3, [pc, #88]	; (8000a80 <MX_TIM14_Init+0x94>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000a2a:	4815      	ldr	r0, [pc, #84]	; (8000a80 <MX_TIM14_Init+0x94>)
 8000a2c:	f002 ff2e 	bl	800388c <HAL_TIM_Base_Init>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 8000a36:	f000 f9a5 	bl	8000d84 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8000a3a:	4811      	ldr	r0, [pc, #68]	; (8000a80 <MX_TIM14_Init+0x94>)
 8000a3c:	f002 ff7d 	bl	800393a <HAL_TIM_PWM_Init>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8000a46:	f000 f99d 	bl	8000d84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a4a:	2360      	movs	r3, #96	; 0x60
 8000a4c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a52:	2300      	movs	r3, #0
 8000a54:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a56:	2300      	movs	r3, #0
 8000a58:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a5a:	1d3b      	adds	r3, r7, #4
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4807      	ldr	r0, [pc, #28]	; (8000a80 <MX_TIM14_Init+0x94>)
 8000a62:	f003 f8c5 	bl	8003bf0 <HAL_TIM_PWM_ConfigChannel>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8000a6c:	f000 f98a 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8000a70:	4803      	ldr	r0, [pc, #12]	; (8000a80 <MX_TIM14_Init+0x94>)
 8000a72:	f000 fa45 	bl	8000f00 <HAL_TIM_MspPostInit>

}
 8000a76:	bf00      	nop
 8000a78:	3720      	adds	r7, #32
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20000120 	.word	0x20000120
 8000a84:	40002000 	.word	0x40002000

08000a88 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000a8c:	4b14      	ldr	r3, [pc, #80]	; (8000ae0 <MX_UART4_Init+0x58>)
 8000a8e:	4a15      	ldr	r2, [pc, #84]	; (8000ae4 <MX_UART4_Init+0x5c>)
 8000a90:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 3000;
 8000a92:	4b13      	ldr	r3, [pc, #76]	; (8000ae0 <MX_UART4_Init+0x58>)
 8000a94:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000a98:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000a9a:	4b11      	ldr	r3, [pc, #68]	; (8000ae0 <MX_UART4_Init+0x58>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000aa0:	4b0f      	ldr	r3, [pc, #60]	; (8000ae0 <MX_UART4_Init+0x58>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000aa6:	4b0e      	ldr	r3, [pc, #56]	; (8000ae0 <MX_UART4_Init+0x58>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000aac:	4b0c      	ldr	r3, [pc, #48]	; (8000ae0 <MX_UART4_Init+0x58>)
 8000aae:	220c      	movs	r2, #12
 8000ab0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ab2:	4b0b      	ldr	r3, [pc, #44]	; (8000ae0 <MX_UART4_Init+0x58>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ab8:	4b09      	ldr	r3, [pc, #36]	; (8000ae0 <MX_UART4_Init+0x58>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000abe:	4b08      	ldr	r3, [pc, #32]	; (8000ae0 <MX_UART4_Init+0x58>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ac4:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <MX_UART4_Init+0x58>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000aca:	4805      	ldr	r0, [pc, #20]	; (8000ae0 <MX_UART4_Init+0x58>)
 8000acc:	f003 fcc7 	bl	800445e <HAL_UART_Init>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000ad6:	f000 f955 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000ada:	bf00      	nop
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	2000016c 	.word	0x2000016c
 8000ae4:	40004c00 	.word	0x40004c00

08000ae8 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000aec:	4b14      	ldr	r3, [pc, #80]	; (8000b40 <MX_UART5_Init+0x58>)
 8000aee:	4a15      	ldr	r2, [pc, #84]	; (8000b44 <MX_UART5_Init+0x5c>)
 8000af0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 3000;
 8000af2:	4b13      	ldr	r3, [pc, #76]	; (8000b40 <MX_UART5_Init+0x58>)
 8000af4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000af8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000afa:	4b11      	ldr	r3, [pc, #68]	; (8000b40 <MX_UART5_Init+0x58>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000b00:	4b0f      	ldr	r3, [pc, #60]	; (8000b40 <MX_UART5_Init+0x58>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000b06:	4b0e      	ldr	r3, [pc, #56]	; (8000b40 <MX_UART5_Init+0x58>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000b0c:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <MX_UART5_Init+0x58>)
 8000b0e:	220c      	movs	r2, #12
 8000b10:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b12:	4b0b      	ldr	r3, [pc, #44]	; (8000b40 <MX_UART5_Init+0x58>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b18:	4b09      	ldr	r3, [pc, #36]	; (8000b40 <MX_UART5_Init+0x58>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b1e:	4b08      	ldr	r3, [pc, #32]	; (8000b40 <MX_UART5_Init+0x58>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b24:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <MX_UART5_Init+0x58>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000b2a:	4805      	ldr	r0, [pc, #20]	; (8000b40 <MX_UART5_Init+0x58>)
 8000b2c:	f003 fc97 	bl	800445e <HAL_UART_Init>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8000b36:	f000 f925 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	200001f4 	.word	0x200001f4
 8000b44:	40005000 	.word	0x40005000

08000b48 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b4c:	4b14      	ldr	r3, [pc, #80]	; (8000ba0 <MX_USART3_UART_Init+0x58>)
 8000b4e:	4a15      	ldr	r2, [pc, #84]	; (8000ba4 <MX_USART3_UART_Init+0x5c>)
 8000b50:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b52:	4b13      	ldr	r3, [pc, #76]	; (8000ba0 <MX_USART3_UART_Init+0x58>)
 8000b54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b58:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b5a:	4b11      	ldr	r3, [pc, #68]	; (8000ba0 <MX_USART3_UART_Init+0x58>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b60:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <MX_USART3_UART_Init+0x58>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b66:	4b0e      	ldr	r3, [pc, #56]	; (8000ba0 <MX_USART3_UART_Init+0x58>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <MX_USART3_UART_Init+0x58>)
 8000b6e:	220c      	movs	r2, #12
 8000b70:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b72:	4b0b      	ldr	r3, [pc, #44]	; (8000ba0 <MX_USART3_UART_Init+0x58>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b78:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <MX_USART3_UART_Init+0x58>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b7e:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <MX_USART3_UART_Init+0x58>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b84:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <MX_USART3_UART_Init+0x58>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b8a:	4805      	ldr	r0, [pc, #20]	; (8000ba0 <MX_USART3_UART_Init+0x58>)
 8000b8c:	f003 fc67 	bl	800445e <HAL_UART_Init>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000b96:	f000 f8f5 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	2000027c 	.word	0x2000027c
 8000ba4:	40004800 	.word	0x40004800

08000ba8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000bac:	4b15      	ldr	r3, [pc, #84]	; (8000c04 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000bb2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000bb4:	4b13      	ldr	r3, [pc, #76]	; (8000c04 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bb6:	2206      	movs	r2, #6
 8000bb8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000bba:	4b12      	ldr	r3, [pc, #72]	; (8000c04 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bbc:	2202      	movs	r2, #2
 8000bbe:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000bc0:	4b10      	ldr	r3, [pc, #64]	; (8000c04 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000bc6:	4b0f      	ldr	r3, [pc, #60]	; (8000c04 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bc8:	2202      	movs	r2, #2
 8000bca:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000bcc:	4b0d      	ldr	r3, [pc, #52]	; (8000c04 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bce:	2201      	movs	r2, #1
 8000bd0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000bd2:	4b0c      	ldr	r3, [pc, #48]	; (8000c04 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000bd8:	4b0a      	ldr	r3, [pc, #40]	; (8000c04 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000bde:	4b09      	ldr	r3, [pc, #36]	; (8000c04 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000be0:	2201      	movs	r2, #1
 8000be2:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000be4:	4b07      	ldr	r3, [pc, #28]	; (8000c04 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000be6:	2201      	movs	r2, #1
 8000be8:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000bea:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000bf0:	4804      	ldr	r0, [pc, #16]	; (8000c04 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bf2:	f001 fc9e 	bl	8002532 <HAL_PCD_Init>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <MX_USB_OTG_FS_PCD_Init+0x58>
  {
    Error_Handler();
 8000bfc:	f000 f8c2 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000c00:	bf00      	nop
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	20000304 	.word	0x20000304

08000c08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b08c      	sub	sp, #48	; 0x30
 8000c0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0e:	f107 031c 	add.w	r3, r7, #28
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]
 8000c16:	605a      	str	r2, [r3, #4]
 8000c18:	609a      	str	r2, [r3, #8]
 8000c1a:	60da      	str	r2, [r3, #12]
 8000c1c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c1e:	4b55      	ldr	r3, [pc, #340]	; (8000d74 <MX_GPIO_Init+0x16c>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	4a54      	ldr	r2, [pc, #336]	; (8000d74 <MX_GPIO_Init+0x16c>)
 8000c24:	f043 0304 	orr.w	r3, r3, #4
 8000c28:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2a:	4b52      	ldr	r3, [pc, #328]	; (8000d74 <MX_GPIO_Init+0x16c>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	f003 0304 	and.w	r3, r3, #4
 8000c32:	61bb      	str	r3, [r7, #24]
 8000c34:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c36:	4b4f      	ldr	r3, [pc, #316]	; (8000d74 <MX_GPIO_Init+0x16c>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	4a4e      	ldr	r2, [pc, #312]	; (8000d74 <MX_GPIO_Init+0x16c>)
 8000c3c:	f043 0320 	orr.w	r3, r3, #32
 8000c40:	6313      	str	r3, [r2, #48]	; 0x30
 8000c42:	4b4c      	ldr	r3, [pc, #304]	; (8000d74 <MX_GPIO_Init+0x16c>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	f003 0320 	and.w	r3, r3, #32
 8000c4a:	617b      	str	r3, [r7, #20]
 8000c4c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c4e:	4b49      	ldr	r3, [pc, #292]	; (8000d74 <MX_GPIO_Init+0x16c>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	4a48      	ldr	r2, [pc, #288]	; (8000d74 <MX_GPIO_Init+0x16c>)
 8000c54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c58:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5a:	4b46      	ldr	r3, [pc, #280]	; (8000d74 <MX_GPIO_Init+0x16c>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c62:	613b      	str	r3, [r7, #16]
 8000c64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c66:	4b43      	ldr	r3, [pc, #268]	; (8000d74 <MX_GPIO_Init+0x16c>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	4a42      	ldr	r2, [pc, #264]	; (8000d74 <MX_GPIO_Init+0x16c>)
 8000c6c:	f043 0301 	orr.w	r3, r3, #1
 8000c70:	6313      	str	r3, [r2, #48]	; 0x30
 8000c72:	4b40      	ldr	r3, [pc, #256]	; (8000d74 <MX_GPIO_Init+0x16c>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	f003 0301 	and.w	r3, r3, #1
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c7e:	4b3d      	ldr	r3, [pc, #244]	; (8000d74 <MX_GPIO_Init+0x16c>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	4a3c      	ldr	r2, [pc, #240]	; (8000d74 <MX_GPIO_Init+0x16c>)
 8000c84:	f043 0302 	orr.w	r3, r3, #2
 8000c88:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8a:	4b3a      	ldr	r3, [pc, #232]	; (8000d74 <MX_GPIO_Init+0x16c>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	f003 0302 	and.w	r3, r3, #2
 8000c92:	60bb      	str	r3, [r7, #8]
 8000c94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c96:	4b37      	ldr	r3, [pc, #220]	; (8000d74 <MX_GPIO_Init+0x16c>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	4a36      	ldr	r2, [pc, #216]	; (8000d74 <MX_GPIO_Init+0x16c>)
 8000c9c:	f043 0308 	orr.w	r3, r3, #8
 8000ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca2:	4b34      	ldr	r3, [pc, #208]	; (8000d74 <MX_GPIO_Init+0x16c>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	f003 0308 	and.w	r3, r3, #8
 8000caa:	607b      	str	r3, [r7, #4]
 8000cac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cae:	4b31      	ldr	r3, [pc, #196]	; (8000d74 <MX_GPIO_Init+0x16c>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	4a30      	ldr	r2, [pc, #192]	; (8000d74 <MX_GPIO_Init+0x16c>)
 8000cb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cba:	4b2e      	ldr	r3, [pc, #184]	; (8000d74 <MX_GPIO_Init+0x16c>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cc2:	603b      	str	r3, [r7, #0]
 8000cc4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	f244 0181 	movw	r1, #16513	; 0x4081
 8000ccc:	482a      	ldr	r0, [pc, #168]	; (8000d78 <MX_GPIO_Init+0x170>)
 8000cce:	f000 ff7b 	bl	8001bc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	2140      	movs	r1, #64	; 0x40
 8000cd6:	4829      	ldr	r0, [pc, #164]	; (8000d7c <MX_GPIO_Init+0x174>)
 8000cd8:	f000 ff76 	bl	8001bc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000cdc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ce0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ce2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ce6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000cec:	f107 031c 	add.w	r3, r7, #28
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4823      	ldr	r0, [pc, #140]	; (8000d80 <MX_GPIO_Init+0x178>)
 8000cf4:	f000 fdcc 	bl	8001890 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000cf8:	f244 0381 	movw	r3, #16513	; 0x4081
 8000cfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d06:	2300      	movs	r3, #0
 8000d08:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d0a:	f107 031c 	add.w	r3, r7, #28
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4819      	ldr	r0, [pc, #100]	; (8000d78 <MX_GPIO_Init+0x170>)
 8000d12:	f000 fdbd 	bl	8001890 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000d16:	2340      	movs	r3, #64	; 0x40
 8000d18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d22:	2300      	movs	r3, #0
 8000d24:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000d26:	f107 031c 	add.w	r3, r7, #28
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4813      	ldr	r0, [pc, #76]	; (8000d7c <MX_GPIO_Init+0x174>)
 8000d2e:	f000 fdaf 	bl	8001890 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000d32:	2380      	movs	r3, #128	; 0x80
 8000d34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d36:	2300      	movs	r3, #0
 8000d38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d3e:	f107 031c 	add.w	r3, r7, #28
 8000d42:	4619      	mov	r1, r3
 8000d44:	480d      	ldr	r0, [pc, #52]	; (8000d7c <MX_GPIO_Init+0x174>)
 8000d46:	f000 fda3 	bl	8001890 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000d4a:	2340      	movs	r3, #64	; 0x40
 8000d4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d56:	2300      	movs	r3, #0
 8000d58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d5e:	f107 031c 	add.w	r3, r7, #28
 8000d62:	4619      	mov	r1, r3
 8000d64:	4804      	ldr	r0, [pc, #16]	; (8000d78 <MX_GPIO_Init+0x170>)
 8000d66:	f000 fd93 	bl	8001890 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d6a:	bf00      	nop
 8000d6c:	3730      	adds	r7, #48	; 0x30
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	40023800 	.word	0x40023800
 8000d78:	40020400 	.word	0x40020400
 8000d7c:	40021800 	.word	0x40021800
 8000d80:	40020800 	.word	0x40020800

08000d84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d88:	b672      	cpsid	i
}
 8000d8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d8c:	e7fe      	b.n	8000d8c <Error_Handler+0x8>
	...

08000d90 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d96:	4b0f      	ldr	r3, [pc, #60]	; (8000dd4 <HAL_MspInit+0x44>)
 8000d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9a:	4a0e      	ldr	r2, [pc, #56]	; (8000dd4 <HAL_MspInit+0x44>)
 8000d9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000da0:	6413      	str	r3, [r2, #64]	; 0x40
 8000da2:	4b0c      	ldr	r3, [pc, #48]	; (8000dd4 <HAL_MspInit+0x44>)
 8000da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000daa:	607b      	str	r3, [r7, #4]
 8000dac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dae:	4b09      	ldr	r3, [pc, #36]	; (8000dd4 <HAL_MspInit+0x44>)
 8000db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db2:	4a08      	ldr	r2, [pc, #32]	; (8000dd4 <HAL_MspInit+0x44>)
 8000db4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000db8:	6453      	str	r3, [r2, #68]	; 0x44
 8000dba:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <HAL_MspInit+0x44>)
 8000dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dc2:	603b      	str	r3, [r7, #0]
 8000dc4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	370c      	adds	r7, #12
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	40023800 	.word	0x40023800

08000dd8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b0aa      	sub	sp, #168	; 0xa8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	609a      	str	r2, [r3, #8]
 8000dec:	60da      	str	r2, [r3, #12]
 8000dee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000df0:	f107 0314 	add.w	r3, r7, #20
 8000df4:	2280      	movs	r2, #128	; 0x80
 8000df6:	2100      	movs	r1, #0
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f005 fb9b 	bl	8006534 <memset>
  if(hi2c->Instance==I2C1)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a22      	ldr	r2, [pc, #136]	; (8000e8c <HAL_I2C_MspInit+0xb4>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d13c      	bne.n	8000e82 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000e08:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e0c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e12:	f107 0314 	add.w	r3, r7, #20
 8000e16:	4618      	mov	r0, r3
 8000e18:	f002 f9ee 	bl	80031f8 <HAL_RCCEx_PeriphCLKConfig>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000e22:	f7ff ffaf 	bl	8000d84 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e26:	4b1a      	ldr	r3, [pc, #104]	; (8000e90 <HAL_I2C_MspInit+0xb8>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	4a19      	ldr	r2, [pc, #100]	; (8000e90 <HAL_I2C_MspInit+0xb8>)
 8000e2c:	f043 0302 	orr.w	r3, r3, #2
 8000e30:	6313      	str	r3, [r2, #48]	; 0x30
 8000e32:	4b17      	ldr	r3, [pc, #92]	; (8000e90 <HAL_I2C_MspInit+0xb8>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	f003 0302 	and.w	r3, r3, #2
 8000e3a:	613b      	str	r3, [r7, #16]
 8000e3c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e3e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e42:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e46:	2312      	movs	r3, #18
 8000e48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e52:	2303      	movs	r3, #3
 8000e54:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e58:	2304      	movs	r3, #4
 8000e5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e5e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000e62:	4619      	mov	r1, r3
 8000e64:	480b      	ldr	r0, [pc, #44]	; (8000e94 <HAL_I2C_MspInit+0xbc>)
 8000e66:	f000 fd13 	bl	8001890 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e6a:	4b09      	ldr	r3, [pc, #36]	; (8000e90 <HAL_I2C_MspInit+0xb8>)
 8000e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6e:	4a08      	ldr	r2, [pc, #32]	; (8000e90 <HAL_I2C_MspInit+0xb8>)
 8000e70:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e74:	6413      	str	r3, [r2, #64]	; 0x40
 8000e76:	4b06      	ldr	r3, [pc, #24]	; (8000e90 <HAL_I2C_MspInit+0xb8>)
 8000e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e82:	bf00      	nop
 8000e84:	37a8      	adds	r7, #168	; 0xa8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40005400 	.word	0x40005400
 8000e90:	40023800 	.word	0x40023800
 8000e94:	40020400 	.word	0x40020400

08000e98 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b085      	sub	sp, #20
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a13      	ldr	r2, [pc, #76]	; (8000ef4 <HAL_TIM_Base_MspInit+0x5c>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d10c      	bne.n	8000ec4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8000eaa:	4b13      	ldr	r3, [pc, #76]	; (8000ef8 <HAL_TIM_Base_MspInit+0x60>)
 8000eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eae:	4a12      	ldr	r2, [pc, #72]	; (8000ef8 <HAL_TIM_Base_MspInit+0x60>)
 8000eb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000eb4:	6413      	str	r3, [r2, #64]	; 0x40
 8000eb6:	4b10      	ldr	r3, [pc, #64]	; (8000ef8 <HAL_TIM_Base_MspInit+0x60>)
 8000eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8000ec2:	e010      	b.n	8000ee6 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM14)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a0c      	ldr	r2, [pc, #48]	; (8000efc <HAL_TIM_Base_MspInit+0x64>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d10b      	bne.n	8000ee6 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000ece:	4b0a      	ldr	r3, [pc, #40]	; (8000ef8 <HAL_TIM_Base_MspInit+0x60>)
 8000ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed2:	4a09      	ldr	r2, [pc, #36]	; (8000ef8 <HAL_TIM_Base_MspInit+0x60>)
 8000ed4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ed8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eda:	4b07      	ldr	r3, [pc, #28]	; (8000ef8 <HAL_TIM_Base_MspInit+0x60>)
 8000edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ee2:	60bb      	str	r3, [r7, #8]
 8000ee4:	68bb      	ldr	r3, [r7, #8]
}
 8000ee6:	bf00      	nop
 8000ee8:	3714      	adds	r7, #20
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	40001c00 	.word	0x40001c00
 8000ef8:	40023800 	.word	0x40023800
 8000efc:	40002000 	.word	0x40002000

08000f00 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b08a      	sub	sp, #40	; 0x28
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f08:	f107 0314 	add.w	r3, r7, #20
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	609a      	str	r2, [r3, #8]
 8000f14:	60da      	str	r2, [r3, #12]
 8000f16:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM13)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a22      	ldr	r2, [pc, #136]	; (8000fa8 <HAL_TIM_MspPostInit+0xa8>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d11d      	bne.n	8000f5e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f22:	4b22      	ldr	r3, [pc, #136]	; (8000fac <HAL_TIM_MspPostInit+0xac>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	4a21      	ldr	r2, [pc, #132]	; (8000fac <HAL_TIM_MspPostInit+0xac>)
 8000f28:	f043 0320 	orr.w	r3, r3, #32
 8000f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2e:	4b1f      	ldr	r3, [pc, #124]	; (8000fac <HAL_TIM_MspPostInit+0xac>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	f003 0320 	and.w	r3, r3, #32
 8000f36:	613b      	str	r3, [r7, #16]
 8000f38:	693b      	ldr	r3, [r7, #16]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000f3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f40:	2302      	movs	r3, #2
 8000f42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f44:	2300      	movs	r3, #0
 8000f46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8000f4c:	2309      	movs	r3, #9
 8000f4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f50:	f107 0314 	add.w	r3, r7, #20
 8000f54:	4619      	mov	r1, r3
 8000f56:	4816      	ldr	r0, [pc, #88]	; (8000fb0 <HAL_TIM_MspPostInit+0xb0>)
 8000f58:	f000 fc9a 	bl	8001890 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8000f5c:	e020      	b.n	8000fa0 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM14)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a14      	ldr	r2, [pc, #80]	; (8000fb4 <HAL_TIM_MspPostInit+0xb4>)
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d11b      	bne.n	8000fa0 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f68:	4b10      	ldr	r3, [pc, #64]	; (8000fac <HAL_TIM_MspPostInit+0xac>)
 8000f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6c:	4a0f      	ldr	r2, [pc, #60]	; (8000fac <HAL_TIM_MspPostInit+0xac>)
 8000f6e:	f043 0301 	orr.w	r3, r3, #1
 8000f72:	6313      	str	r3, [r2, #48]	; 0x30
 8000f74:	4b0d      	ldr	r3, [pc, #52]	; (8000fac <HAL_TIM_MspPostInit+0xac>)
 8000f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f78:	f003 0301 	and.w	r3, r3, #1
 8000f7c:	60fb      	str	r3, [r7, #12]
 8000f7e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000f80:	2380      	movs	r3, #128	; 0x80
 8000f82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f84:	2302      	movs	r3, #2
 8000f86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8000f90:	2309      	movs	r3, #9
 8000f92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f94:	f107 0314 	add.w	r3, r7, #20
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4807      	ldr	r0, [pc, #28]	; (8000fb8 <HAL_TIM_MspPostInit+0xb8>)
 8000f9c:	f000 fc78 	bl	8001890 <HAL_GPIO_Init>
}
 8000fa0:	bf00      	nop
 8000fa2:	3728      	adds	r7, #40	; 0x28
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	40001c00 	.word	0x40001c00
 8000fac:	40023800 	.word	0x40023800
 8000fb0:	40021400 	.word	0x40021400
 8000fb4:	40002000 	.word	0x40002000
 8000fb8:	40020000 	.word	0x40020000

08000fbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b0ae      	sub	sp, #184	; 0xb8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]
 8000fd0:	60da      	str	r2, [r3, #12]
 8000fd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fd8:	2280      	movs	r2, #128	; 0x80
 8000fda:	2100      	movs	r1, #0
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f005 faa9 	bl	8006534 <memset>
  if(huart->Instance==UART4)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a7d      	ldr	r2, [pc, #500]	; (80011dc <HAL_UART_MspInit+0x220>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d145      	bne.n	8001078 <HAL_UART_MspInit+0xbc>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000fec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ff0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ff6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f002 f8fc 	bl	80031f8 <HAL_RCCEx_PeriphCLKConfig>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001006:	f7ff febd 	bl	8000d84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800100a:	4b75      	ldr	r3, [pc, #468]	; (80011e0 <HAL_UART_MspInit+0x224>)
 800100c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100e:	4a74      	ldr	r2, [pc, #464]	; (80011e0 <HAL_UART_MspInit+0x224>)
 8001010:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001014:	6413      	str	r3, [r2, #64]	; 0x40
 8001016:	4b72      	ldr	r3, [pc, #456]	; (80011e0 <HAL_UART_MspInit+0x224>)
 8001018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800101e:	623b      	str	r3, [r7, #32]
 8001020:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001022:	4b6f      	ldr	r3, [pc, #444]	; (80011e0 <HAL_UART_MspInit+0x224>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	4a6e      	ldr	r2, [pc, #440]	; (80011e0 <HAL_UART_MspInit+0x224>)
 8001028:	f043 0304 	orr.w	r3, r3, #4
 800102c:	6313      	str	r3, [r2, #48]	; 0x30
 800102e:	4b6c      	ldr	r3, [pc, #432]	; (80011e0 <HAL_UART_MspInit+0x224>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	f003 0304 	and.w	r3, r3, #4
 8001036:	61fb      	str	r3, [r7, #28]
 8001038:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800103a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800103e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001042:	2302      	movs	r3, #2
 8001044:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800104e:	2303      	movs	r3, #3
 8001050:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001054:	2308      	movs	r3, #8
 8001056:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800105a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800105e:	4619      	mov	r1, r3
 8001060:	4860      	ldr	r0, [pc, #384]	; (80011e4 <HAL_UART_MspInit+0x228>)
 8001062:	f000 fc15 	bl	8001890 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001066:	2200      	movs	r2, #0
 8001068:	2100      	movs	r1, #0
 800106a:	2034      	movs	r0, #52	; 0x34
 800106c:	f000 fb47 	bl	80016fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001070:	2034      	movs	r0, #52	; 0x34
 8001072:	f000 fb60 	bl	8001736 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001076:	e0ad      	b.n	80011d4 <HAL_UART_MspInit+0x218>
  else if(huart->Instance==UART5)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a5a      	ldr	r2, [pc, #360]	; (80011e8 <HAL_UART_MspInit+0x22c>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d166      	bne.n	8001150 <HAL_UART_MspInit+0x194>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001082:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001086:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8001088:	2300      	movs	r3, #0
 800108a:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800108c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001090:	4618      	mov	r0, r3
 8001092:	f002 f8b1 	bl	80031f8 <HAL_RCCEx_PeriphCLKConfig>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <HAL_UART_MspInit+0xe4>
      Error_Handler();
 800109c:	f7ff fe72 	bl	8000d84 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 80010a0:	4b4f      	ldr	r3, [pc, #316]	; (80011e0 <HAL_UART_MspInit+0x224>)
 80010a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a4:	4a4e      	ldr	r2, [pc, #312]	; (80011e0 <HAL_UART_MspInit+0x224>)
 80010a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80010aa:	6413      	str	r3, [r2, #64]	; 0x40
 80010ac:	4b4c      	ldr	r3, [pc, #304]	; (80011e0 <HAL_UART_MspInit+0x224>)
 80010ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010b4:	61bb      	str	r3, [r7, #24]
 80010b6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010b8:	4b49      	ldr	r3, [pc, #292]	; (80011e0 <HAL_UART_MspInit+0x224>)
 80010ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010bc:	4a48      	ldr	r2, [pc, #288]	; (80011e0 <HAL_UART_MspInit+0x224>)
 80010be:	f043 0304 	orr.w	r3, r3, #4
 80010c2:	6313      	str	r3, [r2, #48]	; 0x30
 80010c4:	4b46      	ldr	r3, [pc, #280]	; (80011e0 <HAL_UART_MspInit+0x224>)
 80010c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c8:	f003 0304 	and.w	r3, r3, #4
 80010cc:	617b      	str	r3, [r7, #20]
 80010ce:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010d0:	4b43      	ldr	r3, [pc, #268]	; (80011e0 <HAL_UART_MspInit+0x224>)
 80010d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d4:	4a42      	ldr	r2, [pc, #264]	; (80011e0 <HAL_UART_MspInit+0x224>)
 80010d6:	f043 0308 	orr.w	r3, r3, #8
 80010da:	6313      	str	r3, [r2, #48]	; 0x30
 80010dc:	4b40      	ldr	r3, [pc, #256]	; (80011e0 <HAL_UART_MspInit+0x224>)
 80010de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e0:	f003 0308 	and.w	r3, r3, #8
 80010e4:	613b      	str	r3, [r7, #16]
 80010e6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80010e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f0:	2302      	movs	r3, #2
 80010f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f6:	2300      	movs	r3, #0
 80010f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010fc:	2303      	movs	r3, #3
 80010fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001102:	2308      	movs	r3, #8
 8001104:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001108:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800110c:	4619      	mov	r1, r3
 800110e:	4835      	ldr	r0, [pc, #212]	; (80011e4 <HAL_UART_MspInit+0x228>)
 8001110:	f000 fbbe 	bl	8001890 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001114:	2304      	movs	r3, #4
 8001116:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111a:	2302      	movs	r3, #2
 800111c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001120:	2300      	movs	r3, #0
 8001122:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001126:	2303      	movs	r3, #3
 8001128:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800112c:	2308      	movs	r3, #8
 800112e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001132:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001136:	4619      	mov	r1, r3
 8001138:	482c      	ldr	r0, [pc, #176]	; (80011ec <HAL_UART_MspInit+0x230>)
 800113a:	f000 fba9 	bl	8001890 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 800113e:	2200      	movs	r2, #0
 8001140:	2100      	movs	r1, #0
 8001142:	2035      	movs	r0, #53	; 0x35
 8001144:	f000 fadb 	bl	80016fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001148:	2035      	movs	r0, #53	; 0x35
 800114a:	f000 faf4 	bl	8001736 <HAL_NVIC_EnableIRQ>
}
 800114e:	e041      	b.n	80011d4 <HAL_UART_MspInit+0x218>
  else if(huart->Instance==USART3)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a26      	ldr	r2, [pc, #152]	; (80011f0 <HAL_UART_MspInit+0x234>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d13c      	bne.n	80011d4 <HAL_UART_MspInit+0x218>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800115a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800115e:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001160:	2300      	movs	r3, #0
 8001162:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001164:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001168:	4618      	mov	r0, r3
 800116a:	f002 f845 	bl	80031f8 <HAL_RCCEx_PeriphCLKConfig>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <HAL_UART_MspInit+0x1bc>
      Error_Handler();
 8001174:	f7ff fe06 	bl	8000d84 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001178:	4b19      	ldr	r3, [pc, #100]	; (80011e0 <HAL_UART_MspInit+0x224>)
 800117a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117c:	4a18      	ldr	r2, [pc, #96]	; (80011e0 <HAL_UART_MspInit+0x224>)
 800117e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001182:	6413      	str	r3, [r2, #64]	; 0x40
 8001184:	4b16      	ldr	r3, [pc, #88]	; (80011e0 <HAL_UART_MspInit+0x224>)
 8001186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001188:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001190:	4b13      	ldr	r3, [pc, #76]	; (80011e0 <HAL_UART_MspInit+0x224>)
 8001192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001194:	4a12      	ldr	r2, [pc, #72]	; (80011e0 <HAL_UART_MspInit+0x224>)
 8001196:	f043 0308 	orr.w	r3, r3, #8
 800119a:	6313      	str	r3, [r2, #48]	; 0x30
 800119c:	4b10      	ldr	r3, [pc, #64]	; (80011e0 <HAL_UART_MspInit+0x224>)
 800119e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a0:	f003 0308 	and.w	r3, r3, #8
 80011a4:	60bb      	str	r3, [r7, #8]
 80011a6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80011a8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b0:	2302      	movs	r3, #2
 80011b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b6:	2300      	movs	r3, #0
 80011b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011bc:	2303      	movs	r3, #3
 80011be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011c2:	2307      	movs	r3, #7
 80011c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011c8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80011cc:	4619      	mov	r1, r3
 80011ce:	4807      	ldr	r0, [pc, #28]	; (80011ec <HAL_UART_MspInit+0x230>)
 80011d0:	f000 fb5e 	bl	8001890 <HAL_GPIO_Init>
}
 80011d4:	bf00      	nop
 80011d6:	37b8      	adds	r7, #184	; 0xb8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	40004c00 	.word	0x40004c00
 80011e0:	40023800 	.word	0x40023800
 80011e4:	40020800 	.word	0x40020800
 80011e8:	40005000 	.word	0x40005000
 80011ec:	40020c00 	.word	0x40020c00
 80011f0:	40004800 	.word	0x40004800

080011f4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b0aa      	sub	sp, #168	; 0xa8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	605a      	str	r2, [r3, #4]
 8001206:	609a      	str	r2, [r3, #8]
 8001208:	60da      	str	r2, [r3, #12]
 800120a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800120c:	f107 0314 	add.w	r3, r7, #20
 8001210:	2280      	movs	r2, #128	; 0x80
 8001212:	2100      	movs	r1, #0
 8001214:	4618      	mov	r0, r3
 8001216:	f005 f98d 	bl	8006534 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001222:	d159      	bne.n	80012d8 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001224:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001228:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800122a:	2300      	movs	r3, #0
 800122c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001230:	f107 0314 	add.w	r3, r7, #20
 8001234:	4618      	mov	r0, r3
 8001236:	f001 ffdf 	bl	80031f8 <HAL_RCCEx_PeriphCLKConfig>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001240:	f7ff fda0 	bl	8000d84 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001244:	4b26      	ldr	r3, [pc, #152]	; (80012e0 <HAL_PCD_MspInit+0xec>)
 8001246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001248:	4a25      	ldr	r2, [pc, #148]	; (80012e0 <HAL_PCD_MspInit+0xec>)
 800124a:	f043 0301 	orr.w	r3, r3, #1
 800124e:	6313      	str	r3, [r2, #48]	; 0x30
 8001250:	4b23      	ldr	r3, [pc, #140]	; (80012e0 <HAL_PCD_MspInit+0xec>)
 8001252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001254:	f003 0301 	and.w	r3, r3, #1
 8001258:	613b      	str	r3, [r7, #16]
 800125a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800125c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001260:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001264:	2302      	movs	r3, #2
 8001266:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126a:	2300      	movs	r3, #0
 800126c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001270:	2303      	movs	r3, #3
 8001272:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001276:	230a      	movs	r3, #10
 8001278:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800127c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001280:	4619      	mov	r1, r3
 8001282:	4818      	ldr	r0, [pc, #96]	; (80012e4 <HAL_PCD_MspInit+0xf0>)
 8001284:	f000 fb04 	bl	8001890 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001288:	f44f 7300 	mov.w	r3, #512	; 0x200
 800128c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001290:	2300      	movs	r3, #0
 8001292:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001296:	2300      	movs	r3, #0
 8001298:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800129c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80012a0:	4619      	mov	r1, r3
 80012a2:	4810      	ldr	r0, [pc, #64]	; (80012e4 <HAL_PCD_MspInit+0xf0>)
 80012a4:	f000 faf4 	bl	8001890 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80012a8:	4b0d      	ldr	r3, [pc, #52]	; (80012e0 <HAL_PCD_MspInit+0xec>)
 80012aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012ac:	4a0c      	ldr	r2, [pc, #48]	; (80012e0 <HAL_PCD_MspInit+0xec>)
 80012ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012b2:	6353      	str	r3, [r2, #52]	; 0x34
 80012b4:	4b0a      	ldr	r3, [pc, #40]	; (80012e0 <HAL_PCD_MspInit+0xec>)
 80012b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	4b07      	ldr	r3, [pc, #28]	; (80012e0 <HAL_PCD_MspInit+0xec>)
 80012c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c4:	4a06      	ldr	r2, [pc, #24]	; (80012e0 <HAL_PCD_MspInit+0xec>)
 80012c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012ca:	6453      	str	r3, [r2, #68]	; 0x44
 80012cc:	4b04      	ldr	r3, [pc, #16]	; (80012e0 <HAL_PCD_MspInit+0xec>)
 80012ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012d4:	60bb      	str	r3, [r7, #8]
 80012d6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80012d8:	bf00      	nop
 80012da:	37a8      	adds	r7, #168	; 0xa8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	40023800 	.word	0x40023800
 80012e4:	40020000 	.word	0x40020000

080012e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012ec:	e7fe      	b.n	80012ec <NMI_Handler+0x4>

080012ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ee:	b480      	push	{r7}
 80012f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012f2:	e7fe      	b.n	80012f2 <HardFault_Handler+0x4>

080012f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012f8:	e7fe      	b.n	80012f8 <MemManage_Handler+0x4>

080012fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012fa:	b480      	push	{r7}
 80012fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012fe:	e7fe      	b.n	80012fe <BusFault_Handler+0x4>

08001300 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001304:	e7fe      	b.n	8001304 <UsageFault_Handler+0x4>

08001306 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001306:	b480      	push	{r7}
 8001308:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800130a:	bf00      	nop
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001318:	bf00      	nop
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr

08001322 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001322:	b480      	push	{r7}
 8001324:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001326:	bf00      	nop
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr

08001330 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001334:	f000 f8c4 	bl	80014c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001338:	bf00      	nop
 800133a:	bd80      	pop	{r7, pc}

0800133c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001340:	4802      	ldr	r0, [pc, #8]	; (800134c <UART4_IRQHandler+0x10>)
 8001342:	f003 f9a1 	bl	8004688 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001346:	bf00      	nop
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	2000016c 	.word	0x2000016c

08001350 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001354:	4802      	ldr	r0, [pc, #8]	; (8001360 <UART5_IRQHandler+0x10>)
 8001356:	f003 f997 	bl	8004688 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800135a:	bf00      	nop
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	200001f4 	.word	0x200001f4

08001364 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b086      	sub	sp, #24
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800136c:	4a14      	ldr	r2, [pc, #80]	; (80013c0 <_sbrk+0x5c>)
 800136e:	4b15      	ldr	r3, [pc, #84]	; (80013c4 <_sbrk+0x60>)
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001378:	4b13      	ldr	r3, [pc, #76]	; (80013c8 <_sbrk+0x64>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d102      	bne.n	8001386 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001380:	4b11      	ldr	r3, [pc, #68]	; (80013c8 <_sbrk+0x64>)
 8001382:	4a12      	ldr	r2, [pc, #72]	; (80013cc <_sbrk+0x68>)
 8001384:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001386:	4b10      	ldr	r3, [pc, #64]	; (80013c8 <_sbrk+0x64>)
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4413      	add	r3, r2
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	429a      	cmp	r2, r3
 8001392:	d207      	bcs.n	80013a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001394:	f005 f8d6 	bl	8006544 <__errno>
 8001398:	4603      	mov	r3, r0
 800139a:	220c      	movs	r2, #12
 800139c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800139e:	f04f 33ff 	mov.w	r3, #4294967295
 80013a2:	e009      	b.n	80013b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013a4:	4b08      	ldr	r3, [pc, #32]	; (80013c8 <_sbrk+0x64>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013aa:	4b07      	ldr	r3, [pc, #28]	; (80013c8 <_sbrk+0x64>)
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4413      	add	r3, r2
 80013b2:	4a05      	ldr	r2, [pc, #20]	; (80013c8 <_sbrk+0x64>)
 80013b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013b6:	68fb      	ldr	r3, [r7, #12]
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3718      	adds	r7, #24
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	20040000 	.word	0x20040000
 80013c4:	00000400 	.word	0x00000400
 80013c8:	2000084c 	.word	0x2000084c
 80013cc:	20000ba8 	.word	0x20000ba8

080013d0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013d4:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <SystemInit+0x20>)
 80013d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013da:	4a05      	ldr	r2, [pc, #20]	; (80013f0 <SystemInit+0x20>)
 80013dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013e4:	bf00      	nop
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	e000ed00 	.word	0xe000ed00

080013f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80013f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800142c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013f8:	480d      	ldr	r0, [pc, #52]	; (8001430 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80013fa:	490e      	ldr	r1, [pc, #56]	; (8001434 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80013fc:	4a0e      	ldr	r2, [pc, #56]	; (8001438 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001400:	e002      	b.n	8001408 <LoopCopyDataInit>

08001402 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001402:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001404:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001406:	3304      	adds	r3, #4

08001408 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001408:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800140a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800140c:	d3f9      	bcc.n	8001402 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800140e:	4a0b      	ldr	r2, [pc, #44]	; (800143c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001410:	4c0b      	ldr	r4, [pc, #44]	; (8001440 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001412:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001414:	e001      	b.n	800141a <LoopFillZerobss>

08001416 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001416:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001418:	3204      	adds	r2, #4

0800141a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800141a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800141c:	d3fb      	bcc.n	8001416 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800141e:	f7ff ffd7 	bl	80013d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001422:	f005 f895 	bl	8006550 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001426:	f7ff f913 	bl	8000650 <main>
  bx  lr    
 800142a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800142c:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8001430:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001434:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001438:	080074e4 	.word	0x080074e4
  ldr r2, =_sbss
 800143c:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001440:	20000ba4 	.word	0x20000ba4

08001444 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001444:	e7fe      	b.n	8001444 <ADC_IRQHandler>

08001446 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001446:	b580      	push	{r7, lr}
 8001448:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800144a:	2003      	movs	r0, #3
 800144c:	f000 f94c 	bl	80016e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001450:	2000      	movs	r0, #0
 8001452:	f000 f805 	bl	8001460 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001456:	f7ff fc9b 	bl	8000d90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800145a:	2300      	movs	r3, #0
}
 800145c:	4618      	mov	r0, r3
 800145e:	bd80      	pop	{r7, pc}

08001460 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001468:	4b12      	ldr	r3, [pc, #72]	; (80014b4 <HAL_InitTick+0x54>)
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	4b12      	ldr	r3, [pc, #72]	; (80014b8 <HAL_InitTick+0x58>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	4619      	mov	r1, r3
 8001472:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001476:	fbb3 f3f1 	udiv	r3, r3, r1
 800147a:	fbb2 f3f3 	udiv	r3, r2, r3
 800147e:	4618      	mov	r0, r3
 8001480:	f000 f967 	bl	8001752 <HAL_SYSTICK_Config>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e00e      	b.n	80014ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2b0f      	cmp	r3, #15
 8001492:	d80a      	bhi.n	80014aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001494:	2200      	movs	r2, #0
 8001496:	6879      	ldr	r1, [r7, #4]
 8001498:	f04f 30ff 	mov.w	r0, #4294967295
 800149c:	f000 f92f 	bl	80016fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014a0:	4a06      	ldr	r2, [pc, #24]	; (80014bc <HAL_InitTick+0x5c>)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014a6:	2300      	movs	r3, #0
 80014a8:	e000      	b.n	80014ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3708      	adds	r7, #8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	20000000 	.word	0x20000000
 80014b8:	20000008 	.word	0x20000008
 80014bc:	20000004 	.word	0x20000004

080014c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014c4:	4b06      	ldr	r3, [pc, #24]	; (80014e0 <HAL_IncTick+0x20>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	461a      	mov	r2, r3
 80014ca:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <HAL_IncTick+0x24>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4413      	add	r3, r2
 80014d0:	4a04      	ldr	r2, [pc, #16]	; (80014e4 <HAL_IncTick+0x24>)
 80014d2:	6013      	str	r3, [r2, #0]
}
 80014d4:	bf00      	nop
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	20000008 	.word	0x20000008
 80014e4:	20000850 	.word	0x20000850

080014e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  return uwTick;
 80014ec:	4b03      	ldr	r3, [pc, #12]	; (80014fc <HAL_GetTick+0x14>)
 80014ee:	681b      	ldr	r3, [r3, #0]
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	20000850 	.word	0x20000850

08001500 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001508:	f7ff ffee 	bl	80014e8 <HAL_GetTick>
 800150c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001518:	d005      	beq.n	8001526 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800151a:	4b0a      	ldr	r3, [pc, #40]	; (8001544 <HAL_Delay+0x44>)
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	461a      	mov	r2, r3
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	4413      	add	r3, r2
 8001524:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001526:	bf00      	nop
 8001528:	f7ff ffde 	bl	80014e8 <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	68fa      	ldr	r2, [r7, #12]
 8001534:	429a      	cmp	r2, r3
 8001536:	d8f7      	bhi.n	8001528 <HAL_Delay+0x28>
  {
  }
}
 8001538:	bf00      	nop
 800153a:	bf00      	nop
 800153c:	3710      	adds	r7, #16
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	20000008 	.word	0x20000008

08001548 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001548:	b480      	push	{r7}
 800154a:	b085      	sub	sp, #20
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f003 0307 	and.w	r3, r3, #7
 8001556:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001558:	4b0b      	ldr	r3, [pc, #44]	; (8001588 <__NVIC_SetPriorityGrouping+0x40>)
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800155e:	68ba      	ldr	r2, [r7, #8]
 8001560:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001564:	4013      	ands	r3, r2
 8001566:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001570:	4b06      	ldr	r3, [pc, #24]	; (800158c <__NVIC_SetPriorityGrouping+0x44>)
 8001572:	4313      	orrs	r3, r2
 8001574:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001576:	4a04      	ldr	r2, [pc, #16]	; (8001588 <__NVIC_SetPriorityGrouping+0x40>)
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	60d3      	str	r3, [r2, #12]
}
 800157c:	bf00      	nop
 800157e:	3714      	adds	r7, #20
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr
 8001588:	e000ed00 	.word	0xe000ed00
 800158c:	05fa0000 	.word	0x05fa0000

08001590 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001594:	4b04      	ldr	r3, [pc, #16]	; (80015a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	0a1b      	lsrs	r3, r3, #8
 800159a:	f003 0307 	and.w	r3, r3, #7
}
 800159e:	4618      	mov	r0, r3
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr
 80015a8:	e000ed00 	.word	0xe000ed00

080015ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	4603      	mov	r3, r0
 80015b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	db0b      	blt.n	80015d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015be:	79fb      	ldrb	r3, [r7, #7]
 80015c0:	f003 021f 	and.w	r2, r3, #31
 80015c4:	4907      	ldr	r1, [pc, #28]	; (80015e4 <__NVIC_EnableIRQ+0x38>)
 80015c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ca:	095b      	lsrs	r3, r3, #5
 80015cc:	2001      	movs	r0, #1
 80015ce:	fa00 f202 	lsl.w	r2, r0, r2
 80015d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015d6:	bf00      	nop
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	e000e100 	.word	0xe000e100

080015e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	6039      	str	r1, [r7, #0]
 80015f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	db0a      	blt.n	8001612 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	b2da      	uxtb	r2, r3
 8001600:	490c      	ldr	r1, [pc, #48]	; (8001634 <__NVIC_SetPriority+0x4c>)
 8001602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001606:	0112      	lsls	r2, r2, #4
 8001608:	b2d2      	uxtb	r2, r2
 800160a:	440b      	add	r3, r1
 800160c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001610:	e00a      	b.n	8001628 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	b2da      	uxtb	r2, r3
 8001616:	4908      	ldr	r1, [pc, #32]	; (8001638 <__NVIC_SetPriority+0x50>)
 8001618:	79fb      	ldrb	r3, [r7, #7]
 800161a:	f003 030f 	and.w	r3, r3, #15
 800161e:	3b04      	subs	r3, #4
 8001620:	0112      	lsls	r2, r2, #4
 8001622:	b2d2      	uxtb	r2, r2
 8001624:	440b      	add	r3, r1
 8001626:	761a      	strb	r2, [r3, #24]
}
 8001628:	bf00      	nop
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr
 8001634:	e000e100 	.word	0xe000e100
 8001638:	e000ed00 	.word	0xe000ed00

0800163c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800163c:	b480      	push	{r7}
 800163e:	b089      	sub	sp, #36	; 0x24
 8001640:	af00      	add	r7, sp, #0
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	f003 0307 	and.w	r3, r3, #7
 800164e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	f1c3 0307 	rsb	r3, r3, #7
 8001656:	2b04      	cmp	r3, #4
 8001658:	bf28      	it	cs
 800165a:	2304      	movcs	r3, #4
 800165c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	3304      	adds	r3, #4
 8001662:	2b06      	cmp	r3, #6
 8001664:	d902      	bls.n	800166c <NVIC_EncodePriority+0x30>
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	3b03      	subs	r3, #3
 800166a:	e000      	b.n	800166e <NVIC_EncodePriority+0x32>
 800166c:	2300      	movs	r3, #0
 800166e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001670:	f04f 32ff 	mov.w	r2, #4294967295
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	fa02 f303 	lsl.w	r3, r2, r3
 800167a:	43da      	mvns	r2, r3
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	401a      	ands	r2, r3
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001684:	f04f 31ff 	mov.w	r1, #4294967295
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	fa01 f303 	lsl.w	r3, r1, r3
 800168e:	43d9      	mvns	r1, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001694:	4313      	orrs	r3, r2
         );
}
 8001696:	4618      	mov	r0, r3
 8001698:	3724      	adds	r7, #36	; 0x24
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
	...

080016a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	3b01      	subs	r3, #1
 80016b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016b4:	d301      	bcc.n	80016ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016b6:	2301      	movs	r3, #1
 80016b8:	e00f      	b.n	80016da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016ba:	4a0a      	ldr	r2, [pc, #40]	; (80016e4 <SysTick_Config+0x40>)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	3b01      	subs	r3, #1
 80016c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016c2:	210f      	movs	r1, #15
 80016c4:	f04f 30ff 	mov.w	r0, #4294967295
 80016c8:	f7ff ff8e 	bl	80015e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016cc:	4b05      	ldr	r3, [pc, #20]	; (80016e4 <SysTick_Config+0x40>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016d2:	4b04      	ldr	r3, [pc, #16]	; (80016e4 <SysTick_Config+0x40>)
 80016d4:	2207      	movs	r2, #7
 80016d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016d8:	2300      	movs	r3, #0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	e000e010 	.word	0xe000e010

080016e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f7ff ff29 	bl	8001548 <__NVIC_SetPriorityGrouping>
}
 80016f6:	bf00      	nop
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}

080016fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016fe:	b580      	push	{r7, lr}
 8001700:	b086      	sub	sp, #24
 8001702:	af00      	add	r7, sp, #0
 8001704:	4603      	mov	r3, r0
 8001706:	60b9      	str	r1, [r7, #8]
 8001708:	607a      	str	r2, [r7, #4]
 800170a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800170c:	2300      	movs	r3, #0
 800170e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001710:	f7ff ff3e 	bl	8001590 <__NVIC_GetPriorityGrouping>
 8001714:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	68b9      	ldr	r1, [r7, #8]
 800171a:	6978      	ldr	r0, [r7, #20]
 800171c:	f7ff ff8e 	bl	800163c <NVIC_EncodePriority>
 8001720:	4602      	mov	r2, r0
 8001722:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001726:	4611      	mov	r1, r2
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff ff5d 	bl	80015e8 <__NVIC_SetPriority>
}
 800172e:	bf00      	nop
 8001730:	3718      	adds	r7, #24
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}

08001736 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001736:	b580      	push	{r7, lr}
 8001738:	b082      	sub	sp, #8
 800173a:	af00      	add	r7, sp, #0
 800173c:	4603      	mov	r3, r0
 800173e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001740:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff ff31 	bl	80015ac <__NVIC_EnableIRQ>
}
 800174a:	bf00      	nop
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}

08001752 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001752:	b580      	push	{r7, lr}
 8001754:	b082      	sub	sp, #8
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f7ff ffa2 	bl	80016a4 <SysTick_Config>
 8001760:	4603      	mov	r3, r0
}
 8001762:	4618      	mov	r0, r3
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	b084      	sub	sp, #16
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001776:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001778:	f7ff feb6 	bl	80014e8 <HAL_GetTick>
 800177c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001784:	b2db      	uxtb	r3, r3
 8001786:	2b02      	cmp	r3, #2
 8001788:	d008      	beq.n	800179c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2280      	movs	r2, #128	; 0x80
 800178e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2200      	movs	r2, #0
 8001794:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e052      	b.n	8001842 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f022 0216 	bic.w	r2, r2, #22
 80017aa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	695a      	ldr	r2, [r3, #20]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017ba:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d103      	bne.n	80017cc <HAL_DMA_Abort+0x62>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d007      	beq.n	80017dc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f022 0208 	bic.w	r2, r2, #8
 80017da:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f022 0201 	bic.w	r2, r2, #1
 80017ea:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017ec:	e013      	b.n	8001816 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80017ee:	f7ff fe7b 	bl	80014e8 <HAL_GetTick>
 80017f2:	4602      	mov	r2, r0
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	2b05      	cmp	r3, #5
 80017fa:	d90c      	bls.n	8001816 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2220      	movs	r2, #32
 8001800:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2203      	movs	r2, #3
 8001806:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2200      	movs	r2, #0
 800180e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e015      	b.n	8001842 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0301 	and.w	r3, r3, #1
 8001820:	2b00      	cmp	r3, #0
 8001822:	d1e4      	bne.n	80017ee <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001828:	223f      	movs	r2, #63	; 0x3f
 800182a:	409a      	lsls	r2, r3
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2201      	movs	r2, #1
 8001834:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2200      	movs	r2, #0
 800183c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001840:	2300      	movs	r3, #0
}
 8001842:	4618      	mov	r0, r3
 8001844:	3710      	adds	r7, #16
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}

0800184a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800184a:	b480      	push	{r7}
 800184c:	b083      	sub	sp, #12
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001858:	b2db      	uxtb	r3, r3
 800185a:	2b02      	cmp	r3, #2
 800185c:	d004      	beq.n	8001868 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2280      	movs	r2, #128	; 0x80
 8001862:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e00c      	b.n	8001882 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2205      	movs	r2, #5
 800186c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f022 0201 	bic.w	r2, r2, #1
 800187e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001880:	2300      	movs	r3, #0
}
 8001882:	4618      	mov	r0, r3
 8001884:	370c      	adds	r7, #12
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
	...

08001890 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001890:	b480      	push	{r7}
 8001892:	b089      	sub	sp, #36	; 0x24
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800189a:	2300      	movs	r3, #0
 800189c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800189e:	2300      	movs	r3, #0
 80018a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80018a2:	2300      	movs	r3, #0
 80018a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80018a6:	2300      	movs	r3, #0
 80018a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80018aa:	2300      	movs	r3, #0
 80018ac:	61fb      	str	r3, [r7, #28]
 80018ae:	e169      	b.n	8001b84 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80018b0:	2201      	movs	r2, #1
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	697a      	ldr	r2, [r7, #20]
 80018c0:	4013      	ands	r3, r2
 80018c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018c4:	693a      	ldr	r2, [r7, #16]
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	f040 8158 	bne.w	8001b7e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f003 0303 	and.w	r3, r3, #3
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d005      	beq.n	80018e6 <HAL_GPIO_Init+0x56>
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f003 0303 	and.w	r3, r3, #3
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d130      	bne.n	8001948 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	2203      	movs	r2, #3
 80018f2:	fa02 f303 	lsl.w	r3, r2, r3
 80018f6:	43db      	mvns	r3, r3
 80018f8:	69ba      	ldr	r2, [r7, #24]
 80018fa:	4013      	ands	r3, r2
 80018fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	68da      	ldr	r2, [r3, #12]
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	fa02 f303 	lsl.w	r3, r2, r3
 800190a:	69ba      	ldr	r2, [r7, #24]
 800190c:	4313      	orrs	r3, r2
 800190e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	69ba      	ldr	r2, [r7, #24]
 8001914:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800191c:	2201      	movs	r2, #1
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	fa02 f303 	lsl.w	r3, r2, r3
 8001924:	43db      	mvns	r3, r3
 8001926:	69ba      	ldr	r2, [r7, #24]
 8001928:	4013      	ands	r3, r2
 800192a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	091b      	lsrs	r3, r3, #4
 8001932:	f003 0201 	and.w	r2, r3, #1
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	4313      	orrs	r3, r2
 8001940:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f003 0303 	and.w	r3, r3, #3
 8001950:	2b03      	cmp	r3, #3
 8001952:	d017      	beq.n	8001984 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	2203      	movs	r2, #3
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	43db      	mvns	r3, r3
 8001966:	69ba      	ldr	r2, [r7, #24]
 8001968:	4013      	ands	r3, r2
 800196a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	689a      	ldr	r2, [r3, #8]
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	4313      	orrs	r3, r2
 800197c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	69ba      	ldr	r2, [r7, #24]
 8001982:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f003 0303 	and.w	r3, r3, #3
 800198c:	2b02      	cmp	r3, #2
 800198e:	d123      	bne.n	80019d8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	08da      	lsrs	r2, r3, #3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	3208      	adds	r2, #8
 8001998:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800199c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	f003 0307 	and.w	r3, r3, #7
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	220f      	movs	r2, #15
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	43db      	mvns	r3, r3
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	4013      	ands	r3, r2
 80019b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	691a      	ldr	r2, [r3, #16]
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	f003 0307 	and.w	r3, r3, #7
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	08da      	lsrs	r2, r3, #3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	3208      	adds	r2, #8
 80019d2:	69b9      	ldr	r1, [r7, #24]
 80019d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	2203      	movs	r2, #3
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	43db      	mvns	r3, r3
 80019ea:	69ba      	ldr	r2, [r7, #24]
 80019ec:	4013      	ands	r3, r2
 80019ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f003 0203 	and.w	r2, r3, #3
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	f000 80b2 	beq.w	8001b7e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a1a:	4b60      	ldr	r3, [pc, #384]	; (8001b9c <HAL_GPIO_Init+0x30c>)
 8001a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1e:	4a5f      	ldr	r2, [pc, #380]	; (8001b9c <HAL_GPIO_Init+0x30c>)
 8001a20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a24:	6453      	str	r3, [r2, #68]	; 0x44
 8001a26:	4b5d      	ldr	r3, [pc, #372]	; (8001b9c <HAL_GPIO_Init+0x30c>)
 8001a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a2e:	60fb      	str	r3, [r7, #12]
 8001a30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001a32:	4a5b      	ldr	r2, [pc, #364]	; (8001ba0 <HAL_GPIO_Init+0x310>)
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	089b      	lsrs	r3, r3, #2
 8001a38:	3302      	adds	r3, #2
 8001a3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	f003 0303 	and.w	r3, r3, #3
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	220f      	movs	r2, #15
 8001a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4e:	43db      	mvns	r3, r3
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	4013      	ands	r3, r2
 8001a54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a52      	ldr	r2, [pc, #328]	; (8001ba4 <HAL_GPIO_Init+0x314>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d02b      	beq.n	8001ab6 <HAL_GPIO_Init+0x226>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a51      	ldr	r2, [pc, #324]	; (8001ba8 <HAL_GPIO_Init+0x318>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d025      	beq.n	8001ab2 <HAL_GPIO_Init+0x222>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4a50      	ldr	r2, [pc, #320]	; (8001bac <HAL_GPIO_Init+0x31c>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d01f      	beq.n	8001aae <HAL_GPIO_Init+0x21e>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a4f      	ldr	r2, [pc, #316]	; (8001bb0 <HAL_GPIO_Init+0x320>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d019      	beq.n	8001aaa <HAL_GPIO_Init+0x21a>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a4e      	ldr	r2, [pc, #312]	; (8001bb4 <HAL_GPIO_Init+0x324>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d013      	beq.n	8001aa6 <HAL_GPIO_Init+0x216>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4a4d      	ldr	r2, [pc, #308]	; (8001bb8 <HAL_GPIO_Init+0x328>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d00d      	beq.n	8001aa2 <HAL_GPIO_Init+0x212>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a4c      	ldr	r2, [pc, #304]	; (8001bbc <HAL_GPIO_Init+0x32c>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d007      	beq.n	8001a9e <HAL_GPIO_Init+0x20e>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a4b      	ldr	r2, [pc, #300]	; (8001bc0 <HAL_GPIO_Init+0x330>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d101      	bne.n	8001a9a <HAL_GPIO_Init+0x20a>
 8001a96:	2307      	movs	r3, #7
 8001a98:	e00e      	b.n	8001ab8 <HAL_GPIO_Init+0x228>
 8001a9a:	2308      	movs	r3, #8
 8001a9c:	e00c      	b.n	8001ab8 <HAL_GPIO_Init+0x228>
 8001a9e:	2306      	movs	r3, #6
 8001aa0:	e00a      	b.n	8001ab8 <HAL_GPIO_Init+0x228>
 8001aa2:	2305      	movs	r3, #5
 8001aa4:	e008      	b.n	8001ab8 <HAL_GPIO_Init+0x228>
 8001aa6:	2304      	movs	r3, #4
 8001aa8:	e006      	b.n	8001ab8 <HAL_GPIO_Init+0x228>
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e004      	b.n	8001ab8 <HAL_GPIO_Init+0x228>
 8001aae:	2302      	movs	r3, #2
 8001ab0:	e002      	b.n	8001ab8 <HAL_GPIO_Init+0x228>
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e000      	b.n	8001ab8 <HAL_GPIO_Init+0x228>
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	69fa      	ldr	r2, [r7, #28]
 8001aba:	f002 0203 	and.w	r2, r2, #3
 8001abe:	0092      	lsls	r2, r2, #2
 8001ac0:	4093      	lsls	r3, r2
 8001ac2:	69ba      	ldr	r2, [r7, #24]
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001ac8:	4935      	ldr	r1, [pc, #212]	; (8001ba0 <HAL_GPIO_Init+0x310>)
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	089b      	lsrs	r3, r3, #2
 8001ace:	3302      	adds	r3, #2
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ad6:	4b3b      	ldr	r3, [pc, #236]	; (8001bc4 <HAL_GPIO_Init+0x334>)
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	43db      	mvns	r3, r3
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d003      	beq.n	8001afa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001af2:	69ba      	ldr	r2, [r7, #24]
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001afa:	4a32      	ldr	r2, [pc, #200]	; (8001bc4 <HAL_GPIO_Init+0x334>)
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b00:	4b30      	ldr	r3, [pc, #192]	; (8001bc4 <HAL_GPIO_Init+0x334>)
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	69ba      	ldr	r2, [r7, #24]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d003      	beq.n	8001b24 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b24:	4a27      	ldr	r2, [pc, #156]	; (8001bc4 <HAL_GPIO_Init+0x334>)
 8001b26:	69bb      	ldr	r3, [r7, #24]
 8001b28:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b2a:	4b26      	ldr	r3, [pc, #152]	; (8001bc4 <HAL_GPIO_Init+0x334>)
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	43db      	mvns	r3, r3
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	4013      	ands	r3, r2
 8001b38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d003      	beq.n	8001b4e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001b46:	69ba      	ldr	r2, [r7, #24]
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b4e:	4a1d      	ldr	r2, [pc, #116]	; (8001bc4 <HAL_GPIO_Init+0x334>)
 8001b50:	69bb      	ldr	r3, [r7, #24]
 8001b52:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b54:	4b1b      	ldr	r3, [pc, #108]	; (8001bc4 <HAL_GPIO_Init+0x334>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	43db      	mvns	r3, r3
 8001b5e:	69ba      	ldr	r2, [r7, #24]
 8001b60:	4013      	ands	r3, r2
 8001b62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d003      	beq.n	8001b78 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b78:	4a12      	ldr	r2, [pc, #72]	; (8001bc4 <HAL_GPIO_Init+0x334>)
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	3301      	adds	r3, #1
 8001b82:	61fb      	str	r3, [r7, #28]
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	2b0f      	cmp	r3, #15
 8001b88:	f67f ae92 	bls.w	80018b0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001b8c:	bf00      	nop
 8001b8e:	bf00      	nop
 8001b90:	3724      	adds	r7, #36	; 0x24
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	40023800 	.word	0x40023800
 8001ba0:	40013800 	.word	0x40013800
 8001ba4:	40020000 	.word	0x40020000
 8001ba8:	40020400 	.word	0x40020400
 8001bac:	40020800 	.word	0x40020800
 8001bb0:	40020c00 	.word	0x40020c00
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	40021400 	.word	0x40021400
 8001bbc:	40021800 	.word	0x40021800
 8001bc0:	40021c00 	.word	0x40021c00
 8001bc4:	40013c00 	.word	0x40013c00

08001bc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	807b      	strh	r3, [r7, #2]
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bd8:	787b      	ldrb	r3, [r7, #1]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d003      	beq.n	8001be6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bde:	887a      	ldrh	r2, [r7, #2]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001be4:	e003      	b.n	8001bee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001be6:	887b      	ldrh	r3, [r7, #2]
 8001be8:	041a      	lsls	r2, r3, #16
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	619a      	str	r2, [r3, #24]
}
 8001bee:	bf00      	nop
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr

08001bfa <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	b085      	sub	sp, #20
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
 8001c02:	460b      	mov	r3, r1
 8001c04:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	695b      	ldr	r3, [r3, #20]
 8001c0a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c0c:	887a      	ldrh	r2, [r7, #2]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	4013      	ands	r3, r2
 8001c12:	041a      	lsls	r2, r3, #16
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	43d9      	mvns	r1, r3
 8001c18:	887b      	ldrh	r3, [r7, #2]
 8001c1a:	400b      	ands	r3, r1
 8001c1c:	431a      	orrs	r2, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	619a      	str	r2, [r3, #24]
}
 8001c22:	bf00      	nop
 8001c24:	3714      	adds	r7, #20
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
	...

08001c30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d101      	bne.n	8001c42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e07f      	b.n	8001d42 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d106      	bne.n	8001c5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2200      	movs	r2, #0
 8001c52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f7ff f8be 	bl	8000dd8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2224      	movs	r2, #36	; 0x24
 8001c60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f022 0201 	bic.w	r2, r2, #1
 8001c72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685a      	ldr	r2, [r3, #4]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c80:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	689a      	ldr	r2, [r3, #8]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c90:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	68db      	ldr	r3, [r3, #12]
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d107      	bne.n	8001caa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	689a      	ldr	r2, [r3, #8]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ca6:	609a      	str	r2, [r3, #8]
 8001ca8:	e006      	b.n	8001cb8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	689a      	ldr	r2, [r3, #8]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001cb6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d104      	bne.n	8001cca <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001cc8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	6859      	ldr	r1, [r3, #4]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	4b1d      	ldr	r3, [pc, #116]	; (8001d4c <HAL_I2C_Init+0x11c>)
 8001cd6:	430b      	orrs	r3, r1
 8001cd8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	68da      	ldr	r2, [r3, #12]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ce8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	691a      	ldr	r2, [r3, #16]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	695b      	ldr	r3, [r3, #20]
 8001cf2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	699b      	ldr	r3, [r3, #24]
 8001cfa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	430a      	orrs	r2, r1
 8001d02:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	69d9      	ldr	r1, [r3, #28]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6a1a      	ldr	r2, [r3, #32]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	430a      	orrs	r2, r1
 8001d12:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f042 0201 	orr.w	r2, r2, #1
 8001d22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2220      	movs	r2, #32
 8001d2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	02008000 	.word	0x02008000

08001d50 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b088      	sub	sp, #32
 8001d54:	af02      	add	r7, sp, #8
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	4608      	mov	r0, r1
 8001d5a:	4611      	mov	r1, r2
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	4603      	mov	r3, r0
 8001d60:	817b      	strh	r3, [r7, #10]
 8001d62:	460b      	mov	r3, r1
 8001d64:	813b      	strh	r3, [r7, #8]
 8001d66:	4613      	mov	r3, r2
 8001d68:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	2b20      	cmp	r3, #32
 8001d74:	f040 80f9 	bne.w	8001f6a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d78:	6a3b      	ldr	r3, [r7, #32]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d002      	beq.n	8001d84 <HAL_I2C_Mem_Write+0x34>
 8001d7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d105      	bne.n	8001d90 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d8a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e0ed      	b.n	8001f6c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d101      	bne.n	8001d9e <HAL_I2C_Mem_Write+0x4e>
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	e0e6      	b.n	8001f6c <HAL_I2C_Mem_Write+0x21c>
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2201      	movs	r2, #1
 8001da2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001da6:	f7ff fb9f 	bl	80014e8 <HAL_GetTick>
 8001daa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	9300      	str	r3, [sp, #0]
 8001db0:	2319      	movs	r3, #25
 8001db2:	2201      	movs	r2, #1
 8001db4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001db8:	68f8      	ldr	r0, [r7, #12]
 8001dba:	f000 f955 	bl	8002068 <I2C_WaitOnFlagUntilTimeout>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d001      	beq.n	8001dc8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e0d1      	b.n	8001f6c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2221      	movs	r2, #33	; 0x21
 8001dcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2240      	movs	r2, #64	; 0x40
 8001dd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	6a3a      	ldr	r2, [r7, #32]
 8001de2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001de8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2200      	movs	r2, #0
 8001dee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001df0:	88f8      	ldrh	r0, [r7, #6]
 8001df2:	893a      	ldrh	r2, [r7, #8]
 8001df4:	8979      	ldrh	r1, [r7, #10]
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	9301      	str	r3, [sp, #4]
 8001dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dfc:	9300      	str	r3, [sp, #0]
 8001dfe:	4603      	mov	r3, r0
 8001e00:	68f8      	ldr	r0, [r7, #12]
 8001e02:	f000 f8b9 	bl	8001f78 <I2C_RequestMemoryWrite>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d005      	beq.n	8001e18 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e0a9      	b.n	8001f6c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	2bff      	cmp	r3, #255	; 0xff
 8001e20:	d90e      	bls.n	8001e40 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	22ff      	movs	r2, #255	; 0xff
 8001e26:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e2c:	b2da      	uxtb	r2, r3
 8001e2e:	8979      	ldrh	r1, [r7, #10]
 8001e30:	2300      	movs	r3, #0
 8001e32:	9300      	str	r3, [sp, #0]
 8001e34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e38:	68f8      	ldr	r0, [r7, #12]
 8001e3a:	f000 fab1 	bl	80023a0 <I2C_TransferConfig>
 8001e3e:	e00f      	b.n	8001e60 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e44:	b29a      	uxth	r2, r3
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e4e:	b2da      	uxtb	r2, r3
 8001e50:	8979      	ldrh	r1, [r7, #10]
 8001e52:	2300      	movs	r3, #0
 8001e54:	9300      	str	r3, [sp, #0]
 8001e56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e5a:	68f8      	ldr	r0, [r7, #12]
 8001e5c:	f000 faa0 	bl	80023a0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e60:	697a      	ldr	r2, [r7, #20]
 8001e62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e64:	68f8      	ldr	r0, [r7, #12]
 8001e66:	f000 f93f 	bl	80020e8 <I2C_WaitOnTXISFlagUntilTimeout>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d001      	beq.n	8001e74 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e07b      	b.n	8001f6c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e78:	781a      	ldrb	r2, [r3, #0]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e84:	1c5a      	adds	r2, r3, #1
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	3b01      	subs	r3, #1
 8001e92:	b29a      	uxth	r2, r3
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e9c:	3b01      	subs	r3, #1
 8001e9e:	b29a      	uxth	r2, r3
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d034      	beq.n	8001f18 <HAL_I2C_Mem_Write+0x1c8>
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d130      	bne.n	8001f18 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	9300      	str	r3, [sp, #0]
 8001eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	2180      	movs	r1, #128	; 0x80
 8001ec0:	68f8      	ldr	r0, [r7, #12]
 8001ec2:	f000 f8d1 	bl	8002068 <I2C_WaitOnFlagUntilTimeout>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e04d      	b.n	8001f6c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	2bff      	cmp	r3, #255	; 0xff
 8001ed8:	d90e      	bls.n	8001ef8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	22ff      	movs	r2, #255	; 0xff
 8001ede:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ee4:	b2da      	uxtb	r2, r3
 8001ee6:	8979      	ldrh	r1, [r7, #10]
 8001ee8:	2300      	movs	r3, #0
 8001eea:	9300      	str	r3, [sp, #0]
 8001eec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ef0:	68f8      	ldr	r0, [r7, #12]
 8001ef2:	f000 fa55 	bl	80023a0 <I2C_TransferConfig>
 8001ef6:	e00f      	b.n	8001f18 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001efc:	b29a      	uxth	r2, r3
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f06:	b2da      	uxtb	r2, r3
 8001f08:	8979      	ldrh	r1, [r7, #10]
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	9300      	str	r3, [sp, #0]
 8001f0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f12:	68f8      	ldr	r0, [r7, #12]
 8001f14:	f000 fa44 	bl	80023a0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f1c:	b29b      	uxth	r3, r3
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d19e      	bne.n	8001e60 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f22:	697a      	ldr	r2, [r7, #20]
 8001f24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f26:	68f8      	ldr	r0, [r7, #12]
 8001f28:	f000 f91e 	bl	8002168 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e01a      	b.n	8001f6c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	2220      	movs	r2, #32
 8001f3c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	6859      	ldr	r1, [r3, #4]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	4b0a      	ldr	r3, [pc, #40]	; (8001f74 <HAL_I2C_Mem_Write+0x224>)
 8001f4a:	400b      	ands	r3, r1
 8001f4c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2220      	movs	r2, #32
 8001f52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2200      	movs	r2, #0
 8001f62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f66:	2300      	movs	r3, #0
 8001f68:	e000      	b.n	8001f6c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001f6a:	2302      	movs	r3, #2
  }
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3718      	adds	r7, #24
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	fe00e800 	.word	0xfe00e800

08001f78 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b086      	sub	sp, #24
 8001f7c:	af02      	add	r7, sp, #8
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	4608      	mov	r0, r1
 8001f82:	4611      	mov	r1, r2
 8001f84:	461a      	mov	r2, r3
 8001f86:	4603      	mov	r3, r0
 8001f88:	817b      	strh	r3, [r7, #10]
 8001f8a:	460b      	mov	r3, r1
 8001f8c:	813b      	strh	r3, [r7, #8]
 8001f8e:	4613      	mov	r3, r2
 8001f90:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001f92:	88fb      	ldrh	r3, [r7, #6]
 8001f94:	b2da      	uxtb	r2, r3
 8001f96:	8979      	ldrh	r1, [r7, #10]
 8001f98:	4b20      	ldr	r3, [pc, #128]	; (800201c <I2C_RequestMemoryWrite+0xa4>)
 8001f9a:	9300      	str	r3, [sp, #0]
 8001f9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001fa0:	68f8      	ldr	r0, [r7, #12]
 8001fa2:	f000 f9fd 	bl	80023a0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fa6:	69fa      	ldr	r2, [r7, #28]
 8001fa8:	69b9      	ldr	r1, [r7, #24]
 8001faa:	68f8      	ldr	r0, [r7, #12]
 8001fac:	f000 f89c 	bl	80020e8 <I2C_WaitOnTXISFlagUntilTimeout>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e02c      	b.n	8002014 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001fba:	88fb      	ldrh	r3, [r7, #6]
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d105      	bne.n	8001fcc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001fc0:	893b      	ldrh	r3, [r7, #8]
 8001fc2:	b2da      	uxtb	r2, r3
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	629a      	str	r2, [r3, #40]	; 0x28
 8001fca:	e015      	b.n	8001ff8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001fcc:	893b      	ldrh	r3, [r7, #8]
 8001fce:	0a1b      	lsrs	r3, r3, #8
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	b2da      	uxtb	r2, r3
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fda:	69fa      	ldr	r2, [r7, #28]
 8001fdc:	69b9      	ldr	r1, [r7, #24]
 8001fde:	68f8      	ldr	r0, [r7, #12]
 8001fe0:	f000 f882 	bl	80020e8 <I2C_WaitOnTXISFlagUntilTimeout>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e012      	b.n	8002014 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001fee:	893b      	ldrh	r3, [r7, #8]
 8001ff0:	b2da      	uxtb	r2, r3
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	9300      	str	r3, [sp, #0]
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	2200      	movs	r2, #0
 8002000:	2180      	movs	r1, #128	; 0x80
 8002002:	68f8      	ldr	r0, [r7, #12]
 8002004:	f000 f830 	bl	8002068 <I2C_WaitOnFlagUntilTimeout>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e000      	b.n	8002014 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002012:	2300      	movs	r3, #0
}
 8002014:	4618      	mov	r0, r3
 8002016:	3710      	adds	r7, #16
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	80002000 	.word	0x80002000

08002020 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	699b      	ldr	r3, [r3, #24]
 800202e:	f003 0302 	and.w	r3, r3, #2
 8002032:	2b02      	cmp	r3, #2
 8002034:	d103      	bne.n	800203e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	2200      	movs	r2, #0
 800203c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	699b      	ldr	r3, [r3, #24]
 8002044:	f003 0301 	and.w	r3, r3, #1
 8002048:	2b01      	cmp	r3, #1
 800204a:	d007      	beq.n	800205c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	699a      	ldr	r2, [r3, #24]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f042 0201 	orr.w	r2, r2, #1
 800205a:	619a      	str	r2, [r3, #24]
  }
}
 800205c:	bf00      	nop
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	60b9      	str	r1, [r7, #8]
 8002072:	603b      	str	r3, [r7, #0]
 8002074:	4613      	mov	r3, r2
 8002076:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002078:	e022      	b.n	80020c0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002080:	d01e      	beq.n	80020c0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002082:	f7ff fa31 	bl	80014e8 <HAL_GetTick>
 8002086:	4602      	mov	r2, r0
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	683a      	ldr	r2, [r7, #0]
 800208e:	429a      	cmp	r2, r3
 8002090:	d302      	bcc.n	8002098 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d113      	bne.n	80020c0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800209c:	f043 0220 	orr.w	r2, r3, #32
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2220      	movs	r2, #32
 80020a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2200      	movs	r2, #0
 80020b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2200      	movs	r2, #0
 80020b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e00f      	b.n	80020e0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	699a      	ldr	r2, [r3, #24]
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	4013      	ands	r3, r2
 80020ca:	68ba      	ldr	r2, [r7, #8]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	bf0c      	ite	eq
 80020d0:	2301      	moveq	r3, #1
 80020d2:	2300      	movne	r3, #0
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	461a      	mov	r2, r3
 80020d8:	79fb      	ldrb	r3, [r7, #7]
 80020da:	429a      	cmp	r2, r3
 80020dc:	d0cd      	beq.n	800207a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80020de:	2300      	movs	r3, #0
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3710      	adds	r7, #16
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	60f8      	str	r0, [r7, #12]
 80020f0:	60b9      	str	r1, [r7, #8]
 80020f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80020f4:	e02c      	b.n	8002150 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	68b9      	ldr	r1, [r7, #8]
 80020fa:	68f8      	ldr	r0, [r7, #12]
 80020fc:	f000 f870 	bl	80021e0 <I2C_IsErrorOccurred>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e02a      	b.n	8002160 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002110:	d01e      	beq.n	8002150 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002112:	f7ff f9e9 	bl	80014e8 <HAL_GetTick>
 8002116:	4602      	mov	r2, r0
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	68ba      	ldr	r2, [r7, #8]
 800211e:	429a      	cmp	r2, r3
 8002120:	d302      	bcc.n	8002128 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d113      	bne.n	8002150 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212c:	f043 0220 	orr.w	r2, r3, #32
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2220      	movs	r2, #32
 8002138:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2200      	movs	r2, #0
 8002140:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2200      	movs	r2, #0
 8002148:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e007      	b.n	8002160 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	699b      	ldr	r3, [r3, #24]
 8002156:	f003 0302 	and.w	r3, r3, #2
 800215a:	2b02      	cmp	r3, #2
 800215c:	d1cb      	bne.n	80020f6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800215e:	2300      	movs	r3, #0
}
 8002160:	4618      	mov	r0, r3
 8002162:	3710      	adds	r7, #16
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002174:	e028      	b.n	80021c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	68b9      	ldr	r1, [r7, #8]
 800217a:	68f8      	ldr	r0, [r7, #12]
 800217c:	f000 f830 	bl	80021e0 <I2C_IsErrorOccurred>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e026      	b.n	80021d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800218a:	f7ff f9ad 	bl	80014e8 <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	68ba      	ldr	r2, [r7, #8]
 8002196:	429a      	cmp	r2, r3
 8002198:	d302      	bcc.n	80021a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d113      	bne.n	80021c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a4:	f043 0220 	orr.w	r2, r3, #32
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2220      	movs	r2, #32
 80021b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2200      	movs	r2, #0
 80021b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2200      	movs	r2, #0
 80021c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e007      	b.n	80021d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	699b      	ldr	r3, [r3, #24]
 80021ce:	f003 0320 	and.w	r3, r3, #32
 80021d2:	2b20      	cmp	r3, #32
 80021d4:	d1cf      	bne.n	8002176 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80021d6:	2300      	movs	r3, #0
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3710      	adds	r7, #16
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}

080021e0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b08a      	sub	sp, #40	; 0x28
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	60b9      	str	r1, [r7, #8]
 80021ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021ec:	2300      	movs	r3, #0
 80021ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	699b      	ldr	r3, [r3, #24]
 80021f8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80021fa:	2300      	movs	r3, #0
 80021fc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002202:	69bb      	ldr	r3, [r7, #24]
 8002204:	f003 0310 	and.w	r3, r3, #16
 8002208:	2b00      	cmp	r3, #0
 800220a:	d068      	beq.n	80022de <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2210      	movs	r2, #16
 8002212:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002214:	e049      	b.n	80022aa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800221c:	d045      	beq.n	80022aa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800221e:	f7ff f963 	bl	80014e8 <HAL_GetTick>
 8002222:	4602      	mov	r2, r0
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	68ba      	ldr	r2, [r7, #8]
 800222a:	429a      	cmp	r2, r3
 800222c:	d302      	bcc.n	8002234 <I2C_IsErrorOccurred+0x54>
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d13a      	bne.n	80022aa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800223e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002246:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	699b      	ldr	r3, [r3, #24]
 800224e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002252:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002256:	d121      	bne.n	800229c <I2C_IsErrorOccurred+0xbc>
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800225e:	d01d      	beq.n	800229c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002260:	7cfb      	ldrb	r3, [r7, #19]
 8002262:	2b20      	cmp	r3, #32
 8002264:	d01a      	beq.n	800229c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	685a      	ldr	r2, [r3, #4]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002274:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002276:	f7ff f937 	bl	80014e8 <HAL_GetTick>
 800227a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800227c:	e00e      	b.n	800229c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800227e:	f7ff f933 	bl	80014e8 <HAL_GetTick>
 8002282:	4602      	mov	r2, r0
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	2b19      	cmp	r3, #25
 800228a:	d907      	bls.n	800229c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 800228c:	6a3b      	ldr	r3, [r7, #32]
 800228e:	f043 0320 	orr.w	r3, r3, #32
 8002292:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800229a:	e006      	b.n	80022aa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	699b      	ldr	r3, [r3, #24]
 80022a2:	f003 0320 	and.w	r3, r3, #32
 80022a6:	2b20      	cmp	r3, #32
 80022a8:	d1e9      	bne.n	800227e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	699b      	ldr	r3, [r3, #24]
 80022b0:	f003 0320 	and.w	r3, r3, #32
 80022b4:	2b20      	cmp	r3, #32
 80022b6:	d003      	beq.n	80022c0 <I2C_IsErrorOccurred+0xe0>
 80022b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d0aa      	beq.n	8002216 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80022c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d103      	bne.n	80022d0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2220      	movs	r2, #32
 80022ce:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80022d0:	6a3b      	ldr	r3, [r7, #32]
 80022d2:	f043 0304 	orr.w	r3, r3, #4
 80022d6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	699b      	ldr	r3, [r3, #24]
 80022e4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d00b      	beq.n	8002308 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80022f0:	6a3b      	ldr	r3, [r7, #32]
 80022f2:	f043 0301 	orr.w	r3, r3, #1
 80022f6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002300:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002308:	69bb      	ldr	r3, [r7, #24]
 800230a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800230e:	2b00      	cmp	r3, #0
 8002310:	d00b      	beq.n	800232a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002312:	6a3b      	ldr	r3, [r7, #32]
 8002314:	f043 0308 	orr.w	r3, r3, #8
 8002318:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002322:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800232a:	69bb      	ldr	r3, [r7, #24]
 800232c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002330:	2b00      	cmp	r3, #0
 8002332:	d00b      	beq.n	800234c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002334:	6a3b      	ldr	r3, [r7, #32]
 8002336:	f043 0302 	orr.w	r3, r3, #2
 800233a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002344:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800234c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002350:	2b00      	cmp	r3, #0
 8002352:	d01c      	beq.n	800238e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002354:	68f8      	ldr	r0, [r7, #12]
 8002356:	f7ff fe63 	bl	8002020 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	6859      	ldr	r1, [r3, #4]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	4b0d      	ldr	r3, [pc, #52]	; (800239c <I2C_IsErrorOccurred+0x1bc>)
 8002366:	400b      	ands	r3, r1
 8002368:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800236e:	6a3b      	ldr	r3, [r7, #32]
 8002370:	431a      	orrs	r2, r3
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2220      	movs	r2, #32
 800237a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2200      	movs	r2, #0
 8002382:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2200      	movs	r2, #0
 800238a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800238e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002392:	4618      	mov	r0, r3
 8002394:	3728      	adds	r7, #40	; 0x28
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	fe00e800 	.word	0xfe00e800

080023a0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b087      	sub	sp, #28
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	607b      	str	r3, [r7, #4]
 80023aa:	460b      	mov	r3, r1
 80023ac:	817b      	strh	r3, [r7, #10]
 80023ae:	4613      	mov	r3, r2
 80023b0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80023b2:	897b      	ldrh	r3, [r7, #10]
 80023b4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80023b8:	7a7b      	ldrb	r3, [r7, #9]
 80023ba:	041b      	lsls	r3, r3, #16
 80023bc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80023c0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80023c6:	6a3b      	ldr	r3, [r7, #32]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80023ce:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	685a      	ldr	r2, [r3, #4]
 80023d6:	6a3b      	ldr	r3, [r7, #32]
 80023d8:	0d5b      	lsrs	r3, r3, #21
 80023da:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80023de:	4b08      	ldr	r3, [pc, #32]	; (8002400 <I2C_TransferConfig+0x60>)
 80023e0:	430b      	orrs	r3, r1
 80023e2:	43db      	mvns	r3, r3
 80023e4:	ea02 0103 	and.w	r1, r2, r3
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	697a      	ldr	r2, [r7, #20]
 80023ee:	430a      	orrs	r2, r1
 80023f0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80023f2:	bf00      	nop
 80023f4:	371c      	adds	r7, #28
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	03ff63ff 	.word	0x03ff63ff

08002404 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002414:	b2db      	uxtb	r3, r3
 8002416:	2b20      	cmp	r3, #32
 8002418:	d138      	bne.n	800248c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002420:	2b01      	cmp	r3, #1
 8002422:	d101      	bne.n	8002428 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002424:	2302      	movs	r3, #2
 8002426:	e032      	b.n	800248e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2224      	movs	r2, #36	; 0x24
 8002434:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f022 0201 	bic.w	r2, r2, #1
 8002446:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002456:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	6819      	ldr	r1, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	683a      	ldr	r2, [r7, #0]
 8002464:	430a      	orrs	r2, r1
 8002466:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f042 0201 	orr.w	r2, r2, #1
 8002476:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2220      	movs	r2, #32
 800247c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2200      	movs	r2, #0
 8002484:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002488:	2300      	movs	r3, #0
 800248a:	e000      	b.n	800248e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800248c:	2302      	movs	r3, #2
  }
}
 800248e:	4618      	mov	r0, r3
 8002490:	370c      	adds	r7, #12
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr

0800249a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800249a:	b480      	push	{r7}
 800249c:	b085      	sub	sp, #20
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
 80024a2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	2b20      	cmp	r3, #32
 80024ae:	d139      	bne.n	8002524 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d101      	bne.n	80024be <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80024ba:	2302      	movs	r3, #2
 80024bc:	e033      	b.n	8002526 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2201      	movs	r2, #1
 80024c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2224      	movs	r2, #36	; 0x24
 80024ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f022 0201 	bic.w	r2, r2, #1
 80024dc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80024ec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	021b      	lsls	r3, r3, #8
 80024f2:	68fa      	ldr	r2, [r7, #12]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	68fa      	ldr	r2, [r7, #12]
 80024fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f042 0201 	orr.w	r2, r2, #1
 800250e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2220      	movs	r2, #32
 8002514:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2200      	movs	r2, #0
 800251c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002520:	2300      	movs	r3, #0
 8002522:	e000      	b.n	8002526 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002524:	2302      	movs	r3, #2
  }
}
 8002526:	4618      	mov	r0, r3
 8002528:	3714      	adds	r7, #20
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr

08002532 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002532:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002534:	b08f      	sub	sp, #60	; 0x3c
 8002536:	af0a      	add	r7, sp, #40	; 0x28
 8002538:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d101      	bne.n	8002544 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e116      	b.n	8002772 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002550:	b2db      	uxtb	r3, r3
 8002552:	2b00      	cmp	r3, #0
 8002554:	d106      	bne.n	8002564 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f7fe fe48 	bl	80011f4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2203      	movs	r2, #3
 8002568:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002574:	2b00      	cmp	r3, #0
 8002576:	d102      	bne.n	800257e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2200      	movs	r2, #0
 800257c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4618      	mov	r0, r3
 8002584:	f003 face 	bl	8005b24 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	603b      	str	r3, [r7, #0]
 800258e:	687e      	ldr	r6, [r7, #4]
 8002590:	466d      	mov	r5, sp
 8002592:	f106 0410 	add.w	r4, r6, #16
 8002596:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002598:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800259a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800259c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800259e:	e894 0003 	ldmia.w	r4, {r0, r1}
 80025a2:	e885 0003 	stmia.w	r5, {r0, r1}
 80025a6:	1d33      	adds	r3, r6, #4
 80025a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025aa:	6838      	ldr	r0, [r7, #0]
 80025ac:	f003 fa32 	bl	8005a14 <USB_CoreInit>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d005      	beq.n	80025c2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2202      	movs	r2, #2
 80025ba:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e0d7      	b.n	8002772 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	2100      	movs	r1, #0
 80025c8:	4618      	mov	r0, r3
 80025ca:	f003 fabc 	bl	8005b46 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025ce:	2300      	movs	r3, #0
 80025d0:	73fb      	strb	r3, [r7, #15]
 80025d2:	e04a      	b.n	800266a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80025d4:	7bfa      	ldrb	r2, [r7, #15]
 80025d6:	6879      	ldr	r1, [r7, #4]
 80025d8:	4613      	mov	r3, r2
 80025da:	00db      	lsls	r3, r3, #3
 80025dc:	4413      	add	r3, r2
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	440b      	add	r3, r1
 80025e2:	333d      	adds	r3, #61	; 0x3d
 80025e4:	2201      	movs	r2, #1
 80025e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80025e8:	7bfa      	ldrb	r2, [r7, #15]
 80025ea:	6879      	ldr	r1, [r7, #4]
 80025ec:	4613      	mov	r3, r2
 80025ee:	00db      	lsls	r3, r3, #3
 80025f0:	4413      	add	r3, r2
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	440b      	add	r3, r1
 80025f6:	333c      	adds	r3, #60	; 0x3c
 80025f8:	7bfa      	ldrb	r2, [r7, #15]
 80025fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80025fc:	7bfa      	ldrb	r2, [r7, #15]
 80025fe:	7bfb      	ldrb	r3, [r7, #15]
 8002600:	b298      	uxth	r0, r3
 8002602:	6879      	ldr	r1, [r7, #4]
 8002604:	4613      	mov	r3, r2
 8002606:	00db      	lsls	r3, r3, #3
 8002608:	4413      	add	r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	440b      	add	r3, r1
 800260e:	3344      	adds	r3, #68	; 0x44
 8002610:	4602      	mov	r2, r0
 8002612:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002614:	7bfa      	ldrb	r2, [r7, #15]
 8002616:	6879      	ldr	r1, [r7, #4]
 8002618:	4613      	mov	r3, r2
 800261a:	00db      	lsls	r3, r3, #3
 800261c:	4413      	add	r3, r2
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	440b      	add	r3, r1
 8002622:	3340      	adds	r3, #64	; 0x40
 8002624:	2200      	movs	r2, #0
 8002626:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002628:	7bfa      	ldrb	r2, [r7, #15]
 800262a:	6879      	ldr	r1, [r7, #4]
 800262c:	4613      	mov	r3, r2
 800262e:	00db      	lsls	r3, r3, #3
 8002630:	4413      	add	r3, r2
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	440b      	add	r3, r1
 8002636:	3348      	adds	r3, #72	; 0x48
 8002638:	2200      	movs	r2, #0
 800263a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800263c:	7bfa      	ldrb	r2, [r7, #15]
 800263e:	6879      	ldr	r1, [r7, #4]
 8002640:	4613      	mov	r3, r2
 8002642:	00db      	lsls	r3, r3, #3
 8002644:	4413      	add	r3, r2
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	440b      	add	r3, r1
 800264a:	334c      	adds	r3, #76	; 0x4c
 800264c:	2200      	movs	r2, #0
 800264e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002650:	7bfa      	ldrb	r2, [r7, #15]
 8002652:	6879      	ldr	r1, [r7, #4]
 8002654:	4613      	mov	r3, r2
 8002656:	00db      	lsls	r3, r3, #3
 8002658:	4413      	add	r3, r2
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	440b      	add	r3, r1
 800265e:	3354      	adds	r3, #84	; 0x54
 8002660:	2200      	movs	r2, #0
 8002662:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002664:	7bfb      	ldrb	r3, [r7, #15]
 8002666:	3301      	adds	r3, #1
 8002668:	73fb      	strb	r3, [r7, #15]
 800266a:	7bfa      	ldrb	r2, [r7, #15]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	429a      	cmp	r2, r3
 8002672:	d3af      	bcc.n	80025d4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002674:	2300      	movs	r3, #0
 8002676:	73fb      	strb	r3, [r7, #15]
 8002678:	e044      	b.n	8002704 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800267a:	7bfa      	ldrb	r2, [r7, #15]
 800267c:	6879      	ldr	r1, [r7, #4]
 800267e:	4613      	mov	r3, r2
 8002680:	00db      	lsls	r3, r3, #3
 8002682:	4413      	add	r3, r2
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	440b      	add	r3, r1
 8002688:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800268c:	2200      	movs	r2, #0
 800268e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002690:	7bfa      	ldrb	r2, [r7, #15]
 8002692:	6879      	ldr	r1, [r7, #4]
 8002694:	4613      	mov	r3, r2
 8002696:	00db      	lsls	r3, r3, #3
 8002698:	4413      	add	r3, r2
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	440b      	add	r3, r1
 800269e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80026a2:	7bfa      	ldrb	r2, [r7, #15]
 80026a4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80026a6:	7bfa      	ldrb	r2, [r7, #15]
 80026a8:	6879      	ldr	r1, [r7, #4]
 80026aa:	4613      	mov	r3, r2
 80026ac:	00db      	lsls	r3, r3, #3
 80026ae:	4413      	add	r3, r2
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	440b      	add	r3, r1
 80026b4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80026b8:	2200      	movs	r2, #0
 80026ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80026bc:	7bfa      	ldrb	r2, [r7, #15]
 80026be:	6879      	ldr	r1, [r7, #4]
 80026c0:	4613      	mov	r3, r2
 80026c2:	00db      	lsls	r3, r3, #3
 80026c4:	4413      	add	r3, r2
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	440b      	add	r3, r1
 80026ca:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80026ce:	2200      	movs	r2, #0
 80026d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80026d2:	7bfa      	ldrb	r2, [r7, #15]
 80026d4:	6879      	ldr	r1, [r7, #4]
 80026d6:	4613      	mov	r3, r2
 80026d8:	00db      	lsls	r3, r3, #3
 80026da:	4413      	add	r3, r2
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	440b      	add	r3, r1
 80026e0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80026e4:	2200      	movs	r2, #0
 80026e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80026e8:	7bfa      	ldrb	r2, [r7, #15]
 80026ea:	6879      	ldr	r1, [r7, #4]
 80026ec:	4613      	mov	r3, r2
 80026ee:	00db      	lsls	r3, r3, #3
 80026f0:	4413      	add	r3, r2
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	440b      	add	r3, r1
 80026f6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80026fa:	2200      	movs	r2, #0
 80026fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026fe:	7bfb      	ldrb	r3, [r7, #15]
 8002700:	3301      	adds	r3, #1
 8002702:	73fb      	strb	r3, [r7, #15]
 8002704:	7bfa      	ldrb	r2, [r7, #15]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	429a      	cmp	r2, r3
 800270c:	d3b5      	bcc.n	800267a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	603b      	str	r3, [r7, #0]
 8002714:	687e      	ldr	r6, [r7, #4]
 8002716:	466d      	mov	r5, sp
 8002718:	f106 0410 	add.w	r4, r6, #16
 800271c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800271e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002720:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002722:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002724:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002728:	e885 0003 	stmia.w	r5, {r0, r1}
 800272c:	1d33      	adds	r3, r6, #4
 800272e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002730:	6838      	ldr	r0, [r7, #0]
 8002732:	f003 fa55 	bl	8005be0 <USB_DevInit>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d005      	beq.n	8002748 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2202      	movs	r2, #2
 8002740:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e014      	b.n	8002772 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2201      	movs	r2, #1
 8002754:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275c:	2b01      	cmp	r3, #1
 800275e:	d102      	bne.n	8002766 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f000 f80b 	bl	800277c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4618      	mov	r0, r3
 800276c:	f003 fc23 	bl	8005fb6 <USB_DevDisconnect>

  return HAL_OK;
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	3714      	adds	r7, #20
 8002776:	46bd      	mov	sp, r7
 8002778:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800277c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800277c:	b480      	push	{r7}
 800277e:	b085      	sub	sp, #20
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2201      	movs	r2, #1
 800278e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80027aa:	4b05      	ldr	r3, [pc, #20]	; (80027c0 <HAL_PCDEx_ActivateLPM+0x44>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	68fa      	ldr	r2, [r7, #12]
 80027b0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80027b2:	2300      	movs	r3, #0
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3714      	adds	r7, #20
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr
 80027c0:	10000003 	.word	0x10000003

080027c4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80027ca:	2300      	movs	r3, #0
 80027cc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80027ce:	4b23      	ldr	r3, [pc, #140]	; (800285c <HAL_PWREx_EnableOverDrive+0x98>)
 80027d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d2:	4a22      	ldr	r2, [pc, #136]	; (800285c <HAL_PWREx_EnableOverDrive+0x98>)
 80027d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027d8:	6413      	str	r3, [r2, #64]	; 0x40
 80027da:	4b20      	ldr	r3, [pc, #128]	; (800285c <HAL_PWREx_EnableOverDrive+0x98>)
 80027dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027e2:	603b      	str	r3, [r7, #0]
 80027e4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80027e6:	4b1e      	ldr	r3, [pc, #120]	; (8002860 <HAL_PWREx_EnableOverDrive+0x9c>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a1d      	ldr	r2, [pc, #116]	; (8002860 <HAL_PWREx_EnableOverDrive+0x9c>)
 80027ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027f0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80027f2:	f7fe fe79 	bl	80014e8 <HAL_GetTick>
 80027f6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80027f8:	e009      	b.n	800280e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80027fa:	f7fe fe75 	bl	80014e8 <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002808:	d901      	bls.n	800280e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e022      	b.n	8002854 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800280e:	4b14      	ldr	r3, [pc, #80]	; (8002860 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002816:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800281a:	d1ee      	bne.n	80027fa <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800281c:	4b10      	ldr	r3, [pc, #64]	; (8002860 <HAL_PWREx_EnableOverDrive+0x9c>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a0f      	ldr	r2, [pc, #60]	; (8002860 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002822:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002826:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002828:	f7fe fe5e 	bl	80014e8 <HAL_GetTick>
 800282c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800282e:	e009      	b.n	8002844 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002830:	f7fe fe5a 	bl	80014e8 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800283e:	d901      	bls.n	8002844 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002840:	2303      	movs	r3, #3
 8002842:	e007      	b.n	8002854 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002844:	4b06      	ldr	r3, [pc, #24]	; (8002860 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800284c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002850:	d1ee      	bne.n	8002830 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002852:	2300      	movs	r3, #0
}
 8002854:	4618      	mov	r0, r3
 8002856:	3708      	adds	r7, #8
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	40023800 	.word	0x40023800
 8002860:	40007000 	.word	0x40007000

08002864 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b086      	sub	sp, #24
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800286c:	2300      	movs	r3, #0
 800286e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d101      	bne.n	800287a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e291      	b.n	8002d9e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0301 	and.w	r3, r3, #1
 8002882:	2b00      	cmp	r3, #0
 8002884:	f000 8087 	beq.w	8002996 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002888:	4b96      	ldr	r3, [pc, #600]	; (8002ae4 <HAL_RCC_OscConfig+0x280>)
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	f003 030c 	and.w	r3, r3, #12
 8002890:	2b04      	cmp	r3, #4
 8002892:	d00c      	beq.n	80028ae <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002894:	4b93      	ldr	r3, [pc, #588]	; (8002ae4 <HAL_RCC_OscConfig+0x280>)
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f003 030c 	and.w	r3, r3, #12
 800289c:	2b08      	cmp	r3, #8
 800289e:	d112      	bne.n	80028c6 <HAL_RCC_OscConfig+0x62>
 80028a0:	4b90      	ldr	r3, [pc, #576]	; (8002ae4 <HAL_RCC_OscConfig+0x280>)
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028ac:	d10b      	bne.n	80028c6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028ae:	4b8d      	ldr	r3, [pc, #564]	; (8002ae4 <HAL_RCC_OscConfig+0x280>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d06c      	beq.n	8002994 <HAL_RCC_OscConfig+0x130>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d168      	bne.n	8002994 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e26b      	b.n	8002d9e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028ce:	d106      	bne.n	80028de <HAL_RCC_OscConfig+0x7a>
 80028d0:	4b84      	ldr	r3, [pc, #528]	; (8002ae4 <HAL_RCC_OscConfig+0x280>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a83      	ldr	r2, [pc, #524]	; (8002ae4 <HAL_RCC_OscConfig+0x280>)
 80028d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028da:	6013      	str	r3, [r2, #0]
 80028dc:	e02e      	b.n	800293c <HAL_RCC_OscConfig+0xd8>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d10c      	bne.n	8002900 <HAL_RCC_OscConfig+0x9c>
 80028e6:	4b7f      	ldr	r3, [pc, #508]	; (8002ae4 <HAL_RCC_OscConfig+0x280>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a7e      	ldr	r2, [pc, #504]	; (8002ae4 <HAL_RCC_OscConfig+0x280>)
 80028ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028f0:	6013      	str	r3, [r2, #0]
 80028f2:	4b7c      	ldr	r3, [pc, #496]	; (8002ae4 <HAL_RCC_OscConfig+0x280>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a7b      	ldr	r2, [pc, #492]	; (8002ae4 <HAL_RCC_OscConfig+0x280>)
 80028f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028fc:	6013      	str	r3, [r2, #0]
 80028fe:	e01d      	b.n	800293c <HAL_RCC_OscConfig+0xd8>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002908:	d10c      	bne.n	8002924 <HAL_RCC_OscConfig+0xc0>
 800290a:	4b76      	ldr	r3, [pc, #472]	; (8002ae4 <HAL_RCC_OscConfig+0x280>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a75      	ldr	r2, [pc, #468]	; (8002ae4 <HAL_RCC_OscConfig+0x280>)
 8002910:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002914:	6013      	str	r3, [r2, #0]
 8002916:	4b73      	ldr	r3, [pc, #460]	; (8002ae4 <HAL_RCC_OscConfig+0x280>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a72      	ldr	r2, [pc, #456]	; (8002ae4 <HAL_RCC_OscConfig+0x280>)
 800291c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002920:	6013      	str	r3, [r2, #0]
 8002922:	e00b      	b.n	800293c <HAL_RCC_OscConfig+0xd8>
 8002924:	4b6f      	ldr	r3, [pc, #444]	; (8002ae4 <HAL_RCC_OscConfig+0x280>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a6e      	ldr	r2, [pc, #440]	; (8002ae4 <HAL_RCC_OscConfig+0x280>)
 800292a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800292e:	6013      	str	r3, [r2, #0]
 8002930:	4b6c      	ldr	r3, [pc, #432]	; (8002ae4 <HAL_RCC_OscConfig+0x280>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a6b      	ldr	r2, [pc, #428]	; (8002ae4 <HAL_RCC_OscConfig+0x280>)
 8002936:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800293a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d013      	beq.n	800296c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002944:	f7fe fdd0 	bl	80014e8 <HAL_GetTick>
 8002948:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800294a:	e008      	b.n	800295e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800294c:	f7fe fdcc 	bl	80014e8 <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	2b64      	cmp	r3, #100	; 0x64
 8002958:	d901      	bls.n	800295e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e21f      	b.n	8002d9e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800295e:	4b61      	ldr	r3, [pc, #388]	; (8002ae4 <HAL_RCC_OscConfig+0x280>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d0f0      	beq.n	800294c <HAL_RCC_OscConfig+0xe8>
 800296a:	e014      	b.n	8002996 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800296c:	f7fe fdbc 	bl	80014e8 <HAL_GetTick>
 8002970:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002972:	e008      	b.n	8002986 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002974:	f7fe fdb8 	bl	80014e8 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	2b64      	cmp	r3, #100	; 0x64
 8002980:	d901      	bls.n	8002986 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e20b      	b.n	8002d9e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002986:	4b57      	ldr	r3, [pc, #348]	; (8002ae4 <HAL_RCC_OscConfig+0x280>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d1f0      	bne.n	8002974 <HAL_RCC_OscConfig+0x110>
 8002992:	e000      	b.n	8002996 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002994:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d069      	beq.n	8002a76 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029a2:	4b50      	ldr	r3, [pc, #320]	; (8002ae4 <HAL_RCC_OscConfig+0x280>)
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f003 030c 	and.w	r3, r3, #12
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d00b      	beq.n	80029c6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029ae:	4b4d      	ldr	r3, [pc, #308]	; (8002ae4 <HAL_RCC_OscConfig+0x280>)
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f003 030c 	and.w	r3, r3, #12
 80029b6:	2b08      	cmp	r3, #8
 80029b8:	d11c      	bne.n	80029f4 <HAL_RCC_OscConfig+0x190>
 80029ba:	4b4a      	ldr	r3, [pc, #296]	; (8002ae4 <HAL_RCC_OscConfig+0x280>)
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d116      	bne.n	80029f4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029c6:	4b47      	ldr	r3, [pc, #284]	; (8002ae4 <HAL_RCC_OscConfig+0x280>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d005      	beq.n	80029de <HAL_RCC_OscConfig+0x17a>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d001      	beq.n	80029de <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e1df      	b.n	8002d9e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029de:	4b41      	ldr	r3, [pc, #260]	; (8002ae4 <HAL_RCC_OscConfig+0x280>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	691b      	ldr	r3, [r3, #16]
 80029ea:	00db      	lsls	r3, r3, #3
 80029ec:	493d      	ldr	r1, [pc, #244]	; (8002ae4 <HAL_RCC_OscConfig+0x280>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029f2:	e040      	b.n	8002a76 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d023      	beq.n	8002a44 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029fc:	4b39      	ldr	r3, [pc, #228]	; (8002ae4 <HAL_RCC_OscConfig+0x280>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a38      	ldr	r2, [pc, #224]	; (8002ae4 <HAL_RCC_OscConfig+0x280>)
 8002a02:	f043 0301 	orr.w	r3, r3, #1
 8002a06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a08:	f7fe fd6e 	bl	80014e8 <HAL_GetTick>
 8002a0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a0e:	e008      	b.n	8002a22 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a10:	f7fe fd6a 	bl	80014e8 <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d901      	bls.n	8002a22 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e1bd      	b.n	8002d9e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a22:	4b30      	ldr	r3, [pc, #192]	; (8002ae4 <HAL_RCC_OscConfig+0x280>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0302 	and.w	r3, r3, #2
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d0f0      	beq.n	8002a10 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a2e:	4b2d      	ldr	r3, [pc, #180]	; (8002ae4 <HAL_RCC_OscConfig+0x280>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	00db      	lsls	r3, r3, #3
 8002a3c:	4929      	ldr	r1, [pc, #164]	; (8002ae4 <HAL_RCC_OscConfig+0x280>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	600b      	str	r3, [r1, #0]
 8002a42:	e018      	b.n	8002a76 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a44:	4b27      	ldr	r3, [pc, #156]	; (8002ae4 <HAL_RCC_OscConfig+0x280>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a26      	ldr	r2, [pc, #152]	; (8002ae4 <HAL_RCC_OscConfig+0x280>)
 8002a4a:	f023 0301 	bic.w	r3, r3, #1
 8002a4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a50:	f7fe fd4a 	bl	80014e8 <HAL_GetTick>
 8002a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a56:	e008      	b.n	8002a6a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a58:	f7fe fd46 	bl	80014e8 <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d901      	bls.n	8002a6a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e199      	b.n	8002d9e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a6a:	4b1e      	ldr	r3, [pc, #120]	; (8002ae4 <HAL_RCC_OscConfig+0x280>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0302 	and.w	r3, r3, #2
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d1f0      	bne.n	8002a58 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0308 	and.w	r3, r3, #8
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d038      	beq.n	8002af4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	695b      	ldr	r3, [r3, #20]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d019      	beq.n	8002abe <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a8a:	4b16      	ldr	r3, [pc, #88]	; (8002ae4 <HAL_RCC_OscConfig+0x280>)
 8002a8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a8e:	4a15      	ldr	r2, [pc, #84]	; (8002ae4 <HAL_RCC_OscConfig+0x280>)
 8002a90:	f043 0301 	orr.w	r3, r3, #1
 8002a94:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a96:	f7fe fd27 	bl	80014e8 <HAL_GetTick>
 8002a9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a9c:	e008      	b.n	8002ab0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a9e:	f7fe fd23 	bl	80014e8 <HAL_GetTick>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d901      	bls.n	8002ab0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002aac:	2303      	movs	r3, #3
 8002aae:	e176      	b.n	8002d9e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ab0:	4b0c      	ldr	r3, [pc, #48]	; (8002ae4 <HAL_RCC_OscConfig+0x280>)
 8002ab2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ab4:	f003 0302 	and.w	r3, r3, #2
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d0f0      	beq.n	8002a9e <HAL_RCC_OscConfig+0x23a>
 8002abc:	e01a      	b.n	8002af4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002abe:	4b09      	ldr	r3, [pc, #36]	; (8002ae4 <HAL_RCC_OscConfig+0x280>)
 8002ac0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ac2:	4a08      	ldr	r2, [pc, #32]	; (8002ae4 <HAL_RCC_OscConfig+0x280>)
 8002ac4:	f023 0301 	bic.w	r3, r3, #1
 8002ac8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aca:	f7fe fd0d 	bl	80014e8 <HAL_GetTick>
 8002ace:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ad0:	e00a      	b.n	8002ae8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ad2:	f7fe fd09 	bl	80014e8 <HAL_GetTick>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d903      	bls.n	8002ae8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	e15c      	b.n	8002d9e <HAL_RCC_OscConfig+0x53a>
 8002ae4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ae8:	4b91      	ldr	r3, [pc, #580]	; (8002d30 <HAL_RCC_OscConfig+0x4cc>)
 8002aea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aec:	f003 0302 	and.w	r3, r3, #2
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d1ee      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0304 	and.w	r3, r3, #4
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	f000 80a4 	beq.w	8002c4a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b02:	4b8b      	ldr	r3, [pc, #556]	; (8002d30 <HAL_RCC_OscConfig+0x4cc>)
 8002b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d10d      	bne.n	8002b2a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b0e:	4b88      	ldr	r3, [pc, #544]	; (8002d30 <HAL_RCC_OscConfig+0x4cc>)
 8002b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b12:	4a87      	ldr	r2, [pc, #540]	; (8002d30 <HAL_RCC_OscConfig+0x4cc>)
 8002b14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b18:	6413      	str	r3, [r2, #64]	; 0x40
 8002b1a:	4b85      	ldr	r3, [pc, #532]	; (8002d30 <HAL_RCC_OscConfig+0x4cc>)
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b22:	60bb      	str	r3, [r7, #8]
 8002b24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b26:	2301      	movs	r3, #1
 8002b28:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b2a:	4b82      	ldr	r3, [pc, #520]	; (8002d34 <HAL_RCC_OscConfig+0x4d0>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d118      	bne.n	8002b68 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002b36:	4b7f      	ldr	r3, [pc, #508]	; (8002d34 <HAL_RCC_OscConfig+0x4d0>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a7e      	ldr	r2, [pc, #504]	; (8002d34 <HAL_RCC_OscConfig+0x4d0>)
 8002b3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b42:	f7fe fcd1 	bl	80014e8 <HAL_GetTick>
 8002b46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b48:	e008      	b.n	8002b5c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b4a:	f7fe fccd 	bl	80014e8 <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	2b64      	cmp	r3, #100	; 0x64
 8002b56:	d901      	bls.n	8002b5c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e120      	b.n	8002d9e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b5c:	4b75      	ldr	r3, [pc, #468]	; (8002d34 <HAL_RCC_OscConfig+0x4d0>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d0f0      	beq.n	8002b4a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d106      	bne.n	8002b7e <HAL_RCC_OscConfig+0x31a>
 8002b70:	4b6f      	ldr	r3, [pc, #444]	; (8002d30 <HAL_RCC_OscConfig+0x4cc>)
 8002b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b74:	4a6e      	ldr	r2, [pc, #440]	; (8002d30 <HAL_RCC_OscConfig+0x4cc>)
 8002b76:	f043 0301 	orr.w	r3, r3, #1
 8002b7a:	6713      	str	r3, [r2, #112]	; 0x70
 8002b7c:	e02d      	b.n	8002bda <HAL_RCC_OscConfig+0x376>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d10c      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x33c>
 8002b86:	4b6a      	ldr	r3, [pc, #424]	; (8002d30 <HAL_RCC_OscConfig+0x4cc>)
 8002b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b8a:	4a69      	ldr	r2, [pc, #420]	; (8002d30 <HAL_RCC_OscConfig+0x4cc>)
 8002b8c:	f023 0301 	bic.w	r3, r3, #1
 8002b90:	6713      	str	r3, [r2, #112]	; 0x70
 8002b92:	4b67      	ldr	r3, [pc, #412]	; (8002d30 <HAL_RCC_OscConfig+0x4cc>)
 8002b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b96:	4a66      	ldr	r2, [pc, #408]	; (8002d30 <HAL_RCC_OscConfig+0x4cc>)
 8002b98:	f023 0304 	bic.w	r3, r3, #4
 8002b9c:	6713      	str	r3, [r2, #112]	; 0x70
 8002b9e:	e01c      	b.n	8002bda <HAL_RCC_OscConfig+0x376>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	2b05      	cmp	r3, #5
 8002ba6:	d10c      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x35e>
 8002ba8:	4b61      	ldr	r3, [pc, #388]	; (8002d30 <HAL_RCC_OscConfig+0x4cc>)
 8002baa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bac:	4a60      	ldr	r2, [pc, #384]	; (8002d30 <HAL_RCC_OscConfig+0x4cc>)
 8002bae:	f043 0304 	orr.w	r3, r3, #4
 8002bb2:	6713      	str	r3, [r2, #112]	; 0x70
 8002bb4:	4b5e      	ldr	r3, [pc, #376]	; (8002d30 <HAL_RCC_OscConfig+0x4cc>)
 8002bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bb8:	4a5d      	ldr	r2, [pc, #372]	; (8002d30 <HAL_RCC_OscConfig+0x4cc>)
 8002bba:	f043 0301 	orr.w	r3, r3, #1
 8002bbe:	6713      	str	r3, [r2, #112]	; 0x70
 8002bc0:	e00b      	b.n	8002bda <HAL_RCC_OscConfig+0x376>
 8002bc2:	4b5b      	ldr	r3, [pc, #364]	; (8002d30 <HAL_RCC_OscConfig+0x4cc>)
 8002bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc6:	4a5a      	ldr	r2, [pc, #360]	; (8002d30 <HAL_RCC_OscConfig+0x4cc>)
 8002bc8:	f023 0301 	bic.w	r3, r3, #1
 8002bcc:	6713      	str	r3, [r2, #112]	; 0x70
 8002bce:	4b58      	ldr	r3, [pc, #352]	; (8002d30 <HAL_RCC_OscConfig+0x4cc>)
 8002bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd2:	4a57      	ldr	r2, [pc, #348]	; (8002d30 <HAL_RCC_OscConfig+0x4cc>)
 8002bd4:	f023 0304 	bic.w	r3, r3, #4
 8002bd8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d015      	beq.n	8002c0e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002be2:	f7fe fc81 	bl	80014e8 <HAL_GetTick>
 8002be6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002be8:	e00a      	b.n	8002c00 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bea:	f7fe fc7d 	bl	80014e8 <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d901      	bls.n	8002c00 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e0ce      	b.n	8002d9e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c00:	4b4b      	ldr	r3, [pc, #300]	; (8002d30 <HAL_RCC_OscConfig+0x4cc>)
 8002c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c04:	f003 0302 	and.w	r3, r3, #2
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d0ee      	beq.n	8002bea <HAL_RCC_OscConfig+0x386>
 8002c0c:	e014      	b.n	8002c38 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c0e:	f7fe fc6b 	bl	80014e8 <HAL_GetTick>
 8002c12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c14:	e00a      	b.n	8002c2c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c16:	f7fe fc67 	bl	80014e8 <HAL_GetTick>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d901      	bls.n	8002c2c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	e0b8      	b.n	8002d9e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c2c:	4b40      	ldr	r3, [pc, #256]	; (8002d30 <HAL_RCC_OscConfig+0x4cc>)
 8002c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c30:	f003 0302 	and.w	r3, r3, #2
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d1ee      	bne.n	8002c16 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002c38:	7dfb      	ldrb	r3, [r7, #23]
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d105      	bne.n	8002c4a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c3e:	4b3c      	ldr	r3, [pc, #240]	; (8002d30 <HAL_RCC_OscConfig+0x4cc>)
 8002c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c42:	4a3b      	ldr	r2, [pc, #236]	; (8002d30 <HAL_RCC_OscConfig+0x4cc>)
 8002c44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c48:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	699b      	ldr	r3, [r3, #24]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	f000 80a4 	beq.w	8002d9c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c54:	4b36      	ldr	r3, [pc, #216]	; (8002d30 <HAL_RCC_OscConfig+0x4cc>)
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	f003 030c 	and.w	r3, r3, #12
 8002c5c:	2b08      	cmp	r3, #8
 8002c5e:	d06b      	beq.n	8002d38 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	699b      	ldr	r3, [r3, #24]
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	d149      	bne.n	8002cfc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c68:	4b31      	ldr	r3, [pc, #196]	; (8002d30 <HAL_RCC_OscConfig+0x4cc>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a30      	ldr	r2, [pc, #192]	; (8002d30 <HAL_RCC_OscConfig+0x4cc>)
 8002c6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c74:	f7fe fc38 	bl	80014e8 <HAL_GetTick>
 8002c78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c7a:	e008      	b.n	8002c8e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c7c:	f7fe fc34 	bl	80014e8 <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d901      	bls.n	8002c8e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e087      	b.n	8002d9e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c8e:	4b28      	ldr	r3, [pc, #160]	; (8002d30 <HAL_RCC_OscConfig+0x4cc>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d1f0      	bne.n	8002c7c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	69da      	ldr	r2, [r3, #28]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a1b      	ldr	r3, [r3, #32]
 8002ca2:	431a      	orrs	r2, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca8:	019b      	lsls	r3, r3, #6
 8002caa:	431a      	orrs	r2, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb0:	085b      	lsrs	r3, r3, #1
 8002cb2:	3b01      	subs	r3, #1
 8002cb4:	041b      	lsls	r3, r3, #16
 8002cb6:	431a      	orrs	r2, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cbc:	061b      	lsls	r3, r3, #24
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	4a1b      	ldr	r2, [pc, #108]	; (8002d30 <HAL_RCC_OscConfig+0x4cc>)
 8002cc2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002cc6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cc8:	4b19      	ldr	r3, [pc, #100]	; (8002d30 <HAL_RCC_OscConfig+0x4cc>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a18      	ldr	r2, [pc, #96]	; (8002d30 <HAL_RCC_OscConfig+0x4cc>)
 8002cce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd4:	f7fe fc08 	bl	80014e8 <HAL_GetTick>
 8002cd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cda:	e008      	b.n	8002cee <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cdc:	f7fe fc04 	bl	80014e8 <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d901      	bls.n	8002cee <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e057      	b.n	8002d9e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cee:	4b10      	ldr	r3, [pc, #64]	; (8002d30 <HAL_RCC_OscConfig+0x4cc>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d0f0      	beq.n	8002cdc <HAL_RCC_OscConfig+0x478>
 8002cfa:	e04f      	b.n	8002d9c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cfc:	4b0c      	ldr	r3, [pc, #48]	; (8002d30 <HAL_RCC_OscConfig+0x4cc>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a0b      	ldr	r2, [pc, #44]	; (8002d30 <HAL_RCC_OscConfig+0x4cc>)
 8002d02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d08:	f7fe fbee 	bl	80014e8 <HAL_GetTick>
 8002d0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d0e:	e008      	b.n	8002d22 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d10:	f7fe fbea 	bl	80014e8 <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d901      	bls.n	8002d22 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e03d      	b.n	8002d9e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d22:	4b03      	ldr	r3, [pc, #12]	; (8002d30 <HAL_RCC_OscConfig+0x4cc>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d1f0      	bne.n	8002d10 <HAL_RCC_OscConfig+0x4ac>
 8002d2e:	e035      	b.n	8002d9c <HAL_RCC_OscConfig+0x538>
 8002d30:	40023800 	.word	0x40023800
 8002d34:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002d38:	4b1b      	ldr	r3, [pc, #108]	; (8002da8 <HAL_RCC_OscConfig+0x544>)
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	699b      	ldr	r3, [r3, #24]
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d028      	beq.n	8002d98 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d121      	bne.n	8002d98 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d11a      	bne.n	8002d98 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d62:	68fa      	ldr	r2, [r7, #12]
 8002d64:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d68:	4013      	ands	r3, r2
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d6e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d111      	bne.n	8002d98 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d7e:	085b      	lsrs	r3, r3, #1
 8002d80:	3b01      	subs	r3, #1
 8002d82:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d107      	bne.n	8002d98 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d92:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d001      	beq.n	8002d9c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e000      	b.n	8002d9e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3718      	adds	r7, #24
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	40023800 	.word	0x40023800

08002dac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002db6:	2300      	movs	r3, #0
 8002db8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d101      	bne.n	8002dc4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e0d0      	b.n	8002f66 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002dc4:	4b6a      	ldr	r3, [pc, #424]	; (8002f70 <HAL_RCC_ClockConfig+0x1c4>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 030f 	and.w	r3, r3, #15
 8002dcc:	683a      	ldr	r2, [r7, #0]
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d910      	bls.n	8002df4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dd2:	4b67      	ldr	r3, [pc, #412]	; (8002f70 <HAL_RCC_ClockConfig+0x1c4>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f023 020f 	bic.w	r2, r3, #15
 8002dda:	4965      	ldr	r1, [pc, #404]	; (8002f70 <HAL_RCC_ClockConfig+0x1c4>)
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002de2:	4b63      	ldr	r3, [pc, #396]	; (8002f70 <HAL_RCC_ClockConfig+0x1c4>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 030f 	and.w	r3, r3, #15
 8002dea:	683a      	ldr	r2, [r7, #0]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d001      	beq.n	8002df4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e0b8      	b.n	8002f66 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0302 	and.w	r3, r3, #2
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d020      	beq.n	8002e42 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0304 	and.w	r3, r3, #4
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d005      	beq.n	8002e18 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e0c:	4b59      	ldr	r3, [pc, #356]	; (8002f74 <HAL_RCC_ClockConfig+0x1c8>)
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	4a58      	ldr	r2, [pc, #352]	; (8002f74 <HAL_RCC_ClockConfig+0x1c8>)
 8002e12:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e16:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0308 	and.w	r3, r3, #8
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d005      	beq.n	8002e30 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e24:	4b53      	ldr	r3, [pc, #332]	; (8002f74 <HAL_RCC_ClockConfig+0x1c8>)
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	4a52      	ldr	r2, [pc, #328]	; (8002f74 <HAL_RCC_ClockConfig+0x1c8>)
 8002e2a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e2e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e30:	4b50      	ldr	r3, [pc, #320]	; (8002f74 <HAL_RCC_ClockConfig+0x1c8>)
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	494d      	ldr	r1, [pc, #308]	; (8002f74 <HAL_RCC_ClockConfig+0x1c8>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0301 	and.w	r3, r3, #1
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d040      	beq.n	8002ed0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d107      	bne.n	8002e66 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e56:	4b47      	ldr	r3, [pc, #284]	; (8002f74 <HAL_RCC_ClockConfig+0x1c8>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d115      	bne.n	8002e8e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e07f      	b.n	8002f66 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d107      	bne.n	8002e7e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e6e:	4b41      	ldr	r3, [pc, #260]	; (8002f74 <HAL_RCC_ClockConfig+0x1c8>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d109      	bne.n	8002e8e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e073      	b.n	8002f66 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e7e:	4b3d      	ldr	r3, [pc, #244]	; (8002f74 <HAL_RCC_ClockConfig+0x1c8>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d101      	bne.n	8002e8e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e06b      	b.n	8002f66 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e8e:	4b39      	ldr	r3, [pc, #228]	; (8002f74 <HAL_RCC_ClockConfig+0x1c8>)
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	f023 0203 	bic.w	r2, r3, #3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	4936      	ldr	r1, [pc, #216]	; (8002f74 <HAL_RCC_ClockConfig+0x1c8>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ea0:	f7fe fb22 	bl	80014e8 <HAL_GetTick>
 8002ea4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ea6:	e00a      	b.n	8002ebe <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ea8:	f7fe fb1e 	bl	80014e8 <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d901      	bls.n	8002ebe <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e053      	b.n	8002f66 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ebe:	4b2d      	ldr	r3, [pc, #180]	; (8002f74 <HAL_RCC_ClockConfig+0x1c8>)
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	f003 020c 	and.w	r2, r3, #12
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d1eb      	bne.n	8002ea8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ed0:	4b27      	ldr	r3, [pc, #156]	; (8002f70 <HAL_RCC_ClockConfig+0x1c4>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 030f 	and.w	r3, r3, #15
 8002ed8:	683a      	ldr	r2, [r7, #0]
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d210      	bcs.n	8002f00 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ede:	4b24      	ldr	r3, [pc, #144]	; (8002f70 <HAL_RCC_ClockConfig+0x1c4>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f023 020f 	bic.w	r2, r3, #15
 8002ee6:	4922      	ldr	r1, [pc, #136]	; (8002f70 <HAL_RCC_ClockConfig+0x1c4>)
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eee:	4b20      	ldr	r3, [pc, #128]	; (8002f70 <HAL_RCC_ClockConfig+0x1c4>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 030f 	and.w	r3, r3, #15
 8002ef6:	683a      	ldr	r2, [r7, #0]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d001      	beq.n	8002f00 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e032      	b.n	8002f66 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0304 	and.w	r3, r3, #4
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d008      	beq.n	8002f1e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f0c:	4b19      	ldr	r3, [pc, #100]	; (8002f74 <HAL_RCC_ClockConfig+0x1c8>)
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	4916      	ldr	r1, [pc, #88]	; (8002f74 <HAL_RCC_ClockConfig+0x1c8>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0308 	and.w	r3, r3, #8
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d009      	beq.n	8002f3e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f2a:	4b12      	ldr	r3, [pc, #72]	; (8002f74 <HAL_RCC_ClockConfig+0x1c8>)
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	691b      	ldr	r3, [r3, #16]
 8002f36:	00db      	lsls	r3, r3, #3
 8002f38:	490e      	ldr	r1, [pc, #56]	; (8002f74 <HAL_RCC_ClockConfig+0x1c8>)
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f3e:	f000 f821 	bl	8002f84 <HAL_RCC_GetSysClockFreq>
 8002f42:	4602      	mov	r2, r0
 8002f44:	4b0b      	ldr	r3, [pc, #44]	; (8002f74 <HAL_RCC_ClockConfig+0x1c8>)
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	091b      	lsrs	r3, r3, #4
 8002f4a:	f003 030f 	and.w	r3, r3, #15
 8002f4e:	490a      	ldr	r1, [pc, #40]	; (8002f78 <HAL_RCC_ClockConfig+0x1cc>)
 8002f50:	5ccb      	ldrb	r3, [r1, r3]
 8002f52:	fa22 f303 	lsr.w	r3, r2, r3
 8002f56:	4a09      	ldr	r2, [pc, #36]	; (8002f7c <HAL_RCC_ClockConfig+0x1d0>)
 8002f58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f5a:	4b09      	ldr	r3, [pc, #36]	; (8002f80 <HAL_RCC_ClockConfig+0x1d4>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f7fe fa7e 	bl	8001460 <HAL_InitTick>

  return HAL_OK;
 8002f64:	2300      	movs	r3, #0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3710      	adds	r7, #16
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	40023c00 	.word	0x40023c00
 8002f74:	40023800 	.word	0x40023800
 8002f78:	08006e98 	.word	0x08006e98
 8002f7c:	20000000 	.word	0x20000000
 8002f80:	20000004 	.word	0x20000004

08002f84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f88:	b094      	sub	sp, #80	; 0x50
 8002f8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	647b      	str	r3, [r7, #68]	; 0x44
 8002f90:	2300      	movs	r3, #0
 8002f92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f94:	2300      	movs	r3, #0
 8002f96:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f9c:	4b79      	ldr	r3, [pc, #484]	; (8003184 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	f003 030c 	and.w	r3, r3, #12
 8002fa4:	2b08      	cmp	r3, #8
 8002fa6:	d00d      	beq.n	8002fc4 <HAL_RCC_GetSysClockFreq+0x40>
 8002fa8:	2b08      	cmp	r3, #8
 8002faa:	f200 80e1 	bhi.w	8003170 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d002      	beq.n	8002fb8 <HAL_RCC_GetSysClockFreq+0x34>
 8002fb2:	2b04      	cmp	r3, #4
 8002fb4:	d003      	beq.n	8002fbe <HAL_RCC_GetSysClockFreq+0x3a>
 8002fb6:	e0db      	b.n	8003170 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002fb8:	4b73      	ldr	r3, [pc, #460]	; (8003188 <HAL_RCC_GetSysClockFreq+0x204>)
 8002fba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002fbc:	e0db      	b.n	8003176 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002fbe:	4b73      	ldr	r3, [pc, #460]	; (800318c <HAL_RCC_GetSysClockFreq+0x208>)
 8002fc0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002fc2:	e0d8      	b.n	8003176 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fc4:	4b6f      	ldr	r3, [pc, #444]	; (8003184 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fcc:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002fce:	4b6d      	ldr	r3, [pc, #436]	; (8003184 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d063      	beq.n	80030a2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fda:	4b6a      	ldr	r3, [pc, #424]	; (8003184 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	099b      	lsrs	r3, r3, #6
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fe4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fe8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fec:	633b      	str	r3, [r7, #48]	; 0x30
 8002fee:	2300      	movs	r3, #0
 8002ff0:	637b      	str	r3, [r7, #52]	; 0x34
 8002ff2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002ff6:	4622      	mov	r2, r4
 8002ff8:	462b      	mov	r3, r5
 8002ffa:	f04f 0000 	mov.w	r0, #0
 8002ffe:	f04f 0100 	mov.w	r1, #0
 8003002:	0159      	lsls	r1, r3, #5
 8003004:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003008:	0150      	lsls	r0, r2, #5
 800300a:	4602      	mov	r2, r0
 800300c:	460b      	mov	r3, r1
 800300e:	4621      	mov	r1, r4
 8003010:	1a51      	subs	r1, r2, r1
 8003012:	6139      	str	r1, [r7, #16]
 8003014:	4629      	mov	r1, r5
 8003016:	eb63 0301 	sbc.w	r3, r3, r1
 800301a:	617b      	str	r3, [r7, #20]
 800301c:	f04f 0200 	mov.w	r2, #0
 8003020:	f04f 0300 	mov.w	r3, #0
 8003024:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003028:	4659      	mov	r1, fp
 800302a:	018b      	lsls	r3, r1, #6
 800302c:	4651      	mov	r1, sl
 800302e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003032:	4651      	mov	r1, sl
 8003034:	018a      	lsls	r2, r1, #6
 8003036:	4651      	mov	r1, sl
 8003038:	ebb2 0801 	subs.w	r8, r2, r1
 800303c:	4659      	mov	r1, fp
 800303e:	eb63 0901 	sbc.w	r9, r3, r1
 8003042:	f04f 0200 	mov.w	r2, #0
 8003046:	f04f 0300 	mov.w	r3, #0
 800304a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800304e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003052:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003056:	4690      	mov	r8, r2
 8003058:	4699      	mov	r9, r3
 800305a:	4623      	mov	r3, r4
 800305c:	eb18 0303 	adds.w	r3, r8, r3
 8003060:	60bb      	str	r3, [r7, #8]
 8003062:	462b      	mov	r3, r5
 8003064:	eb49 0303 	adc.w	r3, r9, r3
 8003068:	60fb      	str	r3, [r7, #12]
 800306a:	f04f 0200 	mov.w	r2, #0
 800306e:	f04f 0300 	mov.w	r3, #0
 8003072:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003076:	4629      	mov	r1, r5
 8003078:	024b      	lsls	r3, r1, #9
 800307a:	4621      	mov	r1, r4
 800307c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003080:	4621      	mov	r1, r4
 8003082:	024a      	lsls	r2, r1, #9
 8003084:	4610      	mov	r0, r2
 8003086:	4619      	mov	r1, r3
 8003088:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800308a:	2200      	movs	r2, #0
 800308c:	62bb      	str	r3, [r7, #40]	; 0x28
 800308e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003090:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003094:	f7fd f914 	bl	80002c0 <__aeabi_uldivmod>
 8003098:	4602      	mov	r2, r0
 800309a:	460b      	mov	r3, r1
 800309c:	4613      	mov	r3, r2
 800309e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030a0:	e058      	b.n	8003154 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030a2:	4b38      	ldr	r3, [pc, #224]	; (8003184 <HAL_RCC_GetSysClockFreq+0x200>)
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	099b      	lsrs	r3, r3, #6
 80030a8:	2200      	movs	r2, #0
 80030aa:	4618      	mov	r0, r3
 80030ac:	4611      	mov	r1, r2
 80030ae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80030b2:	623b      	str	r3, [r7, #32]
 80030b4:	2300      	movs	r3, #0
 80030b6:	627b      	str	r3, [r7, #36]	; 0x24
 80030b8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80030bc:	4642      	mov	r2, r8
 80030be:	464b      	mov	r3, r9
 80030c0:	f04f 0000 	mov.w	r0, #0
 80030c4:	f04f 0100 	mov.w	r1, #0
 80030c8:	0159      	lsls	r1, r3, #5
 80030ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030ce:	0150      	lsls	r0, r2, #5
 80030d0:	4602      	mov	r2, r0
 80030d2:	460b      	mov	r3, r1
 80030d4:	4641      	mov	r1, r8
 80030d6:	ebb2 0a01 	subs.w	sl, r2, r1
 80030da:	4649      	mov	r1, r9
 80030dc:	eb63 0b01 	sbc.w	fp, r3, r1
 80030e0:	f04f 0200 	mov.w	r2, #0
 80030e4:	f04f 0300 	mov.w	r3, #0
 80030e8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80030ec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80030f0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80030f4:	ebb2 040a 	subs.w	r4, r2, sl
 80030f8:	eb63 050b 	sbc.w	r5, r3, fp
 80030fc:	f04f 0200 	mov.w	r2, #0
 8003100:	f04f 0300 	mov.w	r3, #0
 8003104:	00eb      	lsls	r3, r5, #3
 8003106:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800310a:	00e2      	lsls	r2, r4, #3
 800310c:	4614      	mov	r4, r2
 800310e:	461d      	mov	r5, r3
 8003110:	4643      	mov	r3, r8
 8003112:	18e3      	adds	r3, r4, r3
 8003114:	603b      	str	r3, [r7, #0]
 8003116:	464b      	mov	r3, r9
 8003118:	eb45 0303 	adc.w	r3, r5, r3
 800311c:	607b      	str	r3, [r7, #4]
 800311e:	f04f 0200 	mov.w	r2, #0
 8003122:	f04f 0300 	mov.w	r3, #0
 8003126:	e9d7 4500 	ldrd	r4, r5, [r7]
 800312a:	4629      	mov	r1, r5
 800312c:	028b      	lsls	r3, r1, #10
 800312e:	4621      	mov	r1, r4
 8003130:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003134:	4621      	mov	r1, r4
 8003136:	028a      	lsls	r2, r1, #10
 8003138:	4610      	mov	r0, r2
 800313a:	4619      	mov	r1, r3
 800313c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800313e:	2200      	movs	r2, #0
 8003140:	61bb      	str	r3, [r7, #24]
 8003142:	61fa      	str	r2, [r7, #28]
 8003144:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003148:	f7fd f8ba 	bl	80002c0 <__aeabi_uldivmod>
 800314c:	4602      	mov	r2, r0
 800314e:	460b      	mov	r3, r1
 8003150:	4613      	mov	r3, r2
 8003152:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003154:	4b0b      	ldr	r3, [pc, #44]	; (8003184 <HAL_RCC_GetSysClockFreq+0x200>)
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	0c1b      	lsrs	r3, r3, #16
 800315a:	f003 0303 	and.w	r3, r3, #3
 800315e:	3301      	adds	r3, #1
 8003160:	005b      	lsls	r3, r3, #1
 8003162:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003164:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003166:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003168:	fbb2 f3f3 	udiv	r3, r2, r3
 800316c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800316e:	e002      	b.n	8003176 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003170:	4b05      	ldr	r3, [pc, #20]	; (8003188 <HAL_RCC_GetSysClockFreq+0x204>)
 8003172:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003174:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003176:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003178:	4618      	mov	r0, r3
 800317a:	3750      	adds	r7, #80	; 0x50
 800317c:	46bd      	mov	sp, r7
 800317e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003182:	bf00      	nop
 8003184:	40023800 	.word	0x40023800
 8003188:	00f42400 	.word	0x00f42400
 800318c:	007a1200 	.word	0x007a1200

08003190 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003190:	b480      	push	{r7}
 8003192:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003194:	4b03      	ldr	r3, [pc, #12]	; (80031a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003196:	681b      	ldr	r3, [r3, #0]
}
 8003198:	4618      	mov	r0, r3
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	20000000 	.word	0x20000000

080031a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80031ac:	f7ff fff0 	bl	8003190 <HAL_RCC_GetHCLKFreq>
 80031b0:	4602      	mov	r2, r0
 80031b2:	4b05      	ldr	r3, [pc, #20]	; (80031c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	0a9b      	lsrs	r3, r3, #10
 80031b8:	f003 0307 	and.w	r3, r3, #7
 80031bc:	4903      	ldr	r1, [pc, #12]	; (80031cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80031be:	5ccb      	ldrb	r3, [r1, r3]
 80031c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	40023800 	.word	0x40023800
 80031cc:	08006ea8 	.word	0x08006ea8

080031d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80031d4:	f7ff ffdc 	bl	8003190 <HAL_RCC_GetHCLKFreq>
 80031d8:	4602      	mov	r2, r0
 80031da:	4b05      	ldr	r3, [pc, #20]	; (80031f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	0b5b      	lsrs	r3, r3, #13
 80031e0:	f003 0307 	and.w	r3, r3, #7
 80031e4:	4903      	ldr	r1, [pc, #12]	; (80031f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031e6:	5ccb      	ldrb	r3, [r1, r3]
 80031e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	40023800 	.word	0x40023800
 80031f4:	08006ea8 	.word	0x08006ea8

080031f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b088      	sub	sp, #32
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003200:	2300      	movs	r3, #0
 8003202:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003204:	2300      	movs	r3, #0
 8003206:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 8003208:	2300      	movs	r3, #0
 800320a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800320c:	2300      	movs	r3, #0
 800320e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0301 	and.w	r3, r3, #1
 8003218:	2b00      	cmp	r3, #0
 800321a:	d012      	beq.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800321c:	4b65      	ldr	r3, [pc, #404]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	4a64      	ldr	r2, [pc, #400]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003222:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003226:	6093      	str	r3, [r2, #8]
 8003228:	4b62      	ldr	r3, [pc, #392]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800322a:	689a      	ldr	r2, [r3, #8]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003230:	4960      	ldr	r1, [pc, #384]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003232:	4313      	orrs	r3, r2
 8003234:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800323a:	2b00      	cmp	r3, #0
 800323c:	d101      	bne.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 800323e:	2301      	movs	r3, #1
 8003240:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d017      	beq.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800324e:	4b59      	ldr	r3, [pc, #356]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003250:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003254:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800325c:	4955      	ldr	r1, [pc, #340]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800325e:	4313      	orrs	r3, r2
 8003260:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003268:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800326c:	d101      	bne.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 800326e:	2301      	movs	r3, #1
 8003270:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003276:	2b00      	cmp	r3, #0
 8003278:	d101      	bne.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 800327a:	2301      	movs	r3, #1
 800327c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d017      	beq.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800328a:	4b4a      	ldr	r3, [pc, #296]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800328c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003290:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003298:	4946      	ldr	r1, [pc, #280]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800329a:	4313      	orrs	r3, r2
 800329c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032a8:	d101      	bne.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 80032aa:	2301      	movs	r3, #1
 80032ac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d101      	bne.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 80032b6:	2301      	movs	r3, #1
 80032b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0320 	and.w	r3, r3, #32
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	f000 808b 	beq.w	80033de <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80032c8:	4b3a      	ldr	r3, [pc, #232]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80032ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032cc:	4a39      	ldr	r2, [pc, #228]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80032ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032d2:	6413      	str	r3, [r2, #64]	; 0x40
 80032d4:	4b37      	ldr	r3, [pc, #220]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80032d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032dc:	60fb      	str	r3, [r7, #12]
 80032de:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80032e0:	4b35      	ldr	r3, [pc, #212]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a34      	ldr	r2, [pc, #208]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80032e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032ec:	f7fe f8fc 	bl	80014e8 <HAL_GetTick>
 80032f0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80032f2:	e008      	b.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032f4:	f7fe f8f8 	bl	80014e8 <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	2b64      	cmp	r3, #100	; 0x64
 8003300:	d901      	bls.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e2bc      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003306:	4b2c      	ldr	r3, [pc, #176]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800330e:	2b00      	cmp	r3, #0
 8003310:	d0f0      	beq.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003312:	4b28      	ldr	r3, [pc, #160]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003316:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800331a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d035      	beq.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003326:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800332a:	693a      	ldr	r2, [r7, #16]
 800332c:	429a      	cmp	r2, r3
 800332e:	d02e      	beq.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003330:	4b20      	ldr	r3, [pc, #128]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003334:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003338:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800333a:	4b1e      	ldr	r3, [pc, #120]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800333c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800333e:	4a1d      	ldr	r2, [pc, #116]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003340:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003344:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003346:	4b1b      	ldr	r3, [pc, #108]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800334a:	4a1a      	ldr	r2, [pc, #104]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800334c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003350:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003352:	4a18      	ldr	r2, [pc, #96]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003358:	4b16      	ldr	r3, [pc, #88]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800335a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800335c:	f003 0301 	and.w	r3, r3, #1
 8003360:	2b01      	cmp	r3, #1
 8003362:	d114      	bne.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003364:	f7fe f8c0 	bl	80014e8 <HAL_GetTick>
 8003368:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800336a:	e00a      	b.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800336c:	f7fe f8bc 	bl	80014e8 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	f241 3288 	movw	r2, #5000	; 0x1388
 800337a:	4293      	cmp	r3, r2
 800337c:	d901      	bls.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e27e      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003382:	4b0c      	ldr	r3, [pc, #48]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003386:	f003 0302 	and.w	r3, r3, #2
 800338a:	2b00      	cmp	r3, #0
 800338c:	d0ee      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003392:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003396:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800339a:	d111      	bne.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 800339c:	4b05      	ldr	r3, [pc, #20]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80033a8:	4b04      	ldr	r3, [pc, #16]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80033aa:	400b      	ands	r3, r1
 80033ac:	4901      	ldr	r1, [pc, #4]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	608b      	str	r3, [r1, #8]
 80033b2:	e00b      	b.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80033b4:	40023800 	.word	0x40023800
 80033b8:	40007000 	.word	0x40007000
 80033bc:	0ffffcff 	.word	0x0ffffcff
 80033c0:	4ba4      	ldr	r3, [pc, #656]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	4aa3      	ldr	r2, [pc, #652]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80033c6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80033ca:	6093      	str	r3, [r2, #8]
 80033cc:	4ba1      	ldr	r3, [pc, #644]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80033ce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033d8:	499e      	ldr	r1, [pc, #632]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80033da:	4313      	orrs	r3, r2
 80033dc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0310 	and.w	r3, r3, #16
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d010      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80033ea:	4b9a      	ldr	r3, [pc, #616]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80033ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033f0:	4a98      	ldr	r2, [pc, #608]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80033f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033f6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80033fa:	4b96      	ldr	r3, [pc, #600]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80033fc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003404:	4993      	ldr	r1, [pc, #588]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003406:	4313      	orrs	r3, r2
 8003408:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003414:	2b00      	cmp	r3, #0
 8003416:	d00a      	beq.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003418:	4b8e      	ldr	r3, [pc, #568]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800341a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800341e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003426:	498b      	ldr	r1, [pc, #556]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003428:	4313      	orrs	r3, r2
 800342a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d00a      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800343a:	4b86      	ldr	r3, [pc, #536]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800343c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003440:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003448:	4982      	ldr	r1, [pc, #520]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800344a:	4313      	orrs	r3, r2
 800344c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003458:	2b00      	cmp	r3, #0
 800345a:	d00a      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800345c:	4b7d      	ldr	r3, [pc, #500]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800345e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003462:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800346a:	497a      	ldr	r1, [pc, #488]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800346c:	4313      	orrs	r3, r2
 800346e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800347a:	2b00      	cmp	r3, #0
 800347c:	d00a      	beq.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800347e:	4b75      	ldr	r3, [pc, #468]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003484:	f023 0203 	bic.w	r2, r3, #3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800348c:	4971      	ldr	r1, [pc, #452]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800348e:	4313      	orrs	r3, r2
 8003490:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800349c:	2b00      	cmp	r3, #0
 800349e:	d00a      	beq.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80034a0:	4b6c      	ldr	r3, [pc, #432]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80034a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034a6:	f023 020c 	bic.w	r2, r3, #12
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ae:	4969      	ldr	r1, [pc, #420]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80034b0:	4313      	orrs	r3, r2
 80034b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d00a      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80034c2:	4b64      	ldr	r3, [pc, #400]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80034c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034c8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034d0:	4960      	ldr	r1, [pc, #384]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80034d2:	4313      	orrs	r3, r2
 80034d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d00a      	beq.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80034e4:	4b5b      	ldr	r3, [pc, #364]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80034e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034f2:	4958      	ldr	r1, [pc, #352]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80034f4:	4313      	orrs	r3, r2
 80034f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003502:	2b00      	cmp	r3, #0
 8003504:	d00a      	beq.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003506:	4b53      	ldr	r3, [pc, #332]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003508:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800350c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003514:	494f      	ldr	r1, [pc, #316]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003516:	4313      	orrs	r3, r2
 8003518:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003524:	2b00      	cmp	r3, #0
 8003526:	d00a      	beq.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003528:	4b4a      	ldr	r3, [pc, #296]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800352a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800352e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003536:	4947      	ldr	r1, [pc, #284]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003538:	4313      	orrs	r3, r2
 800353a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d00a      	beq.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800354a:	4b42      	ldr	r3, [pc, #264]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800354c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003550:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003558:	493e      	ldr	r1, [pc, #248]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800355a:	4313      	orrs	r3, r2
 800355c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d00a      	beq.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800356c:	4b39      	ldr	r3, [pc, #228]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800356e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003572:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800357a:	4936      	ldr	r1, [pc, #216]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800357c:	4313      	orrs	r3, r2
 800357e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d011      	beq.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800358e:	4b31      	ldr	r3, [pc, #196]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003590:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003594:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800359c:	492d      	ldr	r1, [pc, #180]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800359e:	4313      	orrs	r3, r2
 80035a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035ac:	d101      	bne.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 80035ae:	2301      	movs	r3, #1
 80035b0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d00a      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80035be:	4b25      	ldr	r3, [pc, #148]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80035c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035c4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035cc:	4921      	ldr	r1, [pc, #132]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80035ce:	4313      	orrs	r3, r2
 80035d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d00a      	beq.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80035e0:	4b1c      	ldr	r3, [pc, #112]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80035e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035e6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035ee:	4919      	ldr	r1, [pc, #100]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80035f0:	4313      	orrs	r3, r2
 80035f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00a      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003602:	4b14      	ldr	r3, [pc, #80]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003604:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003608:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003610:	4910      	ldr	r1, [pc, #64]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003612:	4313      	orrs	r3, r2
 8003614:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	2b01      	cmp	r3, #1
 800361c:	d006      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x434>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003626:	2b00      	cmp	r3, #0
 8003628:	f000 809d 	beq.w	8003766 <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800362c:	4b09      	ldr	r3, [pc, #36]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a08      	ldr	r2, [pc, #32]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003632:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003636:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003638:	f7fd ff56 	bl	80014e8 <HAL_GetTick>
 800363c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800363e:	e00b      	b.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003640:	f7fd ff52 	bl	80014e8 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	2b64      	cmp	r3, #100	; 0x64
 800364c:	d904      	bls.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e116      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8003652:	bf00      	nop
 8003654:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003658:	4b8b      	ldr	r3, [pc, #556]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003660:	2b00      	cmp	r3, #0
 8003662:	d1ed      	bne.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0301 	and.w	r3, r3, #1
 800366c:	2b00      	cmp	r3, #0
 800366e:	d017      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003674:	2b00      	cmp	r3, #0
 8003676:	d113      	bne.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003678:	4b83      	ldr	r3, [pc, #524]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800367a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800367e:	0e1b      	lsrs	r3, r3, #24
 8003680:	f003 030f 	and.w	r3, r3, #15
 8003684:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	019a      	lsls	r2, r3, #6
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	061b      	lsls	r3, r3, #24
 8003690:	431a      	orrs	r2, r3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	071b      	lsls	r3, r3, #28
 8003698:	497b      	ldr	r1, [pc, #492]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800369a:	4313      	orrs	r3, r2
 800369c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d004      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x4be>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036b4:	d00a      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d024      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036ca:	d11f      	bne.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80036cc:	4b6e      	ldr	r3, [pc, #440]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80036ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036d2:	0f1b      	lsrs	r3, r3, #28
 80036d4:	f003 0307 	and.w	r3, r3, #7
 80036d8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	019a      	lsls	r2, r3, #6
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	061b      	lsls	r3, r3, #24
 80036e6:	431a      	orrs	r2, r3
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	071b      	lsls	r3, r3, #28
 80036ec:	4966      	ldr	r1, [pc, #408]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80036f4:	4b64      	ldr	r3, [pc, #400]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80036f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036fa:	f023 021f 	bic.w	r2, r3, #31
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	69db      	ldr	r3, [r3, #28]
 8003702:	3b01      	subs	r3, #1
 8003704:	4960      	ldr	r1, [pc, #384]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003706:	4313      	orrs	r3, r2
 8003708:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003714:	2b00      	cmp	r3, #0
 8003716:	d00d      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	019a      	lsls	r2, r3, #6
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	061b      	lsls	r3, r3, #24
 8003724:	431a      	orrs	r2, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	071b      	lsls	r3, r3, #28
 800372c:	4956      	ldr	r1, [pc, #344]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800372e:	4313      	orrs	r3, r2
 8003730:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003734:	4b54      	ldr	r3, [pc, #336]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a53      	ldr	r2, [pc, #332]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800373a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800373e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003740:	f7fd fed2 	bl	80014e8 <HAL_GetTick>
 8003744:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003746:	e008      	b.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003748:	f7fd fece 	bl	80014e8 <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	2b64      	cmp	r3, #100	; 0x64
 8003754:	d901      	bls.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e092      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800375a:	4b4b      	ldr	r3, [pc, #300]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d0f0      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	2b01      	cmp	r3, #1
 800376a:	f040 8088 	bne.w	800387e <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800376e:	4b46      	ldr	r3, [pc, #280]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a45      	ldr	r2, [pc, #276]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003774:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003778:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800377a:	f7fd feb5 	bl	80014e8 <HAL_GetTick>
 800377e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003780:	e008      	b.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003782:	f7fd feb1 	bl	80014e8 <HAL_GetTick>
 8003786:	4602      	mov	r2, r0
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	2b64      	cmp	r3, #100	; 0x64
 800378e:	d901      	bls.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003790:	2303      	movs	r3, #3
 8003792:	e075      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003794:	4b3c      	ldr	r3, [pc, #240]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800379c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037a0:	d0ef      	beq.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d003      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x5be>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d009      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d024      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d120      	bne.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80037ca:	4b2f      	ldr	r3, [pc, #188]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80037cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037d0:	0c1b      	lsrs	r3, r3, #16
 80037d2:	f003 0303 	and.w	r3, r3, #3
 80037d6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	691b      	ldr	r3, [r3, #16]
 80037dc:	019a      	lsls	r2, r3, #6
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	041b      	lsls	r3, r3, #16
 80037e2:	431a      	orrs	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	695b      	ldr	r3, [r3, #20]
 80037e8:	061b      	lsls	r3, r3, #24
 80037ea:	4927      	ldr	r1, [pc, #156]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80037ec:	4313      	orrs	r3, r2
 80037ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80037f2:	4b25      	ldr	r3, [pc, #148]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80037f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037f8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6a1b      	ldr	r3, [r3, #32]
 8003800:	3b01      	subs	r3, #1
 8003802:	021b      	lsls	r3, r3, #8
 8003804:	4920      	ldr	r1, [pc, #128]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003806:	4313      	orrs	r3, r2
 8003808:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d018      	beq.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x652>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800381c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003820:	d113      	bne.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003822:	4b19      	ldr	r3, [pc, #100]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003824:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003828:	0e1b      	lsrs	r3, r3, #24
 800382a:	f003 030f 	and.w	r3, r3, #15
 800382e:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	691b      	ldr	r3, [r3, #16]
 8003834:	019a      	lsls	r2, r3, #6
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	699b      	ldr	r3, [r3, #24]
 800383a:	041b      	lsls	r3, r3, #16
 800383c:	431a      	orrs	r2, r3
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	061b      	lsls	r3, r3, #24
 8003842:	4911      	ldr	r1, [pc, #68]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003844:	4313      	orrs	r3, r2
 8003846:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800384a:	4b0f      	ldr	r3, [pc, #60]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a0e      	ldr	r2, [pc, #56]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003854:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003856:	f7fd fe47 	bl	80014e8 <HAL_GetTick>
 800385a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800385c:	e008      	b.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800385e:	f7fd fe43 	bl	80014e8 <HAL_GetTick>
 8003862:	4602      	mov	r2, r0
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	2b64      	cmp	r3, #100	; 0x64
 800386a:	d901      	bls.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800386c:	2303      	movs	r3, #3
 800386e:	e007      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003870:	4b05      	ldr	r3, [pc, #20]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003878:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800387c:	d1ef      	bne.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 800387e:	2300      	movs	r3, #0
}
 8003880:	4618      	mov	r0, r3
 8003882:	3720      	adds	r7, #32
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}
 8003888:	40023800 	.word	0x40023800

0800388c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b082      	sub	sp, #8
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d101      	bne.n	800389e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e049      	b.n	8003932 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d106      	bne.n	80038b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f7fd faf0 	bl	8000e98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2202      	movs	r2, #2
 80038bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	3304      	adds	r3, #4
 80038c8:	4619      	mov	r1, r3
 80038ca:	4610      	mov	r0, r2
 80038cc:	f000 faa4 	bl	8003e18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2201      	movs	r2, #1
 80038d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2201      	movs	r2, #1
 80038fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2201      	movs	r2, #1
 800390c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003930:	2300      	movs	r3, #0
}
 8003932:	4618      	mov	r0, r3
 8003934:	3708      	adds	r7, #8
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}

0800393a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800393a:	b580      	push	{r7, lr}
 800393c:	b082      	sub	sp, #8
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d101      	bne.n	800394c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e049      	b.n	80039e0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003952:	b2db      	uxtb	r3, r3
 8003954:	2b00      	cmp	r3, #0
 8003956:	d106      	bne.n	8003966 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f000 f841 	bl	80039e8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2202      	movs	r2, #2
 800396a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	3304      	adds	r3, #4
 8003976:	4619      	mov	r1, r3
 8003978:	4610      	mov	r0, r2
 800397a:	f000 fa4d 	bl	8003e18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2201      	movs	r2, #1
 8003982:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2201      	movs	r2, #1
 800398a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2201      	movs	r2, #1
 8003992:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2201      	movs	r2, #1
 800399a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2201      	movs	r2, #1
 80039a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2201      	movs	r2, #1
 80039aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2201      	movs	r2, #1
 80039b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2201      	movs	r2, #1
 80039ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2201      	movs	r2, #1
 80039c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2201      	movs	r2, #1
 80039ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2201      	movs	r2, #1
 80039d2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2201      	movs	r2, #1
 80039da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039de:	2300      	movs	r3, #0
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3708      	adds	r7, #8
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80039f0:	bf00      	nop
 80039f2:	370c      	adds	r7, #12
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr

080039fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d109      	bne.n	8003a20 <HAL_TIM_PWM_Start+0x24>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	bf14      	ite	ne
 8003a18:	2301      	movne	r3, #1
 8003a1a:	2300      	moveq	r3, #0
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	e03c      	b.n	8003a9a <HAL_TIM_PWM_Start+0x9e>
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	2b04      	cmp	r3, #4
 8003a24:	d109      	bne.n	8003a3a <HAL_TIM_PWM_Start+0x3e>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	bf14      	ite	ne
 8003a32:	2301      	movne	r3, #1
 8003a34:	2300      	moveq	r3, #0
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	e02f      	b.n	8003a9a <HAL_TIM_PWM_Start+0x9e>
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	2b08      	cmp	r3, #8
 8003a3e:	d109      	bne.n	8003a54 <HAL_TIM_PWM_Start+0x58>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	bf14      	ite	ne
 8003a4c:	2301      	movne	r3, #1
 8003a4e:	2300      	moveq	r3, #0
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	e022      	b.n	8003a9a <HAL_TIM_PWM_Start+0x9e>
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	2b0c      	cmp	r3, #12
 8003a58:	d109      	bne.n	8003a6e <HAL_TIM_PWM_Start+0x72>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	bf14      	ite	ne
 8003a66:	2301      	movne	r3, #1
 8003a68:	2300      	moveq	r3, #0
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	e015      	b.n	8003a9a <HAL_TIM_PWM_Start+0x9e>
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	2b10      	cmp	r3, #16
 8003a72:	d109      	bne.n	8003a88 <HAL_TIM_PWM_Start+0x8c>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	bf14      	ite	ne
 8003a80:	2301      	movne	r3, #1
 8003a82:	2300      	moveq	r3, #0
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	e008      	b.n	8003a9a <HAL_TIM_PWM_Start+0x9e>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	bf14      	ite	ne
 8003a94:	2301      	movne	r3, #1
 8003a96:	2300      	moveq	r3, #0
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d001      	beq.n	8003aa2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e092      	b.n	8003bc8 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d104      	bne.n	8003ab2 <HAL_TIM_PWM_Start+0xb6>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2202      	movs	r2, #2
 8003aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ab0:	e023      	b.n	8003afa <HAL_TIM_PWM_Start+0xfe>
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	2b04      	cmp	r3, #4
 8003ab6:	d104      	bne.n	8003ac2 <HAL_TIM_PWM_Start+0xc6>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2202      	movs	r2, #2
 8003abc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ac0:	e01b      	b.n	8003afa <HAL_TIM_PWM_Start+0xfe>
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	2b08      	cmp	r3, #8
 8003ac6:	d104      	bne.n	8003ad2 <HAL_TIM_PWM_Start+0xd6>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2202      	movs	r2, #2
 8003acc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ad0:	e013      	b.n	8003afa <HAL_TIM_PWM_Start+0xfe>
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	2b0c      	cmp	r3, #12
 8003ad6:	d104      	bne.n	8003ae2 <HAL_TIM_PWM_Start+0xe6>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2202      	movs	r2, #2
 8003adc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ae0:	e00b      	b.n	8003afa <HAL_TIM_PWM_Start+0xfe>
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	2b10      	cmp	r3, #16
 8003ae6:	d104      	bne.n	8003af2 <HAL_TIM_PWM_Start+0xf6>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2202      	movs	r2, #2
 8003aec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003af0:	e003      	b.n	8003afa <HAL_TIM_PWM_Start+0xfe>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2202      	movs	r2, #2
 8003af6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	2201      	movs	r2, #1
 8003b00:	6839      	ldr	r1, [r7, #0]
 8003b02:	4618      	mov	r0, r3
 8003b04:	f000 fc86 	bl	8004414 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a30      	ldr	r2, [pc, #192]	; (8003bd0 <HAL_TIM_PWM_Start+0x1d4>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d004      	beq.n	8003b1c <HAL_TIM_PWM_Start+0x120>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a2f      	ldr	r2, [pc, #188]	; (8003bd4 <HAL_TIM_PWM_Start+0x1d8>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d101      	bne.n	8003b20 <HAL_TIM_PWM_Start+0x124>
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e000      	b.n	8003b22 <HAL_TIM_PWM_Start+0x126>
 8003b20:	2300      	movs	r3, #0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d007      	beq.n	8003b36 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b34:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a25      	ldr	r2, [pc, #148]	; (8003bd0 <HAL_TIM_PWM_Start+0x1d4>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d022      	beq.n	8003b86 <HAL_TIM_PWM_Start+0x18a>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b48:	d01d      	beq.n	8003b86 <HAL_TIM_PWM_Start+0x18a>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a22      	ldr	r2, [pc, #136]	; (8003bd8 <HAL_TIM_PWM_Start+0x1dc>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d018      	beq.n	8003b86 <HAL_TIM_PWM_Start+0x18a>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a20      	ldr	r2, [pc, #128]	; (8003bdc <HAL_TIM_PWM_Start+0x1e0>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d013      	beq.n	8003b86 <HAL_TIM_PWM_Start+0x18a>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a1f      	ldr	r2, [pc, #124]	; (8003be0 <HAL_TIM_PWM_Start+0x1e4>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d00e      	beq.n	8003b86 <HAL_TIM_PWM_Start+0x18a>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a19      	ldr	r2, [pc, #100]	; (8003bd4 <HAL_TIM_PWM_Start+0x1d8>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d009      	beq.n	8003b86 <HAL_TIM_PWM_Start+0x18a>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a1b      	ldr	r2, [pc, #108]	; (8003be4 <HAL_TIM_PWM_Start+0x1e8>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d004      	beq.n	8003b86 <HAL_TIM_PWM_Start+0x18a>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a19      	ldr	r2, [pc, #100]	; (8003be8 <HAL_TIM_PWM_Start+0x1ec>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d115      	bne.n	8003bb2 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	689a      	ldr	r2, [r3, #8]
 8003b8c:	4b17      	ldr	r3, [pc, #92]	; (8003bec <HAL_TIM_PWM_Start+0x1f0>)
 8003b8e:	4013      	ands	r3, r2
 8003b90:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2b06      	cmp	r3, #6
 8003b96:	d015      	beq.n	8003bc4 <HAL_TIM_PWM_Start+0x1c8>
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b9e:	d011      	beq.n	8003bc4 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f042 0201 	orr.w	r2, r2, #1
 8003bae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bb0:	e008      	b.n	8003bc4 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f042 0201 	orr.w	r2, r2, #1
 8003bc0:	601a      	str	r2, [r3, #0]
 8003bc2:	e000      	b.n	8003bc6 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bc4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003bc6:	2300      	movs	r3, #0
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3710      	adds	r7, #16
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	40010000 	.word	0x40010000
 8003bd4:	40010400 	.word	0x40010400
 8003bd8:	40000400 	.word	0x40000400
 8003bdc:	40000800 	.word	0x40000800
 8003be0:	40000c00 	.word	0x40000c00
 8003be4:	40014000 	.word	0x40014000
 8003be8:	40001800 	.word	0x40001800
 8003bec:	00010007 	.word	0x00010007

08003bf0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b086      	sub	sp, #24
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d101      	bne.n	8003c0e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003c0a:	2302      	movs	r3, #2
 8003c0c:	e0ff      	b.n	8003e0e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2201      	movs	r2, #1
 8003c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2b14      	cmp	r3, #20
 8003c1a:	f200 80f0 	bhi.w	8003dfe <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003c1e:	a201      	add	r2, pc, #4	; (adr r2, 8003c24 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c24:	08003c79 	.word	0x08003c79
 8003c28:	08003dff 	.word	0x08003dff
 8003c2c:	08003dff 	.word	0x08003dff
 8003c30:	08003dff 	.word	0x08003dff
 8003c34:	08003cb9 	.word	0x08003cb9
 8003c38:	08003dff 	.word	0x08003dff
 8003c3c:	08003dff 	.word	0x08003dff
 8003c40:	08003dff 	.word	0x08003dff
 8003c44:	08003cfb 	.word	0x08003cfb
 8003c48:	08003dff 	.word	0x08003dff
 8003c4c:	08003dff 	.word	0x08003dff
 8003c50:	08003dff 	.word	0x08003dff
 8003c54:	08003d3b 	.word	0x08003d3b
 8003c58:	08003dff 	.word	0x08003dff
 8003c5c:	08003dff 	.word	0x08003dff
 8003c60:	08003dff 	.word	0x08003dff
 8003c64:	08003d7d 	.word	0x08003d7d
 8003c68:	08003dff 	.word	0x08003dff
 8003c6c:	08003dff 	.word	0x08003dff
 8003c70:	08003dff 	.word	0x08003dff
 8003c74:	08003dbd 	.word	0x08003dbd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68b9      	ldr	r1, [r7, #8]
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f000 f96a 	bl	8003f58 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	699a      	ldr	r2, [r3, #24]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f042 0208 	orr.w	r2, r2, #8
 8003c92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	699a      	ldr	r2, [r3, #24]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f022 0204 	bic.w	r2, r2, #4
 8003ca2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	6999      	ldr	r1, [r3, #24]
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	691a      	ldr	r2, [r3, #16]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	430a      	orrs	r2, r1
 8003cb4:	619a      	str	r2, [r3, #24]
      break;
 8003cb6:	e0a5      	b.n	8003e04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	68b9      	ldr	r1, [r7, #8]
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f000 f9bc 	bl	800403c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	699a      	ldr	r2, [r3, #24]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	699a      	ldr	r2, [r3, #24]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ce2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	6999      	ldr	r1, [r3, #24]
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	021a      	lsls	r2, r3, #8
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	430a      	orrs	r2, r1
 8003cf6:	619a      	str	r2, [r3, #24]
      break;
 8003cf8:	e084      	b.n	8003e04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	68b9      	ldr	r1, [r7, #8]
 8003d00:	4618      	mov	r0, r3
 8003d02:	f000 fa13 	bl	800412c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	69da      	ldr	r2, [r3, #28]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f042 0208 	orr.w	r2, r2, #8
 8003d14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	69da      	ldr	r2, [r3, #28]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f022 0204 	bic.w	r2, r2, #4
 8003d24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	69d9      	ldr	r1, [r3, #28]
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	691a      	ldr	r2, [r3, #16]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	430a      	orrs	r2, r1
 8003d36:	61da      	str	r2, [r3, #28]
      break;
 8003d38:	e064      	b.n	8003e04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	68b9      	ldr	r1, [r7, #8]
 8003d40:	4618      	mov	r0, r3
 8003d42:	f000 fa69 	bl	8004218 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	69da      	ldr	r2, [r3, #28]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	69da      	ldr	r2, [r3, #28]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	69d9      	ldr	r1, [r3, #28]
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	691b      	ldr	r3, [r3, #16]
 8003d70:	021a      	lsls	r2, r3, #8
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	430a      	orrs	r2, r1
 8003d78:	61da      	str	r2, [r3, #28]
      break;
 8003d7a:	e043      	b.n	8003e04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	68b9      	ldr	r1, [r7, #8]
 8003d82:	4618      	mov	r0, r3
 8003d84:	f000 faa0 	bl	80042c8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f042 0208 	orr.w	r2, r2, #8
 8003d96:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f022 0204 	bic.w	r2, r2, #4
 8003da6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	691a      	ldr	r2, [r3, #16]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	430a      	orrs	r2, r1
 8003db8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003dba:	e023      	b.n	8003e04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	68b9      	ldr	r1, [r7, #8]
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f000 fad2 	bl	800436c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003dd6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003de6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	021a      	lsls	r2, r3, #8
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	430a      	orrs	r2, r1
 8003dfa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003dfc:	e002      	b.n	8003e04 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	75fb      	strb	r3, [r7, #23]
      break;
 8003e02:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3718      	adds	r7, #24
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop

08003e18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b085      	sub	sp, #20
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	4a40      	ldr	r2, [pc, #256]	; (8003f2c <TIM_Base_SetConfig+0x114>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d013      	beq.n	8003e58 <TIM_Base_SetConfig+0x40>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e36:	d00f      	beq.n	8003e58 <TIM_Base_SetConfig+0x40>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	4a3d      	ldr	r2, [pc, #244]	; (8003f30 <TIM_Base_SetConfig+0x118>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d00b      	beq.n	8003e58 <TIM_Base_SetConfig+0x40>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	4a3c      	ldr	r2, [pc, #240]	; (8003f34 <TIM_Base_SetConfig+0x11c>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d007      	beq.n	8003e58 <TIM_Base_SetConfig+0x40>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	4a3b      	ldr	r2, [pc, #236]	; (8003f38 <TIM_Base_SetConfig+0x120>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d003      	beq.n	8003e58 <TIM_Base_SetConfig+0x40>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	4a3a      	ldr	r2, [pc, #232]	; (8003f3c <TIM_Base_SetConfig+0x124>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d108      	bne.n	8003e6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	68fa      	ldr	r2, [r7, #12]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a2f      	ldr	r2, [pc, #188]	; (8003f2c <TIM_Base_SetConfig+0x114>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d02b      	beq.n	8003eca <TIM_Base_SetConfig+0xb2>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e78:	d027      	beq.n	8003eca <TIM_Base_SetConfig+0xb2>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a2c      	ldr	r2, [pc, #176]	; (8003f30 <TIM_Base_SetConfig+0x118>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d023      	beq.n	8003eca <TIM_Base_SetConfig+0xb2>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a2b      	ldr	r2, [pc, #172]	; (8003f34 <TIM_Base_SetConfig+0x11c>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d01f      	beq.n	8003eca <TIM_Base_SetConfig+0xb2>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4a2a      	ldr	r2, [pc, #168]	; (8003f38 <TIM_Base_SetConfig+0x120>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d01b      	beq.n	8003eca <TIM_Base_SetConfig+0xb2>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a29      	ldr	r2, [pc, #164]	; (8003f3c <TIM_Base_SetConfig+0x124>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d017      	beq.n	8003eca <TIM_Base_SetConfig+0xb2>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a28      	ldr	r2, [pc, #160]	; (8003f40 <TIM_Base_SetConfig+0x128>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d013      	beq.n	8003eca <TIM_Base_SetConfig+0xb2>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a27      	ldr	r2, [pc, #156]	; (8003f44 <TIM_Base_SetConfig+0x12c>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d00f      	beq.n	8003eca <TIM_Base_SetConfig+0xb2>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a26      	ldr	r2, [pc, #152]	; (8003f48 <TIM_Base_SetConfig+0x130>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d00b      	beq.n	8003eca <TIM_Base_SetConfig+0xb2>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a25      	ldr	r2, [pc, #148]	; (8003f4c <TIM_Base_SetConfig+0x134>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d007      	beq.n	8003eca <TIM_Base_SetConfig+0xb2>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a24      	ldr	r2, [pc, #144]	; (8003f50 <TIM_Base_SetConfig+0x138>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d003      	beq.n	8003eca <TIM_Base_SetConfig+0xb2>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a23      	ldr	r2, [pc, #140]	; (8003f54 <TIM_Base_SetConfig+0x13c>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d108      	bne.n	8003edc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ed0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	695b      	ldr	r3, [r3, #20]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	68fa      	ldr	r2, [r7, #12]
 8003eee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	689a      	ldr	r2, [r3, #8]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4a0a      	ldr	r2, [pc, #40]	; (8003f2c <TIM_Base_SetConfig+0x114>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d003      	beq.n	8003f10 <TIM_Base_SetConfig+0xf8>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	4a0c      	ldr	r2, [pc, #48]	; (8003f3c <TIM_Base_SetConfig+0x124>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d103      	bne.n	8003f18 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	691a      	ldr	r2, [r3, #16]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	615a      	str	r2, [r3, #20]
}
 8003f1e:	bf00      	nop
 8003f20:	3714      	adds	r7, #20
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	40010000 	.word	0x40010000
 8003f30:	40000400 	.word	0x40000400
 8003f34:	40000800 	.word	0x40000800
 8003f38:	40000c00 	.word	0x40000c00
 8003f3c:	40010400 	.word	0x40010400
 8003f40:	40014000 	.word	0x40014000
 8003f44:	40014400 	.word	0x40014400
 8003f48:	40014800 	.word	0x40014800
 8003f4c:	40001800 	.word	0x40001800
 8003f50:	40001c00 	.word	0x40001c00
 8003f54:	40002000 	.word	0x40002000

08003f58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b087      	sub	sp, #28
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a1b      	ldr	r3, [r3, #32]
 8003f66:	f023 0201 	bic.w	r2, r3, #1
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a1b      	ldr	r3, [r3, #32]
 8003f72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	699b      	ldr	r3, [r3, #24]
 8003f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f80:	68fa      	ldr	r2, [r7, #12]
 8003f82:	4b2b      	ldr	r3, [pc, #172]	; (8004030 <TIM_OC1_SetConfig+0xd8>)
 8003f84:	4013      	ands	r3, r2
 8003f86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f023 0303 	bic.w	r3, r3, #3
 8003f8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	68fa      	ldr	r2, [r7, #12]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	f023 0302 	bic.w	r3, r3, #2
 8003fa0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	697a      	ldr	r2, [r7, #20]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	4a21      	ldr	r2, [pc, #132]	; (8004034 <TIM_OC1_SetConfig+0xdc>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d003      	beq.n	8003fbc <TIM_OC1_SetConfig+0x64>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4a20      	ldr	r2, [pc, #128]	; (8004038 <TIM_OC1_SetConfig+0xe0>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d10c      	bne.n	8003fd6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	f023 0308 	bic.w	r3, r3, #8
 8003fc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	697a      	ldr	r2, [r7, #20]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	f023 0304 	bic.w	r3, r3, #4
 8003fd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a16      	ldr	r2, [pc, #88]	; (8004034 <TIM_OC1_SetConfig+0xdc>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d003      	beq.n	8003fe6 <TIM_OC1_SetConfig+0x8e>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a15      	ldr	r2, [pc, #84]	; (8004038 <TIM_OC1_SetConfig+0xe0>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d111      	bne.n	800400a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ff4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	695b      	ldr	r3, [r3, #20]
 8003ffa:	693a      	ldr	r2, [r7, #16]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	699b      	ldr	r3, [r3, #24]
 8004004:	693a      	ldr	r2, [r7, #16]
 8004006:	4313      	orrs	r3, r2
 8004008:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	693a      	ldr	r2, [r7, #16]
 800400e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	68fa      	ldr	r2, [r7, #12]
 8004014:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	685a      	ldr	r2, [r3, #4]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	697a      	ldr	r2, [r7, #20]
 8004022:	621a      	str	r2, [r3, #32]
}
 8004024:	bf00      	nop
 8004026:	371c      	adds	r7, #28
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr
 8004030:	fffeff8f 	.word	0xfffeff8f
 8004034:	40010000 	.word	0x40010000
 8004038:	40010400 	.word	0x40010400

0800403c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800403c:	b480      	push	{r7}
 800403e:	b087      	sub	sp, #28
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6a1b      	ldr	r3, [r3, #32]
 800404a:	f023 0210 	bic.w	r2, r3, #16
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a1b      	ldr	r3, [r3, #32]
 8004056:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	699b      	ldr	r3, [r3, #24]
 8004062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004064:	68fa      	ldr	r2, [r7, #12]
 8004066:	4b2e      	ldr	r3, [pc, #184]	; (8004120 <TIM_OC2_SetConfig+0xe4>)
 8004068:	4013      	ands	r3, r2
 800406a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004072:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	021b      	lsls	r3, r3, #8
 800407a:	68fa      	ldr	r2, [r7, #12]
 800407c:	4313      	orrs	r3, r2
 800407e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	f023 0320 	bic.w	r3, r3, #32
 8004086:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	011b      	lsls	r3, r3, #4
 800408e:	697a      	ldr	r2, [r7, #20]
 8004090:	4313      	orrs	r3, r2
 8004092:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	4a23      	ldr	r2, [pc, #140]	; (8004124 <TIM_OC2_SetConfig+0xe8>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d003      	beq.n	80040a4 <TIM_OC2_SetConfig+0x68>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	4a22      	ldr	r2, [pc, #136]	; (8004128 <TIM_OC2_SetConfig+0xec>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d10d      	bne.n	80040c0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	011b      	lsls	r3, r3, #4
 80040b2:	697a      	ldr	r2, [r7, #20]
 80040b4:	4313      	orrs	r3, r2
 80040b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	4a18      	ldr	r2, [pc, #96]	; (8004124 <TIM_OC2_SetConfig+0xe8>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d003      	beq.n	80040d0 <TIM_OC2_SetConfig+0x94>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	4a17      	ldr	r2, [pc, #92]	; (8004128 <TIM_OC2_SetConfig+0xec>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d113      	bne.n	80040f8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80040d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80040de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	695b      	ldr	r3, [r3, #20]
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	693a      	ldr	r2, [r7, #16]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	699b      	ldr	r3, [r3, #24]
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	693a      	ldr	r2, [r7, #16]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	693a      	ldr	r2, [r7, #16]
 80040fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	68fa      	ldr	r2, [r7, #12]
 8004102:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	685a      	ldr	r2, [r3, #4]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	697a      	ldr	r2, [r7, #20]
 8004110:	621a      	str	r2, [r3, #32]
}
 8004112:	bf00      	nop
 8004114:	371c      	adds	r7, #28
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop
 8004120:	feff8fff 	.word	0xfeff8fff
 8004124:	40010000 	.word	0x40010000
 8004128:	40010400 	.word	0x40010400

0800412c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800412c:	b480      	push	{r7}
 800412e:	b087      	sub	sp, #28
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a1b      	ldr	r3, [r3, #32]
 800413a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a1b      	ldr	r3, [r3, #32]
 8004146:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	69db      	ldr	r3, [r3, #28]
 8004152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004154:	68fa      	ldr	r2, [r7, #12]
 8004156:	4b2d      	ldr	r3, [pc, #180]	; (800420c <TIM_OC3_SetConfig+0xe0>)
 8004158:	4013      	ands	r3, r2
 800415a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f023 0303 	bic.w	r3, r3, #3
 8004162:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	68fa      	ldr	r2, [r7, #12]
 800416a:	4313      	orrs	r3, r2
 800416c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004174:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	021b      	lsls	r3, r3, #8
 800417c:	697a      	ldr	r2, [r7, #20]
 800417e:	4313      	orrs	r3, r2
 8004180:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a22      	ldr	r2, [pc, #136]	; (8004210 <TIM_OC3_SetConfig+0xe4>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d003      	beq.n	8004192 <TIM_OC3_SetConfig+0x66>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a21      	ldr	r2, [pc, #132]	; (8004214 <TIM_OC3_SetConfig+0xe8>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d10d      	bne.n	80041ae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004198:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	68db      	ldr	r3, [r3, #12]
 800419e:	021b      	lsls	r3, r3, #8
 80041a0:	697a      	ldr	r2, [r7, #20]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a17      	ldr	r2, [pc, #92]	; (8004210 <TIM_OC3_SetConfig+0xe4>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d003      	beq.n	80041be <TIM_OC3_SetConfig+0x92>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a16      	ldr	r2, [pc, #88]	; (8004214 <TIM_OC3_SetConfig+0xe8>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d113      	bne.n	80041e6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80041c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80041cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	695b      	ldr	r3, [r3, #20]
 80041d2:	011b      	lsls	r3, r3, #4
 80041d4:	693a      	ldr	r2, [r7, #16]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	699b      	ldr	r3, [r3, #24]
 80041de:	011b      	lsls	r3, r3, #4
 80041e0:	693a      	ldr	r2, [r7, #16]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	693a      	ldr	r2, [r7, #16]
 80041ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	68fa      	ldr	r2, [r7, #12]
 80041f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	685a      	ldr	r2, [r3, #4]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	697a      	ldr	r2, [r7, #20]
 80041fe:	621a      	str	r2, [r3, #32]
}
 8004200:	bf00      	nop
 8004202:	371c      	adds	r7, #28
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr
 800420c:	fffeff8f 	.word	0xfffeff8f
 8004210:	40010000 	.word	0x40010000
 8004214:	40010400 	.word	0x40010400

08004218 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004218:	b480      	push	{r7}
 800421a:	b087      	sub	sp, #28
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a1b      	ldr	r3, [r3, #32]
 8004226:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a1b      	ldr	r3, [r3, #32]
 8004232:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	69db      	ldr	r3, [r3, #28]
 800423e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004240:	68fa      	ldr	r2, [r7, #12]
 8004242:	4b1e      	ldr	r3, [pc, #120]	; (80042bc <TIM_OC4_SetConfig+0xa4>)
 8004244:	4013      	ands	r3, r2
 8004246:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800424e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	021b      	lsls	r3, r3, #8
 8004256:	68fa      	ldr	r2, [r7, #12]
 8004258:	4313      	orrs	r3, r2
 800425a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004262:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	031b      	lsls	r3, r3, #12
 800426a:	693a      	ldr	r2, [r7, #16]
 800426c:	4313      	orrs	r3, r2
 800426e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	4a13      	ldr	r2, [pc, #76]	; (80042c0 <TIM_OC4_SetConfig+0xa8>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d003      	beq.n	8004280 <TIM_OC4_SetConfig+0x68>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	4a12      	ldr	r2, [pc, #72]	; (80042c4 <TIM_OC4_SetConfig+0xac>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d109      	bne.n	8004294 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004286:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	695b      	ldr	r3, [r3, #20]
 800428c:	019b      	lsls	r3, r3, #6
 800428e:	697a      	ldr	r2, [r7, #20]
 8004290:	4313      	orrs	r3, r2
 8004292:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	697a      	ldr	r2, [r7, #20]
 8004298:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	68fa      	ldr	r2, [r7, #12]
 800429e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	685a      	ldr	r2, [r3, #4]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	693a      	ldr	r2, [r7, #16]
 80042ac:	621a      	str	r2, [r3, #32]
}
 80042ae:	bf00      	nop
 80042b0:	371c      	adds	r7, #28
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr
 80042ba:	bf00      	nop
 80042bc:	feff8fff 	.word	0xfeff8fff
 80042c0:	40010000 	.word	0x40010000
 80042c4:	40010400 	.word	0x40010400

080042c8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b087      	sub	sp, #28
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6a1b      	ldr	r3, [r3, #32]
 80042d6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6a1b      	ldr	r3, [r3, #32]
 80042e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80042f0:	68fa      	ldr	r2, [r7, #12]
 80042f2:	4b1b      	ldr	r3, [pc, #108]	; (8004360 <TIM_OC5_SetConfig+0x98>)
 80042f4:	4013      	ands	r3, r2
 80042f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68fa      	ldr	r2, [r7, #12]
 80042fe:	4313      	orrs	r3, r2
 8004300:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004308:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	041b      	lsls	r3, r3, #16
 8004310:	693a      	ldr	r2, [r7, #16]
 8004312:	4313      	orrs	r3, r2
 8004314:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4a12      	ldr	r2, [pc, #72]	; (8004364 <TIM_OC5_SetConfig+0x9c>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d003      	beq.n	8004326 <TIM_OC5_SetConfig+0x5e>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4a11      	ldr	r2, [pc, #68]	; (8004368 <TIM_OC5_SetConfig+0xa0>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d109      	bne.n	800433a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800432c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	695b      	ldr	r3, [r3, #20]
 8004332:	021b      	lsls	r3, r3, #8
 8004334:	697a      	ldr	r2, [r7, #20]
 8004336:	4313      	orrs	r3, r2
 8004338:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	697a      	ldr	r2, [r7, #20]
 800433e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	68fa      	ldr	r2, [r7, #12]
 8004344:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	685a      	ldr	r2, [r3, #4]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	693a      	ldr	r2, [r7, #16]
 8004352:	621a      	str	r2, [r3, #32]
}
 8004354:	bf00      	nop
 8004356:	371c      	adds	r7, #28
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr
 8004360:	fffeff8f 	.word	0xfffeff8f
 8004364:	40010000 	.word	0x40010000
 8004368:	40010400 	.word	0x40010400

0800436c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800436c:	b480      	push	{r7}
 800436e:	b087      	sub	sp, #28
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a1b      	ldr	r3, [r3, #32]
 800437a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a1b      	ldr	r3, [r3, #32]
 8004386:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004394:	68fa      	ldr	r2, [r7, #12]
 8004396:	4b1c      	ldr	r3, [pc, #112]	; (8004408 <TIM_OC6_SetConfig+0x9c>)
 8004398:	4013      	ands	r3, r2
 800439a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	021b      	lsls	r3, r3, #8
 80043a2:	68fa      	ldr	r2, [r7, #12]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80043ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	051b      	lsls	r3, r3, #20
 80043b6:	693a      	ldr	r2, [r7, #16]
 80043b8:	4313      	orrs	r3, r2
 80043ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4a13      	ldr	r2, [pc, #76]	; (800440c <TIM_OC6_SetConfig+0xa0>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d003      	beq.n	80043cc <TIM_OC6_SetConfig+0x60>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	4a12      	ldr	r2, [pc, #72]	; (8004410 <TIM_OC6_SetConfig+0xa4>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d109      	bne.n	80043e0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043d2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	695b      	ldr	r3, [r3, #20]
 80043d8:	029b      	lsls	r3, r3, #10
 80043da:	697a      	ldr	r2, [r7, #20]
 80043dc:	4313      	orrs	r3, r2
 80043de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	697a      	ldr	r2, [r7, #20]
 80043e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	68fa      	ldr	r2, [r7, #12]
 80043ea:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	685a      	ldr	r2, [r3, #4]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	693a      	ldr	r2, [r7, #16]
 80043f8:	621a      	str	r2, [r3, #32]
}
 80043fa:	bf00      	nop
 80043fc:	371c      	adds	r7, #28
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr
 8004406:	bf00      	nop
 8004408:	feff8fff 	.word	0xfeff8fff
 800440c:	40010000 	.word	0x40010000
 8004410:	40010400 	.word	0x40010400

08004414 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004414:	b480      	push	{r7}
 8004416:	b087      	sub	sp, #28
 8004418:	af00      	add	r7, sp, #0
 800441a:	60f8      	str	r0, [r7, #12]
 800441c:	60b9      	str	r1, [r7, #8]
 800441e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	f003 031f 	and.w	r3, r3, #31
 8004426:	2201      	movs	r2, #1
 8004428:	fa02 f303 	lsl.w	r3, r2, r3
 800442c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	6a1a      	ldr	r2, [r3, #32]
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	43db      	mvns	r3, r3
 8004436:	401a      	ands	r2, r3
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6a1a      	ldr	r2, [r3, #32]
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	f003 031f 	and.w	r3, r3, #31
 8004446:	6879      	ldr	r1, [r7, #4]
 8004448:	fa01 f303 	lsl.w	r3, r1, r3
 800444c:	431a      	orrs	r2, r3
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	621a      	str	r2, [r3, #32]
}
 8004452:	bf00      	nop
 8004454:	371c      	adds	r7, #28
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr

0800445e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800445e:	b580      	push	{r7, lr}
 8004460:	b082      	sub	sp, #8
 8004462:	af00      	add	r7, sp, #0
 8004464:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d101      	bne.n	8004470 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e040      	b.n	80044f2 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004474:	2b00      	cmp	r3, #0
 8004476:	d106      	bne.n	8004486 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f7fc fd9b 	bl	8000fbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2224      	movs	r2, #36	; 0x24
 800448a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f022 0201 	bic.w	r2, r2, #1
 800449a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f000 fbe5 	bl	8004c6c <UART_SetConfig>
 80044a2:	4603      	mov	r3, r0
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d101      	bne.n	80044ac <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e022      	b.n	80044f2 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d002      	beq.n	80044ba <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f000 fe3d 	bl	8005134 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	685a      	ldr	r2, [r3, #4]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044c8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	689a      	ldr	r2, [r3, #8]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044d8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f042 0201 	orr.w	r2, r2, #1
 80044e8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f000 fec4 	bl	8005278 <UART_CheckIdleState>
 80044f0:	4603      	mov	r3, r0
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3708      	adds	r7, #8
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}

080044fa <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044fa:	b580      	push	{r7, lr}
 80044fc:	b08a      	sub	sp, #40	; 0x28
 80044fe:	af02      	add	r7, sp, #8
 8004500:	60f8      	str	r0, [r7, #12]
 8004502:	60b9      	str	r1, [r7, #8]
 8004504:	603b      	str	r3, [r7, #0]
 8004506:	4613      	mov	r3, r2
 8004508:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800450e:	2b20      	cmp	r3, #32
 8004510:	d171      	bne.n	80045f6 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d002      	beq.n	800451e <HAL_UART_Transmit+0x24>
 8004518:	88fb      	ldrh	r3, [r7, #6]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d101      	bne.n	8004522 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e06a      	b.n	80045f8 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2200      	movs	r2, #0
 8004526:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2221      	movs	r2, #33	; 0x21
 800452e:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004530:	f7fc ffda 	bl	80014e8 <HAL_GetTick>
 8004534:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	88fa      	ldrh	r2, [r7, #6]
 800453a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	88fa      	ldrh	r2, [r7, #6]
 8004542:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800454e:	d108      	bne.n	8004562 <HAL_UART_Transmit+0x68>
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	691b      	ldr	r3, [r3, #16]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d104      	bne.n	8004562 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004558:	2300      	movs	r3, #0
 800455a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	61bb      	str	r3, [r7, #24]
 8004560:	e003      	b.n	800456a <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004566:	2300      	movs	r3, #0
 8004568:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800456a:	e02c      	b.n	80045c6 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	9300      	str	r3, [sp, #0]
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	2200      	movs	r2, #0
 8004574:	2180      	movs	r1, #128	; 0x80
 8004576:	68f8      	ldr	r0, [r7, #12]
 8004578:	f000 feb5 	bl	80052e6 <UART_WaitOnFlagUntilTimeout>
 800457c:	4603      	mov	r3, r0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d001      	beq.n	8004586 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8004582:	2303      	movs	r3, #3
 8004584:	e038      	b.n	80045f8 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d10b      	bne.n	80045a4 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800458c:	69bb      	ldr	r3, [r7, #24]
 800458e:	881b      	ldrh	r3, [r3, #0]
 8004590:	461a      	mov	r2, r3
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800459a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800459c:	69bb      	ldr	r3, [r7, #24]
 800459e:	3302      	adds	r3, #2
 80045a0:	61bb      	str	r3, [r7, #24]
 80045a2:	e007      	b.n	80045b4 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	781a      	ldrb	r2, [r3, #0]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	3301      	adds	r3, #1
 80045b2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	3b01      	subs	r3, #1
 80045be:	b29a      	uxth	r2, r3
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d1cc      	bne.n	800456c <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	9300      	str	r3, [sp, #0]
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	2200      	movs	r2, #0
 80045da:	2140      	movs	r1, #64	; 0x40
 80045dc:	68f8      	ldr	r0, [r7, #12]
 80045de:	f000 fe82 	bl	80052e6 <UART_WaitOnFlagUntilTimeout>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d001      	beq.n	80045ec <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80045e8:	2303      	movs	r3, #3
 80045ea:	e005      	b.n	80045f8 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2220      	movs	r2, #32
 80045f0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80045f2:	2300      	movs	r3, #0
 80045f4:	e000      	b.n	80045f8 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80045f6:	2302      	movs	r3, #2
  }
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3720      	adds	r7, #32
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}

08004600 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b08a      	sub	sp, #40	; 0x28
 8004604:	af00      	add	r7, sp, #0
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	60b9      	str	r1, [r7, #8]
 800460a:	4613      	mov	r3, r2
 800460c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004614:	2b20      	cmp	r3, #32
 8004616:	d132      	bne.n	800467e <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d002      	beq.n	8004624 <HAL_UART_Receive_IT+0x24>
 800461e:	88fb      	ldrh	r3, [r7, #6]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d101      	bne.n	8004628 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	e02b      	b.n	8004680 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2200      	movs	r2, #0
 800462c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004638:	2b00      	cmp	r3, #0
 800463a:	d018      	beq.n	800466e <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	e853 3f00 	ldrex	r3, [r3]
 8004648:	613b      	str	r3, [r7, #16]
   return(result);
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004650:	627b      	str	r3, [r7, #36]	; 0x24
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	461a      	mov	r2, r3
 8004658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465a:	623b      	str	r3, [r7, #32]
 800465c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800465e:	69f9      	ldr	r1, [r7, #28]
 8004660:	6a3a      	ldr	r2, [r7, #32]
 8004662:	e841 2300 	strex	r3, r2, [r1]
 8004666:	61bb      	str	r3, [r7, #24]
   return(result);
 8004668:	69bb      	ldr	r3, [r7, #24]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d1e6      	bne.n	800463c <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800466e:	88fb      	ldrh	r3, [r7, #6]
 8004670:	461a      	mov	r2, r3
 8004672:	68b9      	ldr	r1, [r7, #8]
 8004674:	68f8      	ldr	r0, [r7, #12]
 8004676:	f000 fefd 	bl	8005474 <UART_Start_Receive_IT>
 800467a:	4603      	mov	r3, r0
 800467c:	e000      	b.n	8004680 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800467e:	2302      	movs	r3, #2
  }
}
 8004680:	4618      	mov	r0, r3
 8004682:	3728      	adds	r7, #40	; 0x28
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}

08004688 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b0ba      	sub	sp, #232	; 0xe8
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	69db      	ldr	r3, [r3, #28]
 8004696:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80046ae:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80046b2:	f640 030f 	movw	r3, #2063	; 0x80f
 80046b6:	4013      	ands	r3, r2
 80046b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80046bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d115      	bne.n	80046f0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80046c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046c8:	f003 0320 	and.w	r3, r3, #32
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d00f      	beq.n	80046f0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80046d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046d4:	f003 0320 	and.w	r3, r3, #32
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d009      	beq.n	80046f0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	f000 8297 	beq.w	8004c14 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	4798      	blx	r3
      }
      return;
 80046ee:	e291      	b.n	8004c14 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80046f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	f000 8117 	beq.w	8004928 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80046fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046fe:	f003 0301 	and.w	r3, r3, #1
 8004702:	2b00      	cmp	r3, #0
 8004704:	d106      	bne.n	8004714 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004706:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800470a:	4b85      	ldr	r3, [pc, #532]	; (8004920 <HAL_UART_IRQHandler+0x298>)
 800470c:	4013      	ands	r3, r2
 800470e:	2b00      	cmp	r3, #0
 8004710:	f000 810a 	beq.w	8004928 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004714:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004718:	f003 0301 	and.w	r3, r3, #1
 800471c:	2b00      	cmp	r3, #0
 800471e:	d011      	beq.n	8004744 <HAL_UART_IRQHandler+0xbc>
 8004720:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004728:	2b00      	cmp	r3, #0
 800472a:	d00b      	beq.n	8004744 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	2201      	movs	r2, #1
 8004732:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800473a:	f043 0201 	orr.w	r2, r3, #1
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004744:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004748:	f003 0302 	and.w	r3, r3, #2
 800474c:	2b00      	cmp	r3, #0
 800474e:	d011      	beq.n	8004774 <HAL_UART_IRQHandler+0xec>
 8004750:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004754:	f003 0301 	and.w	r3, r3, #1
 8004758:	2b00      	cmp	r3, #0
 800475a:	d00b      	beq.n	8004774 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	2202      	movs	r2, #2
 8004762:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800476a:	f043 0204 	orr.w	r2, r3, #4
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004774:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004778:	f003 0304 	and.w	r3, r3, #4
 800477c:	2b00      	cmp	r3, #0
 800477e:	d011      	beq.n	80047a4 <HAL_UART_IRQHandler+0x11c>
 8004780:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004784:	f003 0301 	and.w	r3, r3, #1
 8004788:	2b00      	cmp	r3, #0
 800478a:	d00b      	beq.n	80047a4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2204      	movs	r2, #4
 8004792:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800479a:	f043 0202 	orr.w	r2, r3, #2
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80047a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047a8:	f003 0308 	and.w	r3, r3, #8
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d017      	beq.n	80047e0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80047b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047b4:	f003 0320 	and.w	r3, r3, #32
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d105      	bne.n	80047c8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80047bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047c0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d00b      	beq.n	80047e0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	2208      	movs	r2, #8
 80047ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047d6:	f043 0208 	orr.w	r2, r3, #8
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80047e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d012      	beq.n	8004812 <HAL_UART_IRQHandler+0x18a>
 80047ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d00c      	beq.n	8004812 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004800:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004808:	f043 0220 	orr.w	r2, r3, #32
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004818:	2b00      	cmp	r3, #0
 800481a:	f000 81fd 	beq.w	8004c18 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800481e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004822:	f003 0320 	and.w	r3, r3, #32
 8004826:	2b00      	cmp	r3, #0
 8004828:	d00d      	beq.n	8004846 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800482a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800482e:	f003 0320 	and.w	r3, r3, #32
 8004832:	2b00      	cmp	r3, #0
 8004834:	d007      	beq.n	8004846 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800483a:	2b00      	cmp	r3, #0
 800483c:	d003      	beq.n	8004846 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800484c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800485a:	2b40      	cmp	r3, #64	; 0x40
 800485c:	d005      	beq.n	800486a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800485e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004862:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004866:	2b00      	cmp	r3, #0
 8004868:	d04f      	beq.n	800490a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f000 fec8 	bl	8005600 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800487a:	2b40      	cmp	r3, #64	; 0x40
 800487c:	d141      	bne.n	8004902 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	3308      	adds	r3, #8
 8004884:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004888:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800488c:	e853 3f00 	ldrex	r3, [r3]
 8004890:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004894:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004898:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800489c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	3308      	adds	r3, #8
 80048a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80048aa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80048ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80048b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80048ba:	e841 2300 	strex	r3, r2, [r1]
 80048be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80048c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d1d9      	bne.n	800487e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d013      	beq.n	80048fa <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048d6:	4a13      	ldr	r2, [pc, #76]	; (8004924 <HAL_UART_IRQHandler+0x29c>)
 80048d8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048de:	4618      	mov	r0, r3
 80048e0:	f7fc ffb3 	bl	800184a <HAL_DMA_Abort_IT>
 80048e4:	4603      	mov	r3, r0
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d017      	beq.n	800491a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80048f4:	4610      	mov	r0, r2
 80048f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048f8:	e00f      	b.n	800491a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f000 f9a0 	bl	8004c40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004900:	e00b      	b.n	800491a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f000 f99c 	bl	8004c40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004908:	e007      	b.n	800491a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f000 f998 	bl	8004c40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004918:	e17e      	b.n	8004c18 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800491a:	bf00      	nop
    return;
 800491c:	e17c      	b.n	8004c18 <HAL_UART_IRQHandler+0x590>
 800491e:	bf00      	nop
 8004920:	04000120 	.word	0x04000120
 8004924:	080056c9 	.word	0x080056c9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800492c:	2b01      	cmp	r3, #1
 800492e:	f040 814c 	bne.w	8004bca <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004932:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004936:	f003 0310 	and.w	r3, r3, #16
 800493a:	2b00      	cmp	r3, #0
 800493c:	f000 8145 	beq.w	8004bca <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004940:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004944:	f003 0310 	and.w	r3, r3, #16
 8004948:	2b00      	cmp	r3, #0
 800494a:	f000 813e 	beq.w	8004bca <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	2210      	movs	r2, #16
 8004954:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004960:	2b40      	cmp	r3, #64	; 0x40
 8004962:	f040 80b6 	bne.w	8004ad2 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004972:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004976:	2b00      	cmp	r3, #0
 8004978:	f000 8150 	beq.w	8004c1c <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004982:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004986:	429a      	cmp	r2, r3
 8004988:	f080 8148 	bcs.w	8004c1c <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004992:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800499a:	69db      	ldr	r3, [r3, #28]
 800499c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049a0:	f000 8086 	beq.w	8004ab0 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80049b0:	e853 3f00 	ldrex	r3, [r3]
 80049b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80049b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80049bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	461a      	mov	r2, r3
 80049ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80049ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80049d2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049d6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80049da:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80049de:	e841 2300 	strex	r3, r2, [r1]
 80049e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80049e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d1da      	bne.n	80049a4 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	3308      	adds	r3, #8
 80049f4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049f8:	e853 3f00 	ldrex	r3, [r3]
 80049fc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80049fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a00:	f023 0301 	bic.w	r3, r3, #1
 8004a04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	3308      	adds	r3, #8
 8004a0e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004a12:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004a16:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a18:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004a1a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004a1e:	e841 2300 	strex	r3, r2, [r1]
 8004a22:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004a24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d1e1      	bne.n	80049ee <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	3308      	adds	r3, #8
 8004a30:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a34:	e853 3f00 	ldrex	r3, [r3]
 8004a38:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004a3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a40:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	3308      	adds	r3, #8
 8004a4a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004a4e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004a50:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a52:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004a54:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004a56:	e841 2300 	strex	r3, r2, [r1]
 8004a5a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004a5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d1e3      	bne.n	8004a2a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2220      	movs	r2, #32
 8004a66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a78:	e853 3f00 	ldrex	r3, [r3]
 8004a7c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004a7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a80:	f023 0310 	bic.w	r3, r3, #16
 8004a84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004a92:	65bb      	str	r3, [r7, #88]	; 0x58
 8004a94:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a96:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004a98:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004a9a:	e841 2300 	strex	r3, r2, [r1]
 8004a9e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004aa0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d1e4      	bne.n	8004a70 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f7fc fe5d 	bl	800176a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2202      	movs	r2, #2
 8004ab4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	4619      	mov	r1, r3
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f000 f8c2 	bl	8004c54 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004ad0:	e0a4      	b.n	8004c1c <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	f000 8096 	beq.w	8004c20 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8004af4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	f000 8091 	beq.w	8004c20 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b06:	e853 3f00 	ldrex	r3, [r3]
 8004b0a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b0e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b12:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	461a      	mov	r2, r3
 8004b1c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004b20:	647b      	str	r3, [r7, #68]	; 0x44
 8004b22:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b24:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004b26:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b28:	e841 2300 	strex	r3, r2, [r1]
 8004b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004b2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d1e4      	bne.n	8004afe <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	3308      	adds	r3, #8
 8004b3a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3e:	e853 3f00 	ldrex	r3, [r3]
 8004b42:	623b      	str	r3, [r7, #32]
   return(result);
 8004b44:	6a3b      	ldr	r3, [r7, #32]
 8004b46:	f023 0301 	bic.w	r3, r3, #1
 8004b4a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	3308      	adds	r3, #8
 8004b54:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004b58:	633a      	str	r2, [r7, #48]	; 0x30
 8004b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b5c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b60:	e841 2300 	strex	r3, r2, [r1]
 8004b64:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d1e3      	bne.n	8004b34 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2220      	movs	r2, #32
 8004b70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	e853 3f00 	ldrex	r3, [r3]
 8004b8c:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	f023 0310 	bic.w	r3, r3, #16
 8004b94:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004ba2:	61fb      	str	r3, [r7, #28]
 8004ba4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba6:	69b9      	ldr	r1, [r7, #24]
 8004ba8:	69fa      	ldr	r2, [r7, #28]
 8004baa:	e841 2300 	strex	r3, r2, [r1]
 8004bae:	617b      	str	r3, [r7, #20]
   return(result);
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d1e4      	bne.n	8004b80 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2202      	movs	r2, #2
 8004bba:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004bbc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004bc0:	4619      	mov	r1, r3
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f000 f846 	bl	8004c54 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004bc8:	e02a      	b.n	8004c20 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004bca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d00e      	beq.n	8004bf4 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004bd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d008      	beq.n	8004bf4 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d01c      	beq.n	8004c24 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	4798      	blx	r3
    }
    return;
 8004bf2:	e017      	b.n	8004c24 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004bf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d012      	beq.n	8004c26 <HAL_UART_IRQHandler+0x59e>
 8004c00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d00c      	beq.n	8004c26 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f000 fd71 	bl	80056f4 <UART_EndTransmit_IT>
    return;
 8004c12:	e008      	b.n	8004c26 <HAL_UART_IRQHandler+0x59e>
      return;
 8004c14:	bf00      	nop
 8004c16:	e006      	b.n	8004c26 <HAL_UART_IRQHandler+0x59e>
    return;
 8004c18:	bf00      	nop
 8004c1a:	e004      	b.n	8004c26 <HAL_UART_IRQHandler+0x59e>
      return;
 8004c1c:	bf00      	nop
 8004c1e:	e002      	b.n	8004c26 <HAL_UART_IRQHandler+0x59e>
      return;
 8004c20:	bf00      	nop
 8004c22:	e000      	b.n	8004c26 <HAL_UART_IRQHandler+0x59e>
    return;
 8004c24:	bf00      	nop
  }

}
 8004c26:	37e8      	adds	r7, #232	; 0xe8
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004c34:	bf00      	nop
 8004c36:	370c      	adds	r7, #12
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr

08004c40 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b083      	sub	sp, #12
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004c48:	bf00      	nop
 8004c4a:	370c      	adds	r7, #12
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr

08004c54 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b083      	sub	sp, #12
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	460b      	mov	r3, r1
 8004c5e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004c60:	bf00      	nop
 8004c62:	370c      	adds	r7, #12
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr

08004c6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b088      	sub	sp, #32
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c74:	2300      	movs	r3, #0
 8004c76:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	689a      	ldr	r2, [r3, #8]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	691b      	ldr	r3, [r3, #16]
 8004c80:	431a      	orrs	r2, r3
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	695b      	ldr	r3, [r3, #20]
 8004c86:	431a      	orrs	r2, r3
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	69db      	ldr	r3, [r3, #28]
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	4ba6      	ldr	r3, [pc, #664]	; (8004f30 <UART_SetConfig+0x2c4>)
 8004c98:	4013      	ands	r3, r2
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	6812      	ldr	r2, [r2, #0]
 8004c9e:	6979      	ldr	r1, [r7, #20]
 8004ca0:	430b      	orrs	r3, r1
 8004ca2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	68da      	ldr	r2, [r3, #12]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	430a      	orrs	r2, r1
 8004cb8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	699b      	ldr	r3, [r3, #24]
 8004cbe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6a1b      	ldr	r3, [r3, #32]
 8004cc4:	697a      	ldr	r2, [r7, #20]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	697a      	ldr	r2, [r7, #20]
 8004cda:	430a      	orrs	r2, r1
 8004cdc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a94      	ldr	r2, [pc, #592]	; (8004f34 <UART_SetConfig+0x2c8>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d120      	bne.n	8004d2a <UART_SetConfig+0xbe>
 8004ce8:	4b93      	ldr	r3, [pc, #588]	; (8004f38 <UART_SetConfig+0x2cc>)
 8004cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cee:	f003 0303 	and.w	r3, r3, #3
 8004cf2:	2b03      	cmp	r3, #3
 8004cf4:	d816      	bhi.n	8004d24 <UART_SetConfig+0xb8>
 8004cf6:	a201      	add	r2, pc, #4	; (adr r2, 8004cfc <UART_SetConfig+0x90>)
 8004cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cfc:	08004d0d 	.word	0x08004d0d
 8004d00:	08004d19 	.word	0x08004d19
 8004d04:	08004d13 	.word	0x08004d13
 8004d08:	08004d1f 	.word	0x08004d1f
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	77fb      	strb	r3, [r7, #31]
 8004d10:	e150      	b.n	8004fb4 <UART_SetConfig+0x348>
 8004d12:	2302      	movs	r3, #2
 8004d14:	77fb      	strb	r3, [r7, #31]
 8004d16:	e14d      	b.n	8004fb4 <UART_SetConfig+0x348>
 8004d18:	2304      	movs	r3, #4
 8004d1a:	77fb      	strb	r3, [r7, #31]
 8004d1c:	e14a      	b.n	8004fb4 <UART_SetConfig+0x348>
 8004d1e:	2308      	movs	r3, #8
 8004d20:	77fb      	strb	r3, [r7, #31]
 8004d22:	e147      	b.n	8004fb4 <UART_SetConfig+0x348>
 8004d24:	2310      	movs	r3, #16
 8004d26:	77fb      	strb	r3, [r7, #31]
 8004d28:	e144      	b.n	8004fb4 <UART_SetConfig+0x348>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a83      	ldr	r2, [pc, #524]	; (8004f3c <UART_SetConfig+0x2d0>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d132      	bne.n	8004d9a <UART_SetConfig+0x12e>
 8004d34:	4b80      	ldr	r3, [pc, #512]	; (8004f38 <UART_SetConfig+0x2cc>)
 8004d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d3a:	f003 030c 	and.w	r3, r3, #12
 8004d3e:	2b0c      	cmp	r3, #12
 8004d40:	d828      	bhi.n	8004d94 <UART_SetConfig+0x128>
 8004d42:	a201      	add	r2, pc, #4	; (adr r2, 8004d48 <UART_SetConfig+0xdc>)
 8004d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d48:	08004d7d 	.word	0x08004d7d
 8004d4c:	08004d95 	.word	0x08004d95
 8004d50:	08004d95 	.word	0x08004d95
 8004d54:	08004d95 	.word	0x08004d95
 8004d58:	08004d89 	.word	0x08004d89
 8004d5c:	08004d95 	.word	0x08004d95
 8004d60:	08004d95 	.word	0x08004d95
 8004d64:	08004d95 	.word	0x08004d95
 8004d68:	08004d83 	.word	0x08004d83
 8004d6c:	08004d95 	.word	0x08004d95
 8004d70:	08004d95 	.word	0x08004d95
 8004d74:	08004d95 	.word	0x08004d95
 8004d78:	08004d8f 	.word	0x08004d8f
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	77fb      	strb	r3, [r7, #31]
 8004d80:	e118      	b.n	8004fb4 <UART_SetConfig+0x348>
 8004d82:	2302      	movs	r3, #2
 8004d84:	77fb      	strb	r3, [r7, #31]
 8004d86:	e115      	b.n	8004fb4 <UART_SetConfig+0x348>
 8004d88:	2304      	movs	r3, #4
 8004d8a:	77fb      	strb	r3, [r7, #31]
 8004d8c:	e112      	b.n	8004fb4 <UART_SetConfig+0x348>
 8004d8e:	2308      	movs	r3, #8
 8004d90:	77fb      	strb	r3, [r7, #31]
 8004d92:	e10f      	b.n	8004fb4 <UART_SetConfig+0x348>
 8004d94:	2310      	movs	r3, #16
 8004d96:	77fb      	strb	r3, [r7, #31]
 8004d98:	e10c      	b.n	8004fb4 <UART_SetConfig+0x348>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a68      	ldr	r2, [pc, #416]	; (8004f40 <UART_SetConfig+0x2d4>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d120      	bne.n	8004de6 <UART_SetConfig+0x17a>
 8004da4:	4b64      	ldr	r3, [pc, #400]	; (8004f38 <UART_SetConfig+0x2cc>)
 8004da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004daa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004dae:	2b30      	cmp	r3, #48	; 0x30
 8004db0:	d013      	beq.n	8004dda <UART_SetConfig+0x16e>
 8004db2:	2b30      	cmp	r3, #48	; 0x30
 8004db4:	d814      	bhi.n	8004de0 <UART_SetConfig+0x174>
 8004db6:	2b20      	cmp	r3, #32
 8004db8:	d009      	beq.n	8004dce <UART_SetConfig+0x162>
 8004dba:	2b20      	cmp	r3, #32
 8004dbc:	d810      	bhi.n	8004de0 <UART_SetConfig+0x174>
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d002      	beq.n	8004dc8 <UART_SetConfig+0x15c>
 8004dc2:	2b10      	cmp	r3, #16
 8004dc4:	d006      	beq.n	8004dd4 <UART_SetConfig+0x168>
 8004dc6:	e00b      	b.n	8004de0 <UART_SetConfig+0x174>
 8004dc8:	2300      	movs	r3, #0
 8004dca:	77fb      	strb	r3, [r7, #31]
 8004dcc:	e0f2      	b.n	8004fb4 <UART_SetConfig+0x348>
 8004dce:	2302      	movs	r3, #2
 8004dd0:	77fb      	strb	r3, [r7, #31]
 8004dd2:	e0ef      	b.n	8004fb4 <UART_SetConfig+0x348>
 8004dd4:	2304      	movs	r3, #4
 8004dd6:	77fb      	strb	r3, [r7, #31]
 8004dd8:	e0ec      	b.n	8004fb4 <UART_SetConfig+0x348>
 8004dda:	2308      	movs	r3, #8
 8004ddc:	77fb      	strb	r3, [r7, #31]
 8004dde:	e0e9      	b.n	8004fb4 <UART_SetConfig+0x348>
 8004de0:	2310      	movs	r3, #16
 8004de2:	77fb      	strb	r3, [r7, #31]
 8004de4:	e0e6      	b.n	8004fb4 <UART_SetConfig+0x348>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a56      	ldr	r2, [pc, #344]	; (8004f44 <UART_SetConfig+0x2d8>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d120      	bne.n	8004e32 <UART_SetConfig+0x1c6>
 8004df0:	4b51      	ldr	r3, [pc, #324]	; (8004f38 <UART_SetConfig+0x2cc>)
 8004df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004df6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004dfa:	2bc0      	cmp	r3, #192	; 0xc0
 8004dfc:	d013      	beq.n	8004e26 <UART_SetConfig+0x1ba>
 8004dfe:	2bc0      	cmp	r3, #192	; 0xc0
 8004e00:	d814      	bhi.n	8004e2c <UART_SetConfig+0x1c0>
 8004e02:	2b80      	cmp	r3, #128	; 0x80
 8004e04:	d009      	beq.n	8004e1a <UART_SetConfig+0x1ae>
 8004e06:	2b80      	cmp	r3, #128	; 0x80
 8004e08:	d810      	bhi.n	8004e2c <UART_SetConfig+0x1c0>
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d002      	beq.n	8004e14 <UART_SetConfig+0x1a8>
 8004e0e:	2b40      	cmp	r3, #64	; 0x40
 8004e10:	d006      	beq.n	8004e20 <UART_SetConfig+0x1b4>
 8004e12:	e00b      	b.n	8004e2c <UART_SetConfig+0x1c0>
 8004e14:	2300      	movs	r3, #0
 8004e16:	77fb      	strb	r3, [r7, #31]
 8004e18:	e0cc      	b.n	8004fb4 <UART_SetConfig+0x348>
 8004e1a:	2302      	movs	r3, #2
 8004e1c:	77fb      	strb	r3, [r7, #31]
 8004e1e:	e0c9      	b.n	8004fb4 <UART_SetConfig+0x348>
 8004e20:	2304      	movs	r3, #4
 8004e22:	77fb      	strb	r3, [r7, #31]
 8004e24:	e0c6      	b.n	8004fb4 <UART_SetConfig+0x348>
 8004e26:	2308      	movs	r3, #8
 8004e28:	77fb      	strb	r3, [r7, #31]
 8004e2a:	e0c3      	b.n	8004fb4 <UART_SetConfig+0x348>
 8004e2c:	2310      	movs	r3, #16
 8004e2e:	77fb      	strb	r3, [r7, #31]
 8004e30:	e0c0      	b.n	8004fb4 <UART_SetConfig+0x348>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a44      	ldr	r2, [pc, #272]	; (8004f48 <UART_SetConfig+0x2dc>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d125      	bne.n	8004e88 <UART_SetConfig+0x21c>
 8004e3c:	4b3e      	ldr	r3, [pc, #248]	; (8004f38 <UART_SetConfig+0x2cc>)
 8004e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e4a:	d017      	beq.n	8004e7c <UART_SetConfig+0x210>
 8004e4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e50:	d817      	bhi.n	8004e82 <UART_SetConfig+0x216>
 8004e52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e56:	d00b      	beq.n	8004e70 <UART_SetConfig+0x204>
 8004e58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e5c:	d811      	bhi.n	8004e82 <UART_SetConfig+0x216>
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d003      	beq.n	8004e6a <UART_SetConfig+0x1fe>
 8004e62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e66:	d006      	beq.n	8004e76 <UART_SetConfig+0x20a>
 8004e68:	e00b      	b.n	8004e82 <UART_SetConfig+0x216>
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	77fb      	strb	r3, [r7, #31]
 8004e6e:	e0a1      	b.n	8004fb4 <UART_SetConfig+0x348>
 8004e70:	2302      	movs	r3, #2
 8004e72:	77fb      	strb	r3, [r7, #31]
 8004e74:	e09e      	b.n	8004fb4 <UART_SetConfig+0x348>
 8004e76:	2304      	movs	r3, #4
 8004e78:	77fb      	strb	r3, [r7, #31]
 8004e7a:	e09b      	b.n	8004fb4 <UART_SetConfig+0x348>
 8004e7c:	2308      	movs	r3, #8
 8004e7e:	77fb      	strb	r3, [r7, #31]
 8004e80:	e098      	b.n	8004fb4 <UART_SetConfig+0x348>
 8004e82:	2310      	movs	r3, #16
 8004e84:	77fb      	strb	r3, [r7, #31]
 8004e86:	e095      	b.n	8004fb4 <UART_SetConfig+0x348>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a2f      	ldr	r2, [pc, #188]	; (8004f4c <UART_SetConfig+0x2e0>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d125      	bne.n	8004ede <UART_SetConfig+0x272>
 8004e92:	4b29      	ldr	r3, [pc, #164]	; (8004f38 <UART_SetConfig+0x2cc>)
 8004e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e98:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004e9c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ea0:	d017      	beq.n	8004ed2 <UART_SetConfig+0x266>
 8004ea2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ea6:	d817      	bhi.n	8004ed8 <UART_SetConfig+0x26c>
 8004ea8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004eac:	d00b      	beq.n	8004ec6 <UART_SetConfig+0x25a>
 8004eae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004eb2:	d811      	bhi.n	8004ed8 <UART_SetConfig+0x26c>
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d003      	beq.n	8004ec0 <UART_SetConfig+0x254>
 8004eb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ebc:	d006      	beq.n	8004ecc <UART_SetConfig+0x260>
 8004ebe:	e00b      	b.n	8004ed8 <UART_SetConfig+0x26c>
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	77fb      	strb	r3, [r7, #31]
 8004ec4:	e076      	b.n	8004fb4 <UART_SetConfig+0x348>
 8004ec6:	2302      	movs	r3, #2
 8004ec8:	77fb      	strb	r3, [r7, #31]
 8004eca:	e073      	b.n	8004fb4 <UART_SetConfig+0x348>
 8004ecc:	2304      	movs	r3, #4
 8004ece:	77fb      	strb	r3, [r7, #31]
 8004ed0:	e070      	b.n	8004fb4 <UART_SetConfig+0x348>
 8004ed2:	2308      	movs	r3, #8
 8004ed4:	77fb      	strb	r3, [r7, #31]
 8004ed6:	e06d      	b.n	8004fb4 <UART_SetConfig+0x348>
 8004ed8:	2310      	movs	r3, #16
 8004eda:	77fb      	strb	r3, [r7, #31]
 8004edc:	e06a      	b.n	8004fb4 <UART_SetConfig+0x348>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a1b      	ldr	r2, [pc, #108]	; (8004f50 <UART_SetConfig+0x2e4>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d138      	bne.n	8004f5a <UART_SetConfig+0x2ee>
 8004ee8:	4b13      	ldr	r3, [pc, #76]	; (8004f38 <UART_SetConfig+0x2cc>)
 8004eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eee:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004ef2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004ef6:	d017      	beq.n	8004f28 <UART_SetConfig+0x2bc>
 8004ef8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004efc:	d82a      	bhi.n	8004f54 <UART_SetConfig+0x2e8>
 8004efe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f02:	d00b      	beq.n	8004f1c <UART_SetConfig+0x2b0>
 8004f04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f08:	d824      	bhi.n	8004f54 <UART_SetConfig+0x2e8>
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d003      	beq.n	8004f16 <UART_SetConfig+0x2aa>
 8004f0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f12:	d006      	beq.n	8004f22 <UART_SetConfig+0x2b6>
 8004f14:	e01e      	b.n	8004f54 <UART_SetConfig+0x2e8>
 8004f16:	2300      	movs	r3, #0
 8004f18:	77fb      	strb	r3, [r7, #31]
 8004f1a:	e04b      	b.n	8004fb4 <UART_SetConfig+0x348>
 8004f1c:	2302      	movs	r3, #2
 8004f1e:	77fb      	strb	r3, [r7, #31]
 8004f20:	e048      	b.n	8004fb4 <UART_SetConfig+0x348>
 8004f22:	2304      	movs	r3, #4
 8004f24:	77fb      	strb	r3, [r7, #31]
 8004f26:	e045      	b.n	8004fb4 <UART_SetConfig+0x348>
 8004f28:	2308      	movs	r3, #8
 8004f2a:	77fb      	strb	r3, [r7, #31]
 8004f2c:	e042      	b.n	8004fb4 <UART_SetConfig+0x348>
 8004f2e:	bf00      	nop
 8004f30:	efff69f3 	.word	0xefff69f3
 8004f34:	40011000 	.word	0x40011000
 8004f38:	40023800 	.word	0x40023800
 8004f3c:	40004400 	.word	0x40004400
 8004f40:	40004800 	.word	0x40004800
 8004f44:	40004c00 	.word	0x40004c00
 8004f48:	40005000 	.word	0x40005000
 8004f4c:	40011400 	.word	0x40011400
 8004f50:	40007800 	.word	0x40007800
 8004f54:	2310      	movs	r3, #16
 8004f56:	77fb      	strb	r3, [r7, #31]
 8004f58:	e02c      	b.n	8004fb4 <UART_SetConfig+0x348>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a72      	ldr	r2, [pc, #456]	; (8005128 <UART_SetConfig+0x4bc>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d125      	bne.n	8004fb0 <UART_SetConfig+0x344>
 8004f64:	4b71      	ldr	r3, [pc, #452]	; (800512c <UART_SetConfig+0x4c0>)
 8004f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f6a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004f6e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004f72:	d017      	beq.n	8004fa4 <UART_SetConfig+0x338>
 8004f74:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004f78:	d817      	bhi.n	8004faa <UART_SetConfig+0x33e>
 8004f7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f7e:	d00b      	beq.n	8004f98 <UART_SetConfig+0x32c>
 8004f80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f84:	d811      	bhi.n	8004faa <UART_SetConfig+0x33e>
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d003      	beq.n	8004f92 <UART_SetConfig+0x326>
 8004f8a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f8e:	d006      	beq.n	8004f9e <UART_SetConfig+0x332>
 8004f90:	e00b      	b.n	8004faa <UART_SetConfig+0x33e>
 8004f92:	2300      	movs	r3, #0
 8004f94:	77fb      	strb	r3, [r7, #31]
 8004f96:	e00d      	b.n	8004fb4 <UART_SetConfig+0x348>
 8004f98:	2302      	movs	r3, #2
 8004f9a:	77fb      	strb	r3, [r7, #31]
 8004f9c:	e00a      	b.n	8004fb4 <UART_SetConfig+0x348>
 8004f9e:	2304      	movs	r3, #4
 8004fa0:	77fb      	strb	r3, [r7, #31]
 8004fa2:	e007      	b.n	8004fb4 <UART_SetConfig+0x348>
 8004fa4:	2308      	movs	r3, #8
 8004fa6:	77fb      	strb	r3, [r7, #31]
 8004fa8:	e004      	b.n	8004fb4 <UART_SetConfig+0x348>
 8004faa:	2310      	movs	r3, #16
 8004fac:	77fb      	strb	r3, [r7, #31]
 8004fae:	e001      	b.n	8004fb4 <UART_SetConfig+0x348>
 8004fb0:	2310      	movs	r3, #16
 8004fb2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	69db      	ldr	r3, [r3, #28]
 8004fb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fbc:	d15b      	bne.n	8005076 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004fbe:	7ffb      	ldrb	r3, [r7, #31]
 8004fc0:	2b08      	cmp	r3, #8
 8004fc2:	d828      	bhi.n	8005016 <UART_SetConfig+0x3aa>
 8004fc4:	a201      	add	r2, pc, #4	; (adr r2, 8004fcc <UART_SetConfig+0x360>)
 8004fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fca:	bf00      	nop
 8004fcc:	08004ff1 	.word	0x08004ff1
 8004fd0:	08004ff9 	.word	0x08004ff9
 8004fd4:	08005001 	.word	0x08005001
 8004fd8:	08005017 	.word	0x08005017
 8004fdc:	08005007 	.word	0x08005007
 8004fe0:	08005017 	.word	0x08005017
 8004fe4:	08005017 	.word	0x08005017
 8004fe8:	08005017 	.word	0x08005017
 8004fec:	0800500f 	.word	0x0800500f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ff0:	f7fe f8da 	bl	80031a8 <HAL_RCC_GetPCLK1Freq>
 8004ff4:	61b8      	str	r0, [r7, #24]
        break;
 8004ff6:	e013      	b.n	8005020 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ff8:	f7fe f8ea 	bl	80031d0 <HAL_RCC_GetPCLK2Freq>
 8004ffc:	61b8      	str	r0, [r7, #24]
        break;
 8004ffe:	e00f      	b.n	8005020 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005000:	4b4b      	ldr	r3, [pc, #300]	; (8005130 <UART_SetConfig+0x4c4>)
 8005002:	61bb      	str	r3, [r7, #24]
        break;
 8005004:	e00c      	b.n	8005020 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005006:	f7fd ffbd 	bl	8002f84 <HAL_RCC_GetSysClockFreq>
 800500a:	61b8      	str	r0, [r7, #24]
        break;
 800500c:	e008      	b.n	8005020 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800500e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005012:	61bb      	str	r3, [r7, #24]
        break;
 8005014:	e004      	b.n	8005020 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005016:	2300      	movs	r3, #0
 8005018:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	77bb      	strb	r3, [r7, #30]
        break;
 800501e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d074      	beq.n	8005110 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005026:	69bb      	ldr	r3, [r7, #24]
 8005028:	005a      	lsls	r2, r3, #1
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	085b      	lsrs	r3, r3, #1
 8005030:	441a      	add	r2, r3
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	fbb2 f3f3 	udiv	r3, r2, r3
 800503a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	2b0f      	cmp	r3, #15
 8005040:	d916      	bls.n	8005070 <UART_SetConfig+0x404>
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005048:	d212      	bcs.n	8005070 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	b29b      	uxth	r3, r3
 800504e:	f023 030f 	bic.w	r3, r3, #15
 8005052:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	085b      	lsrs	r3, r3, #1
 8005058:	b29b      	uxth	r3, r3
 800505a:	f003 0307 	and.w	r3, r3, #7
 800505e:	b29a      	uxth	r2, r3
 8005060:	89fb      	ldrh	r3, [r7, #14]
 8005062:	4313      	orrs	r3, r2
 8005064:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	89fa      	ldrh	r2, [r7, #14]
 800506c:	60da      	str	r2, [r3, #12]
 800506e:	e04f      	b.n	8005110 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	77bb      	strb	r3, [r7, #30]
 8005074:	e04c      	b.n	8005110 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005076:	7ffb      	ldrb	r3, [r7, #31]
 8005078:	2b08      	cmp	r3, #8
 800507a:	d828      	bhi.n	80050ce <UART_SetConfig+0x462>
 800507c:	a201      	add	r2, pc, #4	; (adr r2, 8005084 <UART_SetConfig+0x418>)
 800507e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005082:	bf00      	nop
 8005084:	080050a9 	.word	0x080050a9
 8005088:	080050b1 	.word	0x080050b1
 800508c:	080050b9 	.word	0x080050b9
 8005090:	080050cf 	.word	0x080050cf
 8005094:	080050bf 	.word	0x080050bf
 8005098:	080050cf 	.word	0x080050cf
 800509c:	080050cf 	.word	0x080050cf
 80050a0:	080050cf 	.word	0x080050cf
 80050a4:	080050c7 	.word	0x080050c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050a8:	f7fe f87e 	bl	80031a8 <HAL_RCC_GetPCLK1Freq>
 80050ac:	61b8      	str	r0, [r7, #24]
        break;
 80050ae:	e013      	b.n	80050d8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050b0:	f7fe f88e 	bl	80031d0 <HAL_RCC_GetPCLK2Freq>
 80050b4:	61b8      	str	r0, [r7, #24]
        break;
 80050b6:	e00f      	b.n	80050d8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050b8:	4b1d      	ldr	r3, [pc, #116]	; (8005130 <UART_SetConfig+0x4c4>)
 80050ba:	61bb      	str	r3, [r7, #24]
        break;
 80050bc:	e00c      	b.n	80050d8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050be:	f7fd ff61 	bl	8002f84 <HAL_RCC_GetSysClockFreq>
 80050c2:	61b8      	str	r0, [r7, #24]
        break;
 80050c4:	e008      	b.n	80050d8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050ca:	61bb      	str	r3, [r7, #24]
        break;
 80050cc:	e004      	b.n	80050d8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80050ce:	2300      	movs	r3, #0
 80050d0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	77bb      	strb	r3, [r7, #30]
        break;
 80050d6:	bf00      	nop
    }

    if (pclk != 0U)
 80050d8:	69bb      	ldr	r3, [r7, #24]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d018      	beq.n	8005110 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	085a      	lsrs	r2, r3, #1
 80050e4:	69bb      	ldr	r3, [r7, #24]
 80050e6:	441a      	add	r2, r3
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80050f0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	2b0f      	cmp	r3, #15
 80050f6:	d909      	bls.n	800510c <UART_SetConfig+0x4a0>
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050fe:	d205      	bcs.n	800510c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	b29a      	uxth	r2, r3
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	60da      	str	r2, [r3, #12]
 800510a:	e001      	b.n	8005110 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800511c:	7fbb      	ldrb	r3, [r7, #30]
}
 800511e:	4618      	mov	r0, r3
 8005120:	3720      	adds	r7, #32
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
 8005126:	bf00      	nop
 8005128:	40007c00 	.word	0x40007c00
 800512c:	40023800 	.word	0x40023800
 8005130:	00f42400 	.word	0x00f42400

08005134 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005134:	b480      	push	{r7}
 8005136:	b083      	sub	sp, #12
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005140:	f003 0301 	and.w	r3, r3, #1
 8005144:	2b00      	cmp	r3, #0
 8005146:	d00a      	beq.n	800515e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	430a      	orrs	r2, r1
 800515c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005162:	f003 0302 	and.w	r3, r3, #2
 8005166:	2b00      	cmp	r3, #0
 8005168:	d00a      	beq.n	8005180 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	430a      	orrs	r2, r1
 800517e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005184:	f003 0304 	and.w	r3, r3, #4
 8005188:	2b00      	cmp	r3, #0
 800518a:	d00a      	beq.n	80051a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	430a      	orrs	r2, r1
 80051a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a6:	f003 0308 	and.w	r3, r3, #8
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d00a      	beq.n	80051c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	430a      	orrs	r2, r1
 80051c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c8:	f003 0310 	and.w	r3, r3, #16
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d00a      	beq.n	80051e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	430a      	orrs	r2, r1
 80051e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ea:	f003 0320 	and.w	r3, r3, #32
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d00a      	beq.n	8005208 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	430a      	orrs	r2, r1
 8005206:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005210:	2b00      	cmp	r3, #0
 8005212:	d01a      	beq.n	800524a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	430a      	orrs	r2, r1
 8005228:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005232:	d10a      	bne.n	800524a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	430a      	orrs	r2, r1
 8005248:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005252:	2b00      	cmp	r3, #0
 8005254:	d00a      	beq.n	800526c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	430a      	orrs	r2, r1
 800526a:	605a      	str	r2, [r3, #4]
  }
}
 800526c:	bf00      	nop
 800526e:	370c      	adds	r7, #12
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr

08005278 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b086      	sub	sp, #24
 800527c:	af02      	add	r7, sp, #8
 800527e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2200      	movs	r2, #0
 8005284:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005288:	f7fc f92e 	bl	80014e8 <HAL_GetTick>
 800528c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f003 0308 	and.w	r3, r3, #8
 8005298:	2b08      	cmp	r3, #8
 800529a:	d10e      	bne.n	80052ba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800529c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80052a0:	9300      	str	r3, [sp, #0]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2200      	movs	r2, #0
 80052a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f000 f81b 	bl	80052e6 <UART_WaitOnFlagUntilTimeout>
 80052b0:	4603      	mov	r3, r0
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d001      	beq.n	80052ba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052b6:	2303      	movs	r3, #3
 80052b8:	e011      	b.n	80052de <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2220      	movs	r2, #32
 80052be:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2220      	movs	r2, #32
 80052c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2200      	movs	r2, #0
 80052cc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2200      	movs	r2, #0
 80052d8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80052dc:	2300      	movs	r3, #0
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3710      	adds	r7, #16
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}

080052e6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80052e6:	b580      	push	{r7, lr}
 80052e8:	b09c      	sub	sp, #112	; 0x70
 80052ea:	af00      	add	r7, sp, #0
 80052ec:	60f8      	str	r0, [r7, #12]
 80052ee:	60b9      	str	r1, [r7, #8]
 80052f0:	603b      	str	r3, [r7, #0]
 80052f2:	4613      	mov	r3, r2
 80052f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052f6:	e0a7      	b.n	8005448 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052fe:	f000 80a3 	beq.w	8005448 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005302:	f7fc f8f1 	bl	80014e8 <HAL_GetTick>
 8005306:	4602      	mov	r2, r0
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	1ad3      	subs	r3, r2, r3
 800530c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800530e:	429a      	cmp	r2, r3
 8005310:	d302      	bcc.n	8005318 <UART_WaitOnFlagUntilTimeout+0x32>
 8005312:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005314:	2b00      	cmp	r3, #0
 8005316:	d13f      	bne.n	8005398 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800531e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005320:	e853 3f00 	ldrex	r3, [r3]
 8005324:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005326:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005328:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800532c:	667b      	str	r3, [r7, #100]	; 0x64
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	461a      	mov	r2, r3
 8005334:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005336:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005338:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800533a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800533c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800533e:	e841 2300 	strex	r3, r2, [r1]
 8005342:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005344:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005346:	2b00      	cmp	r3, #0
 8005348:	d1e6      	bne.n	8005318 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	3308      	adds	r3, #8
 8005350:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005352:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005354:	e853 3f00 	ldrex	r3, [r3]
 8005358:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800535a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800535c:	f023 0301 	bic.w	r3, r3, #1
 8005360:	663b      	str	r3, [r7, #96]	; 0x60
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	3308      	adds	r3, #8
 8005368:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800536a:	64ba      	str	r2, [r7, #72]	; 0x48
 800536c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800536e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005370:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005372:	e841 2300 	strex	r3, r2, [r1]
 8005376:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005378:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800537a:	2b00      	cmp	r3, #0
 800537c:	d1e5      	bne.n	800534a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2220      	movs	r2, #32
 8005382:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2220      	movs	r2, #32
 8005388:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2200      	movs	r2, #0
 8005390:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005394:	2303      	movs	r3, #3
 8005396:	e068      	b.n	800546a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 0304 	and.w	r3, r3, #4
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d050      	beq.n	8005448 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	69db      	ldr	r3, [r3, #28]
 80053ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053b4:	d148      	bne.n	8005448 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80053be:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c8:	e853 3f00 	ldrex	r3, [r3]
 80053cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80053ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80053d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	461a      	mov	r2, r3
 80053dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053de:	637b      	str	r3, [r7, #52]	; 0x34
 80053e0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80053e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80053e6:	e841 2300 	strex	r3, r2, [r1]
 80053ea:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80053ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d1e6      	bne.n	80053c0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	3308      	adds	r3, #8
 80053f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	e853 3f00 	ldrex	r3, [r3]
 8005400:	613b      	str	r3, [r7, #16]
   return(result);
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	f023 0301 	bic.w	r3, r3, #1
 8005408:	66bb      	str	r3, [r7, #104]	; 0x68
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	3308      	adds	r3, #8
 8005410:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005412:	623a      	str	r2, [r7, #32]
 8005414:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005416:	69f9      	ldr	r1, [r7, #28]
 8005418:	6a3a      	ldr	r2, [r7, #32]
 800541a:	e841 2300 	strex	r3, r2, [r1]
 800541e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005420:	69bb      	ldr	r3, [r7, #24]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d1e5      	bne.n	80053f2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2220      	movs	r2, #32
 800542a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2220      	movs	r2, #32
 8005430:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2220      	movs	r2, #32
 8005438:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2200      	movs	r2, #0
 8005440:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005444:	2303      	movs	r3, #3
 8005446:	e010      	b.n	800546a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	69da      	ldr	r2, [r3, #28]
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	4013      	ands	r3, r2
 8005452:	68ba      	ldr	r2, [r7, #8]
 8005454:	429a      	cmp	r2, r3
 8005456:	bf0c      	ite	eq
 8005458:	2301      	moveq	r3, #1
 800545a:	2300      	movne	r3, #0
 800545c:	b2db      	uxtb	r3, r3
 800545e:	461a      	mov	r2, r3
 8005460:	79fb      	ldrb	r3, [r7, #7]
 8005462:	429a      	cmp	r2, r3
 8005464:	f43f af48 	beq.w	80052f8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005468:	2300      	movs	r3, #0
}
 800546a:	4618      	mov	r0, r3
 800546c:	3770      	adds	r7, #112	; 0x70
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}
	...

08005474 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005474:	b480      	push	{r7}
 8005476:	b097      	sub	sp, #92	; 0x5c
 8005478:	af00      	add	r7, sp, #0
 800547a:	60f8      	str	r0, [r7, #12]
 800547c:	60b9      	str	r1, [r7, #8]
 800547e:	4613      	mov	r3, r2
 8005480:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	68ba      	ldr	r2, [r7, #8]
 8005486:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	88fa      	ldrh	r2, [r7, #6]
 800548c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	88fa      	ldrh	r2, [r7, #6]
 8005494:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2200      	movs	r2, #0
 800549c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054a6:	d10e      	bne.n	80054c6 <UART_Start_Receive_IT+0x52>
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	691b      	ldr	r3, [r3, #16]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d105      	bne.n	80054bc <UART_Start_Receive_IT+0x48>
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80054b6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80054ba:	e02d      	b.n	8005518 <UART_Start_Receive_IT+0xa4>
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	22ff      	movs	r2, #255	; 0xff
 80054c0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80054c4:	e028      	b.n	8005518 <UART_Start_Receive_IT+0xa4>
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d10d      	bne.n	80054ea <UART_Start_Receive_IT+0x76>
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	691b      	ldr	r3, [r3, #16]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d104      	bne.n	80054e0 <UART_Start_Receive_IT+0x6c>
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	22ff      	movs	r2, #255	; 0xff
 80054da:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80054de:	e01b      	b.n	8005518 <UART_Start_Receive_IT+0xa4>
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	227f      	movs	r2, #127	; 0x7f
 80054e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80054e8:	e016      	b.n	8005518 <UART_Start_Receive_IT+0xa4>
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80054f2:	d10d      	bne.n	8005510 <UART_Start_Receive_IT+0x9c>
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	691b      	ldr	r3, [r3, #16]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d104      	bne.n	8005506 <UART_Start_Receive_IT+0x92>
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	227f      	movs	r2, #127	; 0x7f
 8005500:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005504:	e008      	b.n	8005518 <UART_Start_Receive_IT+0xa4>
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	223f      	movs	r2, #63	; 0x3f
 800550a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800550e:	e003      	b.n	8005518 <UART_Start_Receive_IT+0xa4>
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2200      	movs	r2, #0
 8005514:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2200      	movs	r2, #0
 800551c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2222      	movs	r2, #34	; 0x22
 8005524:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	3308      	adds	r3, #8
 800552e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005530:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005532:	e853 3f00 	ldrex	r3, [r3]
 8005536:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800553a:	f043 0301 	orr.w	r3, r3, #1
 800553e:	657b      	str	r3, [r7, #84]	; 0x54
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	3308      	adds	r3, #8
 8005546:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005548:	64ba      	str	r2, [r7, #72]	; 0x48
 800554a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800554c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800554e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005550:	e841 2300 	strex	r3, r2, [r1]
 8005554:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005556:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005558:	2b00      	cmp	r3, #0
 800555a:	d1e5      	bne.n	8005528 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005564:	d107      	bne.n	8005576 <UART_Start_Receive_IT+0x102>
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	691b      	ldr	r3, [r3, #16]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d103      	bne.n	8005576 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	4a21      	ldr	r2, [pc, #132]	; (80055f8 <UART_Start_Receive_IT+0x184>)
 8005572:	669a      	str	r2, [r3, #104]	; 0x68
 8005574:	e002      	b.n	800557c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	4a20      	ldr	r2, [pc, #128]	; (80055fc <UART_Start_Receive_IT+0x188>)
 800557a:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	691b      	ldr	r3, [r3, #16]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d019      	beq.n	80055b8 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800558a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800558c:	e853 3f00 	ldrex	r3, [r3]
 8005590:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005594:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005598:	64fb      	str	r3, [r7, #76]	; 0x4c
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	461a      	mov	r2, r3
 80055a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055a2:	637b      	str	r3, [r7, #52]	; 0x34
 80055a4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80055a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80055aa:	e841 2300 	strex	r3, r2, [r1]
 80055ae:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80055b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d1e6      	bne.n	8005584 <UART_Start_Receive_IT+0x110>
 80055b6:	e018      	b.n	80055ea <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	e853 3f00 	ldrex	r3, [r3]
 80055c4:	613b      	str	r3, [r7, #16]
   return(result);
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	f043 0320 	orr.w	r3, r3, #32
 80055cc:	653b      	str	r3, [r7, #80]	; 0x50
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	461a      	mov	r2, r3
 80055d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055d6:	623b      	str	r3, [r7, #32]
 80055d8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055da:	69f9      	ldr	r1, [r7, #28]
 80055dc:	6a3a      	ldr	r2, [r7, #32]
 80055de:	e841 2300 	strex	r3, r2, [r1]
 80055e2:	61bb      	str	r3, [r7, #24]
   return(result);
 80055e4:	69bb      	ldr	r3, [r7, #24]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d1e6      	bne.n	80055b8 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80055ea:	2300      	movs	r3, #0
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	375c      	adds	r7, #92	; 0x5c
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr
 80055f8:	080058af 	.word	0x080058af
 80055fc:	08005749 	.word	0x08005749

08005600 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005600:	b480      	push	{r7}
 8005602:	b095      	sub	sp, #84	; 0x54
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800560e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005610:	e853 3f00 	ldrex	r3, [r3]
 8005614:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005618:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800561c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	461a      	mov	r2, r3
 8005624:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005626:	643b      	str	r3, [r7, #64]	; 0x40
 8005628:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800562a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800562c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800562e:	e841 2300 	strex	r3, r2, [r1]
 8005632:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005636:	2b00      	cmp	r3, #0
 8005638:	d1e6      	bne.n	8005608 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	3308      	adds	r3, #8
 8005640:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005642:	6a3b      	ldr	r3, [r7, #32]
 8005644:	e853 3f00 	ldrex	r3, [r3]
 8005648:	61fb      	str	r3, [r7, #28]
   return(result);
 800564a:	69fb      	ldr	r3, [r7, #28]
 800564c:	f023 0301 	bic.w	r3, r3, #1
 8005650:	64bb      	str	r3, [r7, #72]	; 0x48
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	3308      	adds	r3, #8
 8005658:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800565a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800565c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800565e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005660:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005662:	e841 2300 	strex	r3, r2, [r1]
 8005666:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566a:	2b00      	cmp	r3, #0
 800566c:	d1e5      	bne.n	800563a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005672:	2b01      	cmp	r3, #1
 8005674:	d118      	bne.n	80056a8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	e853 3f00 	ldrex	r3, [r3]
 8005682:	60bb      	str	r3, [r7, #8]
   return(result);
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	f023 0310 	bic.w	r3, r3, #16
 800568a:	647b      	str	r3, [r7, #68]	; 0x44
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	461a      	mov	r2, r3
 8005692:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005694:	61bb      	str	r3, [r7, #24]
 8005696:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005698:	6979      	ldr	r1, [r7, #20]
 800569a:	69ba      	ldr	r2, [r7, #24]
 800569c:	e841 2300 	strex	r3, r2, [r1]
 80056a0:	613b      	str	r3, [r7, #16]
   return(result);
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d1e6      	bne.n	8005676 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2220      	movs	r2, #32
 80056ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2200      	movs	r2, #0
 80056b4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2200      	movs	r2, #0
 80056ba:	669a      	str	r2, [r3, #104]	; 0x68
}
 80056bc:	bf00      	nop
 80056be:	3754      	adds	r7, #84	; 0x54
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr

080056c8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b084      	sub	sp, #16
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2200      	movs	r2, #0
 80056da:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2200      	movs	r2, #0
 80056e2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80056e6:	68f8      	ldr	r0, [r7, #12]
 80056e8:	f7ff faaa 	bl	8004c40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80056ec:	bf00      	nop
 80056ee:	3710      	adds	r7, #16
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}

080056f4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b088      	sub	sp, #32
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	e853 3f00 	ldrex	r3, [r3]
 8005708:	60bb      	str	r3, [r7, #8]
   return(result);
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005710:	61fb      	str	r3, [r7, #28]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	461a      	mov	r2, r3
 8005718:	69fb      	ldr	r3, [r7, #28]
 800571a:	61bb      	str	r3, [r7, #24]
 800571c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800571e:	6979      	ldr	r1, [r7, #20]
 8005720:	69ba      	ldr	r2, [r7, #24]
 8005722:	e841 2300 	strex	r3, r2, [r1]
 8005726:	613b      	str	r3, [r7, #16]
   return(result);
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d1e6      	bne.n	80056fc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2220      	movs	r2, #32
 8005732:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2200      	movs	r2, #0
 8005738:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f7ff fa76 	bl	8004c2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005740:	bf00      	nop
 8005742:	3720      	adds	r7, #32
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}

08005748 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b096      	sub	sp, #88	; 0x58
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005756:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005760:	2b22      	cmp	r3, #34	; 0x22
 8005762:	f040 8098 	bne.w	8005896 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005770:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005774:	b2d9      	uxtb	r1, r3
 8005776:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800577a:	b2da      	uxtb	r2, r3
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005780:	400a      	ands	r2, r1
 8005782:	b2d2      	uxtb	r2, r2
 8005784:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800578a:	1c5a      	adds	r2, r3, #1
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005796:	b29b      	uxth	r3, r3
 8005798:	3b01      	subs	r3, #1
 800579a:	b29a      	uxth	r2, r3
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d17b      	bne.n	80058a6 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057b6:	e853 3f00 	ldrex	r3, [r3]
 80057ba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80057bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80057c2:	653b      	str	r3, [r7, #80]	; 0x50
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	461a      	mov	r2, r3
 80057ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057cc:	647b      	str	r3, [r7, #68]	; 0x44
 80057ce:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80057d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80057d4:	e841 2300 	strex	r3, r2, [r1]
 80057d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80057da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d1e6      	bne.n	80057ae <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	3308      	adds	r3, #8
 80057e6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ea:	e853 3f00 	ldrex	r3, [r3]
 80057ee:	623b      	str	r3, [r7, #32]
   return(result);
 80057f0:	6a3b      	ldr	r3, [r7, #32]
 80057f2:	f023 0301 	bic.w	r3, r3, #1
 80057f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	3308      	adds	r3, #8
 80057fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005800:	633a      	str	r2, [r7, #48]	; 0x30
 8005802:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005804:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005806:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005808:	e841 2300 	strex	r3, r2, [r1]
 800580c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800580e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005810:	2b00      	cmp	r3, #0
 8005812:	d1e5      	bne.n	80057e0 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2220      	movs	r2, #32
 8005818:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2200      	movs	r2, #0
 8005820:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2200      	movs	r2, #0
 8005826:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800582c:	2b01      	cmp	r3, #1
 800582e:	d12e      	bne.n	800588e <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2200      	movs	r2, #0
 8005834:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	e853 3f00 	ldrex	r3, [r3]
 8005842:	60fb      	str	r3, [r7, #12]
   return(result);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f023 0310 	bic.w	r3, r3, #16
 800584a:	64bb      	str	r3, [r7, #72]	; 0x48
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	461a      	mov	r2, r3
 8005852:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005854:	61fb      	str	r3, [r7, #28]
 8005856:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005858:	69b9      	ldr	r1, [r7, #24]
 800585a:	69fa      	ldr	r2, [r7, #28]
 800585c:	e841 2300 	strex	r3, r2, [r1]
 8005860:	617b      	str	r3, [r7, #20]
   return(result);
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d1e6      	bne.n	8005836 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	69db      	ldr	r3, [r3, #28]
 800586e:	f003 0310 	and.w	r3, r3, #16
 8005872:	2b10      	cmp	r3, #16
 8005874:	d103      	bne.n	800587e <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	2210      	movs	r2, #16
 800587c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005884:	4619      	mov	r1, r3
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f7ff f9e4 	bl	8004c54 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800588c:	e00b      	b.n	80058a6 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f7fa fe94 	bl	80005bc <HAL_UART_RxCpltCallback>
}
 8005894:	e007      	b.n	80058a6 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	699a      	ldr	r2, [r3, #24]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f042 0208 	orr.w	r2, r2, #8
 80058a4:	619a      	str	r2, [r3, #24]
}
 80058a6:	bf00      	nop
 80058a8:	3758      	adds	r7, #88	; 0x58
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}

080058ae <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80058ae:	b580      	push	{r7, lr}
 80058b0:	b096      	sub	sp, #88	; 0x58
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80058bc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058c6:	2b22      	cmp	r3, #34	; 0x22
 80058c8:	f040 8098 	bne.w	80059fc <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058da:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80058dc:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80058e0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80058e4:	4013      	ands	r3, r2
 80058e6:	b29a      	uxth	r2, r3
 80058e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058ea:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058f0:	1c9a      	adds	r2, r3, #2
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	3b01      	subs	r3, #1
 8005900:	b29a      	uxth	r2, r3
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800590e:	b29b      	uxth	r3, r3
 8005910:	2b00      	cmp	r3, #0
 8005912:	d17b      	bne.n	8005a0c <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800591a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800591c:	e853 3f00 	ldrex	r3, [r3]
 8005920:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005924:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005928:	64fb      	str	r3, [r7, #76]	; 0x4c
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	461a      	mov	r2, r3
 8005930:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005932:	643b      	str	r3, [r7, #64]	; 0x40
 8005934:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005936:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005938:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800593a:	e841 2300 	strex	r3, r2, [r1]
 800593e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005942:	2b00      	cmp	r3, #0
 8005944:	d1e6      	bne.n	8005914 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	3308      	adds	r3, #8
 800594c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800594e:	6a3b      	ldr	r3, [r7, #32]
 8005950:	e853 3f00 	ldrex	r3, [r3]
 8005954:	61fb      	str	r3, [r7, #28]
   return(result);
 8005956:	69fb      	ldr	r3, [r7, #28]
 8005958:	f023 0301 	bic.w	r3, r3, #1
 800595c:	64bb      	str	r3, [r7, #72]	; 0x48
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	3308      	adds	r3, #8
 8005964:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005966:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005968:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800596a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800596c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800596e:	e841 2300 	strex	r3, r2, [r1]
 8005972:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005976:	2b00      	cmp	r3, #0
 8005978:	d1e5      	bne.n	8005946 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2220      	movs	r2, #32
 800597e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2200      	movs	r2, #0
 800598c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005992:	2b01      	cmp	r3, #1
 8005994:	d12e      	bne.n	80059f4 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2200      	movs	r2, #0
 800599a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	e853 3f00 	ldrex	r3, [r3]
 80059a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	f023 0310 	bic.w	r3, r3, #16
 80059b0:	647b      	str	r3, [r7, #68]	; 0x44
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	461a      	mov	r2, r3
 80059b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059ba:	61bb      	str	r3, [r7, #24]
 80059bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059be:	6979      	ldr	r1, [r7, #20]
 80059c0:	69ba      	ldr	r2, [r7, #24]
 80059c2:	e841 2300 	strex	r3, r2, [r1]
 80059c6:	613b      	str	r3, [r7, #16]
   return(result);
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d1e6      	bne.n	800599c <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	69db      	ldr	r3, [r3, #28]
 80059d4:	f003 0310 	and.w	r3, r3, #16
 80059d8:	2b10      	cmp	r3, #16
 80059da:	d103      	bne.n	80059e4 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	2210      	movs	r2, #16
 80059e2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80059ea:	4619      	mov	r1, r3
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f7ff f931 	bl	8004c54 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80059f2:	e00b      	b.n	8005a0c <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f7fa fde1 	bl	80005bc <HAL_UART_RxCpltCallback>
}
 80059fa:	e007      	b.n	8005a0c <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	699a      	ldr	r2, [r3, #24]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f042 0208 	orr.w	r2, r2, #8
 8005a0a:	619a      	str	r2, [r3, #24]
}
 8005a0c:	bf00      	nop
 8005a0e:	3758      	adds	r7, #88	; 0x58
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}

08005a14 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005a14:	b084      	sub	sp, #16
 8005a16:	b580      	push	{r7, lr}
 8005a18:	b084      	sub	sp, #16
 8005a1a:	af00      	add	r7, sp, #0
 8005a1c:	6078      	str	r0, [r7, #4]
 8005a1e:	f107 001c 	add.w	r0, r7, #28
 8005a22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d126      	bne.n	8005a7a <USB_CoreInit+0x66>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a30:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	68da      	ldr	r2, [r3, #12]
 8005a3c:	4b38      	ldr	r3, [pc, #224]	; (8005b20 <USB_CoreInit+0x10c>)
 8005a3e:	4013      	ands	r3, r2
 8005a40:	687a      	ldr	r2, [r7, #4]
 8005a42:	60d3      	str	r3, [r2, #12]

#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	f043 0210 	orr.w	r2, r3, #16
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	60da      	str	r2, [r3, #12]
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005a5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d105      	bne.n	8005a6e <USB_CoreInit+0x5a>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	68db      	ldr	r3, [r3, #12]
 8005a66:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 fad0 	bl	8006014 <USB_CoreReset>
 8005a74:	4603      	mov	r3, r0
 8005a76:	73fb      	strb	r3, [r7, #15]
 8005a78:	e03a      	b.n	8005af0 <USB_CoreInit+0xdc>
  }
#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8005a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a7c:	2b03      	cmp	r3, #3
 8005a7e:	d126      	bne.n	8005ace <USB_CoreInit+0xba>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a84:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The UTMI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	68da      	ldr	r2, [r3, #12]
 8005a90:	4b23      	ldr	r3, [pc, #140]	; (8005b20 <USB_CoreInit+0x10c>)
 8005a92:	4013      	ands	r3, r2
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	68db      	ldr	r3, [r3, #12]
 8005a9c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	60da      	str	r2, [r3, #12]

    /* Select UTMI Interface */
    USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	f023 0210 	bic.w	r2, r3, #16
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	60da      	str	r2, [r3, #12]
    {
      return HAL_ERROR;
    }
#endif /* USBPHYC */

    if (cfg.use_external_vbus == 1U)
 8005ab0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	d105      	bne.n	8005ac2 <USB_CoreInit+0xae>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	68db      	ldr	r3, [r3, #12]
 8005aba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 faa6 	bl	8006014 <USB_CoreReset>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	73fb      	strb	r3, [r7, #15]
 8005acc:	e010      	b.n	8005af0 <USB_CoreInit+0xdc>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	68db      	ldr	r3, [r3, #12]
 8005ad2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f000 fa9a 	bl	8006014 <USB_CoreReset>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ae8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d10b      	bne.n	8005b0e <USB_CoreInit+0xfa>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	689b      	ldr	r3, [r3, #8]
 8005afa:	f043 0206 	orr.w	r2, r3, #6
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	f043 0220 	orr.w	r2, r3, #32
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005b0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3710      	adds	r7, #16
 8005b14:	46bd      	mov	sp, r7
 8005b16:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b1a:	b004      	add	sp, #16
 8005b1c:	4770      	bx	lr
 8005b1e:	bf00      	nop
 8005b20:	ffbdffbf 	.word	0xffbdffbf

08005b24 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b083      	sub	sp, #12
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	f023 0201 	bic.w	r2, r3, #1
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005b38:	2300      	movs	r3, #0
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	370c      	adds	r7, #12
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b44:	4770      	bx	lr

08005b46 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005b46:	b580      	push	{r7, lr}
 8005b48:	b084      	sub	sp, #16
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	6078      	str	r0, [r7, #4]
 8005b4e:	460b      	mov	r3, r1
 8005b50:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005b52:	2300      	movs	r3, #0
 8005b54:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	68db      	ldr	r3, [r3, #12]
 8005b5a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005b62:	78fb      	ldrb	r3, [r7, #3]
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d115      	bne.n	8005b94 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	68db      	ldr	r3, [r3, #12]
 8005b6c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005b74:	2001      	movs	r0, #1
 8005b76:	f7fb fcc3 	bl	8001500 <HAL_Delay>
      ms++;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	3301      	adds	r3, #1
 8005b7e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f000 fa39 	bl	8005ff8 <USB_GetMode>
 8005b86:	4603      	mov	r3, r0
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d01e      	beq.n	8005bca <USB_SetCurrentMode+0x84>
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2b31      	cmp	r3, #49	; 0x31
 8005b90:	d9f0      	bls.n	8005b74 <USB_SetCurrentMode+0x2e>
 8005b92:	e01a      	b.n	8005bca <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005b94:	78fb      	ldrb	r3, [r7, #3]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d115      	bne.n	8005bc6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	68db      	ldr	r3, [r3, #12]
 8005b9e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005ba6:	2001      	movs	r0, #1
 8005ba8:	f7fb fcaa 	bl	8001500 <HAL_Delay>
      ms++;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	3301      	adds	r3, #1
 8005bb0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f000 fa20 	bl	8005ff8 <USB_GetMode>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d005      	beq.n	8005bca <USB_SetCurrentMode+0x84>
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2b31      	cmp	r3, #49	; 0x31
 8005bc2:	d9f0      	bls.n	8005ba6 <USB_SetCurrentMode+0x60>
 8005bc4:	e001      	b.n	8005bca <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	e005      	b.n	8005bd6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2b32      	cmp	r3, #50	; 0x32
 8005bce:	d101      	bne.n	8005bd4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	e000      	b.n	8005bd6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005bd4:	2300      	movs	r3, #0
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3710      	adds	r7, #16
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}
	...

08005be0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005be0:	b084      	sub	sp, #16
 8005be2:	b580      	push	{r7, lr}
 8005be4:	b086      	sub	sp, #24
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	6078      	str	r0, [r7, #4]
 8005bea:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005bee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	613b      	str	r3, [r7, #16]
 8005bfe:	e009      	b.n	8005c14 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005c00:	687a      	ldr	r2, [r7, #4]
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	3340      	adds	r3, #64	; 0x40
 8005c06:	009b      	lsls	r3, r3, #2
 8005c08:	4413      	add	r3, r2
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	3301      	adds	r3, #1
 8005c12:	613b      	str	r3, [r7, #16]
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	2b0e      	cmp	r3, #14
 8005c18:	d9f2      	bls.n	8005c00 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005c1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d11c      	bne.n	8005c5a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	68fa      	ldr	r2, [r7, #12]
 8005c2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c2e:	f043 0302 	orr.w	r3, r3, #2
 8005c32:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c38:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	601a      	str	r2, [r3, #0]
 8005c58:	e005      	b.n	8005c66 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c5e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	2300      	movs	r3, #0
 8005c70:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c78:	4619      	mov	r1, r3
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c80:	461a      	mov	r2, r3
 8005c82:	680b      	ldr	r3, [r1, #0]
 8005c84:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	d10c      	bne.n	8005ca6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d104      	bne.n	8005c9c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005c92:	2100      	movs	r1, #0
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	f000 f975 	bl	8005f84 <USB_SetDevSpeed>
 8005c9a:	e018      	b.n	8005cce <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005c9c:	2101      	movs	r1, #1
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f000 f970 	bl	8005f84 <USB_SetDevSpeed>
 8005ca4:	e013      	b.n	8005cce <USB_DevInit+0xee>
    }
  }
#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8005ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ca8:	2b03      	cmp	r3, #3
 8005caa:	d10c      	bne.n	8005cc6 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d104      	bne.n	8005cbc <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005cb2:	2100      	movs	r1, #0
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f000 f965 	bl	8005f84 <USB_SetDevSpeed>
 8005cba:	e008      	b.n	8005cce <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005cbc:	2101      	movs	r1, #1
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f000 f960 	bl	8005f84 <USB_SetDevSpeed>
 8005cc4:	e003      	b.n	8005cce <USB_DevInit+0xee>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005cc6:	2103      	movs	r1, #3
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f000 f95b 	bl	8005f84 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005cce:	2110      	movs	r1, #16
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f000 f8f3 	bl	8005ebc <USB_FlushTxFifo>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d001      	beq.n	8005ce0 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f000 f91f 	bl	8005f24 <USB_FlushRxFifo>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d001      	beq.n	8005cf0 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8005cec:	2301      	movs	r3, #1
 8005cee:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d02:	461a      	mov	r2, r3
 8005d04:	2300      	movs	r3, #0
 8005d06:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d0e:	461a      	mov	r2, r3
 8005d10:	2300      	movs	r3, #0
 8005d12:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d14:	2300      	movs	r3, #0
 8005d16:	613b      	str	r3, [r7, #16]
 8005d18:	e043      	b.n	8005da2 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	015a      	lsls	r2, r3, #5
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	4413      	add	r3, r2
 8005d22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d30:	d118      	bne.n	8005d64 <USB_DevInit+0x184>
    {
      if (i == 0U)
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d10a      	bne.n	8005d4e <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	015a      	lsls	r2, r3, #5
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	4413      	add	r3, r2
 8005d40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d44:	461a      	mov	r2, r3
 8005d46:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005d4a:	6013      	str	r3, [r2, #0]
 8005d4c:	e013      	b.n	8005d76 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	015a      	lsls	r2, r3, #5
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	4413      	add	r3, r2
 8005d56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d5a:	461a      	mov	r2, r3
 8005d5c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005d60:	6013      	str	r3, [r2, #0]
 8005d62:	e008      	b.n	8005d76 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	015a      	lsls	r2, r3, #5
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	4413      	add	r3, r2
 8005d6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d70:	461a      	mov	r2, r3
 8005d72:	2300      	movs	r3, #0
 8005d74:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	015a      	lsls	r2, r3, #5
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	4413      	add	r3, r2
 8005d7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d82:	461a      	mov	r2, r3
 8005d84:	2300      	movs	r3, #0
 8005d86:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	015a      	lsls	r2, r3, #5
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	4413      	add	r3, r2
 8005d90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d94:	461a      	mov	r2, r3
 8005d96:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005d9a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	3301      	adds	r3, #1
 8005da0:	613b      	str	r3, [r7, #16]
 8005da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da4:	693a      	ldr	r2, [r7, #16]
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d3b7      	bcc.n	8005d1a <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005daa:	2300      	movs	r3, #0
 8005dac:	613b      	str	r3, [r7, #16]
 8005dae:	e043      	b.n	8005e38 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	015a      	lsls	r2, r3, #5
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	4413      	add	r3, r2
 8005db8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005dc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005dc6:	d118      	bne.n	8005dfa <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d10a      	bne.n	8005de4 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	015a      	lsls	r2, r3, #5
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	4413      	add	r3, r2
 8005dd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dda:	461a      	mov	r2, r3
 8005ddc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005de0:	6013      	str	r3, [r2, #0]
 8005de2:	e013      	b.n	8005e0c <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	015a      	lsls	r2, r3, #5
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	4413      	add	r3, r2
 8005dec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005df0:	461a      	mov	r2, r3
 8005df2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005df6:	6013      	str	r3, [r2, #0]
 8005df8:	e008      	b.n	8005e0c <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	015a      	lsls	r2, r3, #5
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	4413      	add	r3, r2
 8005e02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e06:	461a      	mov	r2, r3
 8005e08:	2300      	movs	r3, #0
 8005e0a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	015a      	lsls	r2, r3, #5
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	4413      	add	r3, r2
 8005e14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e18:	461a      	mov	r2, r3
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	015a      	lsls	r2, r3, #5
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	4413      	add	r3, r2
 8005e26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005e30:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	3301      	adds	r3, #1
 8005e36:	613b      	str	r3, [r7, #16]
 8005e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3a:	693a      	ldr	r2, [r7, #16]
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d3b7      	bcc.n	8005db0 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e46:	691b      	ldr	r3, [r3, #16]
 8005e48:	68fa      	ldr	r2, [r7, #12]
 8005e4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e4e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e52:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2200      	movs	r2, #0
 8005e58:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005e60:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d105      	bne.n	8005e74 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	699b      	ldr	r3, [r3, #24]
 8005e6c:	f043 0210 	orr.w	r2, r3, #16
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	699a      	ldr	r2, [r3, #24]
 8005e78:	4b0e      	ldr	r3, [pc, #56]	; (8005eb4 <USB_DevInit+0x2d4>)
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	687a      	ldr	r2, [r7, #4]
 8005e7e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005e80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d005      	beq.n	8005e92 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	699b      	ldr	r3, [r3, #24]
 8005e8a:	f043 0208 	orr.w	r2, r3, #8
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005e92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d105      	bne.n	8005ea4 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	699a      	ldr	r2, [r3, #24]
 8005e9c:	4b06      	ldr	r3, [pc, #24]	; (8005eb8 <USB_DevInit+0x2d8>)
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	687a      	ldr	r2, [r7, #4]
 8005ea2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005ea4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3718      	adds	r7, #24
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005eb0:	b004      	add	sp, #16
 8005eb2:	4770      	bx	lr
 8005eb4:	803c3800 	.word	0x803c3800
 8005eb8:	40000004 	.word	0x40000004

08005ebc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b085      	sub	sp, #20
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	3301      	adds	r3, #1
 8005ece:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	4a13      	ldr	r2, [pc, #76]	; (8005f20 <USB_FlushTxFifo+0x64>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d901      	bls.n	8005edc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005ed8:	2303      	movs	r3, #3
 8005eda:	e01b      	b.n	8005f14 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	691b      	ldr	r3, [r3, #16]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	daf2      	bge.n	8005eca <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	019b      	lsls	r3, r3, #6
 8005eec:	f043 0220 	orr.w	r2, r3, #32
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	3301      	adds	r3, #1
 8005ef8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	4a08      	ldr	r2, [pc, #32]	; (8005f20 <USB_FlushTxFifo+0x64>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d901      	bls.n	8005f06 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005f02:	2303      	movs	r3, #3
 8005f04:	e006      	b.n	8005f14 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	691b      	ldr	r3, [r3, #16]
 8005f0a:	f003 0320 	and.w	r3, r3, #32
 8005f0e:	2b20      	cmp	r3, #32
 8005f10:	d0f0      	beq.n	8005ef4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005f12:	2300      	movs	r3, #0
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	3714      	adds	r7, #20
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr
 8005f20:	00030d40 	.word	0x00030d40

08005f24 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b085      	sub	sp, #20
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	3301      	adds	r3, #1
 8005f34:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	4a11      	ldr	r2, [pc, #68]	; (8005f80 <USB_FlushRxFifo+0x5c>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d901      	bls.n	8005f42 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005f3e:	2303      	movs	r3, #3
 8005f40:	e018      	b.n	8005f74 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	691b      	ldr	r3, [r3, #16]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	daf2      	bge.n	8005f30 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2210      	movs	r2, #16
 8005f52:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	3301      	adds	r3, #1
 8005f58:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	4a08      	ldr	r2, [pc, #32]	; (8005f80 <USB_FlushRxFifo+0x5c>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d901      	bls.n	8005f66 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005f62:	2303      	movs	r3, #3
 8005f64:	e006      	b.n	8005f74 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	691b      	ldr	r3, [r3, #16]
 8005f6a:	f003 0310 	and.w	r3, r3, #16
 8005f6e:	2b10      	cmp	r3, #16
 8005f70:	d0f0      	beq.n	8005f54 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005f72:	2300      	movs	r3, #0
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	3714      	adds	r7, #20
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr
 8005f80:	00030d40 	.word	0x00030d40

08005f84 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b085      	sub	sp, #20
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
 8005f8c:	460b      	mov	r3, r1
 8005f8e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f9a:	681a      	ldr	r2, [r3, #0]
 8005f9c:	78fb      	ldrb	r3, [r7, #3]
 8005f9e:	68f9      	ldr	r1, [r7, #12]
 8005fa0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005fa8:	2300      	movs	r3, #0
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3714      	adds	r7, #20
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb4:	4770      	bx	lr

08005fb6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005fb6:	b480      	push	{r7}
 8005fb8:	b085      	sub	sp, #20
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	68fa      	ldr	r2, [r7, #12]
 8005fcc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005fd0:	f023 0303 	bic.w	r3, r3, #3
 8005fd4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	68fa      	ldr	r2, [r7, #12]
 8005fe0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005fe4:	f043 0302 	orr.w	r3, r3, #2
 8005fe8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005fea:	2300      	movs	r3, #0
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	3714      	adds	r7, #20
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff6:	4770      	bx	lr

08005ff8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b083      	sub	sp, #12
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	695b      	ldr	r3, [r3, #20]
 8006004:	f003 0301 	and.w	r3, r3, #1
}
 8006008:	4618      	mov	r0, r3
 800600a:	370c      	adds	r7, #12
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr

08006014 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006014:	b480      	push	{r7}
 8006016:	b085      	sub	sp, #20
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800601c:	2300      	movs	r3, #0
 800601e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	3301      	adds	r3, #1
 8006024:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	4a13      	ldr	r2, [pc, #76]	; (8006078 <USB_CoreReset+0x64>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d901      	bls.n	8006032 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800602e:	2303      	movs	r3, #3
 8006030:	e01b      	b.n	800606a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	691b      	ldr	r3, [r3, #16]
 8006036:	2b00      	cmp	r3, #0
 8006038:	daf2      	bge.n	8006020 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800603a:	2300      	movs	r3, #0
 800603c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	691b      	ldr	r3, [r3, #16]
 8006042:	f043 0201 	orr.w	r2, r3, #1
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	3301      	adds	r3, #1
 800604e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	4a09      	ldr	r2, [pc, #36]	; (8006078 <USB_CoreReset+0x64>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d901      	bls.n	800605c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006058:	2303      	movs	r3, #3
 800605a:	e006      	b.n	800606a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	691b      	ldr	r3, [r3, #16]
 8006060:	f003 0301 	and.w	r3, r3, #1
 8006064:	2b01      	cmp	r3, #1
 8006066:	d0f0      	beq.n	800604a <USB_CoreReset+0x36>

  return HAL_OK;
 8006068:	2300      	movs	r3, #0
}
 800606a:	4618      	mov	r0, r3
 800606c:	3714      	adds	r7, #20
 800606e:	46bd      	mov	sp, r7
 8006070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006074:	4770      	bx	lr
 8006076:	bf00      	nop
 8006078:	00030d40 	.word	0x00030d40

0800607c <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 800607c:	b480      	push	{r7}
 800607e:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8006080:	bf00      	nop
 8006082:	46bd      	mov	sp, r7
 8006084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006088:	4770      	bx	lr
	...

0800608c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 800608c:	b580      	push	{r7, lr}
 800608e:	b086      	sub	sp, #24
 8006090:	af04      	add	r7, sp, #16
 8006092:	4603      	mov	r3, r0
 8006094:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8006096:	f04f 33ff 	mov.w	r3, #4294967295
 800609a:	9302      	str	r3, [sp, #8]
 800609c:	2301      	movs	r3, #1
 800609e:	9301      	str	r3, [sp, #4]
 80060a0:	1dfb      	adds	r3, r7, #7
 80060a2:	9300      	str	r3, [sp, #0]
 80060a4:	2301      	movs	r3, #1
 80060a6:	2200      	movs	r2, #0
 80060a8:	2178      	movs	r1, #120	; 0x78
 80060aa:	4803      	ldr	r0, [pc, #12]	; (80060b8 <ssd1306_WriteCommand+0x2c>)
 80060ac:	f7fb fe50 	bl	8001d50 <HAL_I2C_Mem_Write>
}
 80060b0:	bf00      	nop
 80060b2:	3708      	adds	r7, #8
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}
 80060b8:	20000080 	.word	0x20000080

080060bc <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80060bc:	b580      	push	{r7, lr}
 80060be:	b086      	sub	sp, #24
 80060c0:	af04      	add	r7, sp, #16
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	f04f 32ff 	mov.w	r2, #4294967295
 80060ce:	9202      	str	r2, [sp, #8]
 80060d0:	9301      	str	r3, [sp, #4]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	9300      	str	r3, [sp, #0]
 80060d6:	2301      	movs	r3, #1
 80060d8:	2240      	movs	r2, #64	; 0x40
 80060da:	2178      	movs	r1, #120	; 0x78
 80060dc:	4803      	ldr	r0, [pc, #12]	; (80060ec <ssd1306_WriteData+0x30>)
 80060de:	f7fb fe37 	bl	8001d50 <HAL_I2C_Mem_Write>
}
 80060e2:	bf00      	nop
 80060e4:	3708      	adds	r7, #8
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}
 80060ea:	bf00      	nop
 80060ec:	20000080 	.word	0x20000080

080060f0 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80060f0:	b580      	push	{r7, lr}
 80060f2:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80060f4:	f7ff ffc2 	bl	800607c <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80060f8:	2064      	movs	r0, #100	; 0x64
 80060fa:	f7fb fa01 	bl	8001500 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80060fe:	2000      	movs	r0, #0
 8006100:	f000 f9da 	bl	80064b8 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8006104:	2020      	movs	r0, #32
 8006106:	f7ff ffc1 	bl	800608c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800610a:	2000      	movs	r0, #0
 800610c:	f7ff ffbe 	bl	800608c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8006110:	20b0      	movs	r0, #176	; 0xb0
 8006112:	f7ff ffbb 	bl	800608c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8006116:	20c8      	movs	r0, #200	; 0xc8
 8006118:	f7ff ffb8 	bl	800608c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 800611c:	2000      	movs	r0, #0
 800611e:	f7ff ffb5 	bl	800608c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8006122:	2010      	movs	r0, #16
 8006124:	f7ff ffb2 	bl	800608c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8006128:	2040      	movs	r0, #64	; 0x40
 800612a:	f7ff ffaf 	bl	800608c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800612e:	20ff      	movs	r0, #255	; 0xff
 8006130:	f000 f9ae 	bl	8006490 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8006134:	20a1      	movs	r0, #161	; 0xa1
 8006136:	f7ff ffa9 	bl	800608c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800613a:	20a6      	movs	r0, #166	; 0xa6
 800613c:	f7ff ffa6 	bl	800608c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8006140:	20a8      	movs	r0, #168	; 0xa8
 8006142:	f7ff ffa3 	bl	800608c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 8006146:	201f      	movs	r0, #31
 8006148:	f7ff ffa0 	bl	800608c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800614c:	20a4      	movs	r0, #164	; 0xa4
 800614e:	f7ff ff9d 	bl	800608c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8006152:	20d3      	movs	r0, #211	; 0xd3
 8006154:	f7ff ff9a 	bl	800608c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8006158:	2000      	movs	r0, #0
 800615a:	f7ff ff97 	bl	800608c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800615e:	20d5      	movs	r0, #213	; 0xd5
 8006160:	f7ff ff94 	bl	800608c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8006164:	20f0      	movs	r0, #240	; 0xf0
 8006166:	f7ff ff91 	bl	800608c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800616a:	20d9      	movs	r0, #217	; 0xd9
 800616c:	f7ff ff8e 	bl	800608c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8006170:	2022      	movs	r0, #34	; 0x22
 8006172:	f7ff ff8b 	bl	800608c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8006176:	20da      	movs	r0, #218	; 0xda
 8006178:	f7ff ff88 	bl	800608c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 800617c:	2002      	movs	r0, #2
 800617e:	f7ff ff85 	bl	800608c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8006182:	20db      	movs	r0, #219	; 0xdb
 8006184:	f7ff ff82 	bl	800608c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8006188:	2020      	movs	r0, #32
 800618a:	f7ff ff7f 	bl	800608c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800618e:	208d      	movs	r0, #141	; 0x8d
 8006190:	f7ff ff7c 	bl	800608c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8006194:	2014      	movs	r0, #20
 8006196:	f7ff ff79 	bl	800608c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800619a:	2001      	movs	r0, #1
 800619c:	f000 f98c 	bl	80064b8 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80061a0:	2000      	movs	r0, #0
 80061a2:	f000 f80f 	bl	80061c4 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80061a6:	f000 f831 	bl	800620c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80061aa:	4b05      	ldr	r3, [pc, #20]	; (80061c0 <ssd1306_Init+0xd0>)
 80061ac:	2200      	movs	r2, #0
 80061ae:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80061b0:	4b03      	ldr	r3, [pc, #12]	; (80061c0 <ssd1306_Init+0xd0>)
 80061b2:	2200      	movs	r2, #0
 80061b4:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80061b6:	4b02      	ldr	r3, [pc, #8]	; (80061c0 <ssd1306_Init+0xd0>)
 80061b8:	2201      	movs	r2, #1
 80061ba:	711a      	strb	r2, [r3, #4]
}
 80061bc:	bf00      	nop
 80061be:	bd80      	pop	{r7, pc}
 80061c0:	20000a54 	.word	0x20000a54

080061c4 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80061c4:	b480      	push	{r7}
 80061c6:	b085      	sub	sp, #20
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	4603      	mov	r3, r0
 80061cc:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80061ce:	2300      	movs	r3, #0
 80061d0:	60fb      	str	r3, [r7, #12]
 80061d2:	e00d      	b.n	80061f0 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80061d4:	79fb      	ldrb	r3, [r7, #7]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d101      	bne.n	80061de <ssd1306_Fill+0x1a>
 80061da:	2100      	movs	r1, #0
 80061dc:	e000      	b.n	80061e0 <ssd1306_Fill+0x1c>
 80061de:	21ff      	movs	r1, #255	; 0xff
 80061e0:	4a09      	ldr	r2, [pc, #36]	; (8006208 <ssd1306_Fill+0x44>)
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	4413      	add	r3, r2
 80061e6:	460a      	mov	r2, r1
 80061e8:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	3301      	adds	r3, #1
 80061ee:	60fb      	str	r3, [r7, #12]
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061f6:	d3ed      	bcc.n	80061d4 <ssd1306_Fill+0x10>
    }
}
 80061f8:	bf00      	nop
 80061fa:	bf00      	nop
 80061fc:	3714      	adds	r7, #20
 80061fe:	46bd      	mov	sp, r7
 8006200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006204:	4770      	bx	lr
 8006206:	bf00      	nop
 8006208:	20000854 	.word	0x20000854

0800620c <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 800620c:	b580      	push	{r7, lr}
 800620e:	b082      	sub	sp, #8
 8006210:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8006212:	2300      	movs	r3, #0
 8006214:	71fb      	strb	r3, [r7, #7]
 8006216:	e016      	b.n	8006246 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8006218:	79fb      	ldrb	r3, [r7, #7]
 800621a:	3b50      	subs	r3, #80	; 0x50
 800621c:	b2db      	uxtb	r3, r3
 800621e:	4618      	mov	r0, r3
 8006220:	f7ff ff34 	bl	800608c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8006224:	2000      	movs	r0, #0
 8006226:	f7ff ff31 	bl	800608c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800622a:	2010      	movs	r0, #16
 800622c:	f7ff ff2e 	bl	800608c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8006230:	79fb      	ldrb	r3, [r7, #7]
 8006232:	01db      	lsls	r3, r3, #7
 8006234:	4a08      	ldr	r2, [pc, #32]	; (8006258 <ssd1306_UpdateScreen+0x4c>)
 8006236:	4413      	add	r3, r2
 8006238:	2180      	movs	r1, #128	; 0x80
 800623a:	4618      	mov	r0, r3
 800623c:	f7ff ff3e 	bl	80060bc <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8006240:	79fb      	ldrb	r3, [r7, #7]
 8006242:	3301      	adds	r3, #1
 8006244:	71fb      	strb	r3, [r7, #7]
 8006246:	79fb      	ldrb	r3, [r7, #7]
 8006248:	2b03      	cmp	r3, #3
 800624a:	d9e5      	bls.n	8006218 <ssd1306_UpdateScreen+0xc>
    }
}
 800624c:	bf00      	nop
 800624e:	bf00      	nop
 8006250:	3708      	adds	r7, #8
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}
 8006256:	bf00      	nop
 8006258:	20000854 	.word	0x20000854

0800625c <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 800625c:	b480      	push	{r7}
 800625e:	b083      	sub	sp, #12
 8006260:	af00      	add	r7, sp, #0
 8006262:	4603      	mov	r3, r0
 8006264:	71fb      	strb	r3, [r7, #7]
 8006266:	460b      	mov	r3, r1
 8006268:	71bb      	strb	r3, [r7, #6]
 800626a:	4613      	mov	r3, r2
 800626c:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800626e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006272:	2b00      	cmp	r3, #0
 8006274:	db3d      	blt.n	80062f2 <ssd1306_DrawPixel+0x96>
 8006276:	79bb      	ldrb	r3, [r7, #6]
 8006278:	2b1f      	cmp	r3, #31
 800627a:	d83a      	bhi.n	80062f2 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 800627c:	797b      	ldrb	r3, [r7, #5]
 800627e:	2b01      	cmp	r3, #1
 8006280:	d11a      	bne.n	80062b8 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8006282:	79fa      	ldrb	r2, [r7, #7]
 8006284:	79bb      	ldrb	r3, [r7, #6]
 8006286:	08db      	lsrs	r3, r3, #3
 8006288:	b2d8      	uxtb	r0, r3
 800628a:	4603      	mov	r3, r0
 800628c:	01db      	lsls	r3, r3, #7
 800628e:	4413      	add	r3, r2
 8006290:	4a1b      	ldr	r2, [pc, #108]	; (8006300 <ssd1306_DrawPixel+0xa4>)
 8006292:	5cd3      	ldrb	r3, [r2, r3]
 8006294:	b25a      	sxtb	r2, r3
 8006296:	79bb      	ldrb	r3, [r7, #6]
 8006298:	f003 0307 	and.w	r3, r3, #7
 800629c:	2101      	movs	r1, #1
 800629e:	fa01 f303 	lsl.w	r3, r1, r3
 80062a2:	b25b      	sxtb	r3, r3
 80062a4:	4313      	orrs	r3, r2
 80062a6:	b259      	sxtb	r1, r3
 80062a8:	79fa      	ldrb	r2, [r7, #7]
 80062aa:	4603      	mov	r3, r0
 80062ac:	01db      	lsls	r3, r3, #7
 80062ae:	4413      	add	r3, r2
 80062b0:	b2c9      	uxtb	r1, r1
 80062b2:	4a13      	ldr	r2, [pc, #76]	; (8006300 <ssd1306_DrawPixel+0xa4>)
 80062b4:	54d1      	strb	r1, [r2, r3]
 80062b6:	e01d      	b.n	80062f4 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80062b8:	79fa      	ldrb	r2, [r7, #7]
 80062ba:	79bb      	ldrb	r3, [r7, #6]
 80062bc:	08db      	lsrs	r3, r3, #3
 80062be:	b2d8      	uxtb	r0, r3
 80062c0:	4603      	mov	r3, r0
 80062c2:	01db      	lsls	r3, r3, #7
 80062c4:	4413      	add	r3, r2
 80062c6:	4a0e      	ldr	r2, [pc, #56]	; (8006300 <ssd1306_DrawPixel+0xa4>)
 80062c8:	5cd3      	ldrb	r3, [r2, r3]
 80062ca:	b25a      	sxtb	r2, r3
 80062cc:	79bb      	ldrb	r3, [r7, #6]
 80062ce:	f003 0307 	and.w	r3, r3, #7
 80062d2:	2101      	movs	r1, #1
 80062d4:	fa01 f303 	lsl.w	r3, r1, r3
 80062d8:	b25b      	sxtb	r3, r3
 80062da:	43db      	mvns	r3, r3
 80062dc:	b25b      	sxtb	r3, r3
 80062de:	4013      	ands	r3, r2
 80062e0:	b259      	sxtb	r1, r3
 80062e2:	79fa      	ldrb	r2, [r7, #7]
 80062e4:	4603      	mov	r3, r0
 80062e6:	01db      	lsls	r3, r3, #7
 80062e8:	4413      	add	r3, r2
 80062ea:	b2c9      	uxtb	r1, r1
 80062ec:	4a04      	ldr	r2, [pc, #16]	; (8006300 <ssd1306_DrawPixel+0xa4>)
 80062ee:	54d1      	strb	r1, [r2, r3]
 80062f0:	e000      	b.n	80062f4 <ssd1306_DrawPixel+0x98>
        return;
 80062f2:	bf00      	nop
    }
}
 80062f4:	370c      	adds	r7, #12
 80062f6:	46bd      	mov	sp, r7
 80062f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fc:	4770      	bx	lr
 80062fe:	bf00      	nop
 8006300:	20000854 	.word	0x20000854

08006304 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8006304:	b590      	push	{r4, r7, lr}
 8006306:	b089      	sub	sp, #36	; 0x24
 8006308:	af00      	add	r7, sp, #0
 800630a:	4604      	mov	r4, r0
 800630c:	1d38      	adds	r0, r7, #4
 800630e:	e880 0006 	stmia.w	r0, {r1, r2}
 8006312:	461a      	mov	r2, r3
 8006314:	4623      	mov	r3, r4
 8006316:	73fb      	strb	r3, [r7, #15]
 8006318:	4613      	mov	r3, r2
 800631a:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 800631c:	7bfb      	ldrb	r3, [r7, #15]
 800631e:	2b1f      	cmp	r3, #31
 8006320:	d902      	bls.n	8006328 <ssd1306_WriteChar+0x24>
 8006322:	7bfb      	ldrb	r3, [r7, #15]
 8006324:	2b7e      	cmp	r3, #126	; 0x7e
 8006326:	d901      	bls.n	800632c <ssd1306_WriteChar+0x28>
        return 0;
 8006328:	2300      	movs	r3, #0
 800632a:	e06d      	b.n	8006408 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800632c:	4b38      	ldr	r3, [pc, #224]	; (8006410 <ssd1306_WriteChar+0x10c>)
 800632e:	881b      	ldrh	r3, [r3, #0]
 8006330:	461a      	mov	r2, r3
 8006332:	793b      	ldrb	r3, [r7, #4]
 8006334:	4413      	add	r3, r2
 8006336:	2b80      	cmp	r3, #128	; 0x80
 8006338:	dc06      	bgt.n	8006348 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 800633a:	4b35      	ldr	r3, [pc, #212]	; (8006410 <ssd1306_WriteChar+0x10c>)
 800633c:	885b      	ldrh	r3, [r3, #2]
 800633e:	461a      	mov	r2, r3
 8006340:	797b      	ldrb	r3, [r7, #5]
 8006342:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8006344:	2b20      	cmp	r3, #32
 8006346:	dd01      	ble.n	800634c <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8006348:	2300      	movs	r3, #0
 800634a:	e05d      	b.n	8006408 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 800634c:	2300      	movs	r3, #0
 800634e:	61fb      	str	r3, [r7, #28]
 8006350:	e04c      	b.n	80063ec <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8006352:	68ba      	ldr	r2, [r7, #8]
 8006354:	7bfb      	ldrb	r3, [r7, #15]
 8006356:	3b20      	subs	r3, #32
 8006358:	7979      	ldrb	r1, [r7, #5]
 800635a:	fb01 f303 	mul.w	r3, r1, r3
 800635e:	4619      	mov	r1, r3
 8006360:	69fb      	ldr	r3, [r7, #28]
 8006362:	440b      	add	r3, r1
 8006364:	005b      	lsls	r3, r3, #1
 8006366:	4413      	add	r3, r2
 8006368:	881b      	ldrh	r3, [r3, #0]
 800636a:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 800636c:	2300      	movs	r3, #0
 800636e:	61bb      	str	r3, [r7, #24]
 8006370:	e034      	b.n	80063dc <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8006372:	697a      	ldr	r2, [r7, #20]
 8006374:	69bb      	ldr	r3, [r7, #24]
 8006376:	fa02 f303 	lsl.w	r3, r2, r3
 800637a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800637e:	2b00      	cmp	r3, #0
 8006380:	d012      	beq.n	80063a8 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8006382:	4b23      	ldr	r3, [pc, #140]	; (8006410 <ssd1306_WriteChar+0x10c>)
 8006384:	881b      	ldrh	r3, [r3, #0]
 8006386:	b2da      	uxtb	r2, r3
 8006388:	69bb      	ldr	r3, [r7, #24]
 800638a:	b2db      	uxtb	r3, r3
 800638c:	4413      	add	r3, r2
 800638e:	b2d8      	uxtb	r0, r3
 8006390:	4b1f      	ldr	r3, [pc, #124]	; (8006410 <ssd1306_WriteChar+0x10c>)
 8006392:	885b      	ldrh	r3, [r3, #2]
 8006394:	b2da      	uxtb	r2, r3
 8006396:	69fb      	ldr	r3, [r7, #28]
 8006398:	b2db      	uxtb	r3, r3
 800639a:	4413      	add	r3, r2
 800639c:	b2db      	uxtb	r3, r3
 800639e:	7bba      	ldrb	r2, [r7, #14]
 80063a0:	4619      	mov	r1, r3
 80063a2:	f7ff ff5b 	bl	800625c <ssd1306_DrawPixel>
 80063a6:	e016      	b.n	80063d6 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80063a8:	4b19      	ldr	r3, [pc, #100]	; (8006410 <ssd1306_WriteChar+0x10c>)
 80063aa:	881b      	ldrh	r3, [r3, #0]
 80063ac:	b2da      	uxtb	r2, r3
 80063ae:	69bb      	ldr	r3, [r7, #24]
 80063b0:	b2db      	uxtb	r3, r3
 80063b2:	4413      	add	r3, r2
 80063b4:	b2d8      	uxtb	r0, r3
 80063b6:	4b16      	ldr	r3, [pc, #88]	; (8006410 <ssd1306_WriteChar+0x10c>)
 80063b8:	885b      	ldrh	r3, [r3, #2]
 80063ba:	b2da      	uxtb	r2, r3
 80063bc:	69fb      	ldr	r3, [r7, #28]
 80063be:	b2db      	uxtb	r3, r3
 80063c0:	4413      	add	r3, r2
 80063c2:	b2d9      	uxtb	r1, r3
 80063c4:	7bbb      	ldrb	r3, [r7, #14]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	bf0c      	ite	eq
 80063ca:	2301      	moveq	r3, #1
 80063cc:	2300      	movne	r3, #0
 80063ce:	b2db      	uxtb	r3, r3
 80063d0:	461a      	mov	r2, r3
 80063d2:	f7ff ff43 	bl	800625c <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80063d6:	69bb      	ldr	r3, [r7, #24]
 80063d8:	3301      	adds	r3, #1
 80063da:	61bb      	str	r3, [r7, #24]
 80063dc:	793b      	ldrb	r3, [r7, #4]
 80063de:	461a      	mov	r2, r3
 80063e0:	69bb      	ldr	r3, [r7, #24]
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d3c5      	bcc.n	8006372 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 80063e6:	69fb      	ldr	r3, [r7, #28]
 80063e8:	3301      	adds	r3, #1
 80063ea:	61fb      	str	r3, [r7, #28]
 80063ec:	797b      	ldrb	r3, [r7, #5]
 80063ee:	461a      	mov	r2, r3
 80063f0:	69fb      	ldr	r3, [r7, #28]
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d3ad      	bcc.n	8006352 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80063f6:	4b06      	ldr	r3, [pc, #24]	; (8006410 <ssd1306_WriteChar+0x10c>)
 80063f8:	881a      	ldrh	r2, [r3, #0]
 80063fa:	793b      	ldrb	r3, [r7, #4]
 80063fc:	b29b      	uxth	r3, r3
 80063fe:	4413      	add	r3, r2
 8006400:	b29a      	uxth	r2, r3
 8006402:	4b03      	ldr	r3, [pc, #12]	; (8006410 <ssd1306_WriteChar+0x10c>)
 8006404:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8006406:	7bfb      	ldrb	r3, [r7, #15]
}
 8006408:	4618      	mov	r0, r3
 800640a:	3724      	adds	r7, #36	; 0x24
 800640c:	46bd      	mov	sp, r7
 800640e:	bd90      	pop	{r4, r7, pc}
 8006410:	20000a54 	.word	0x20000a54

08006414 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8006414:	b580      	push	{r7, lr}
 8006416:	b084      	sub	sp, #16
 8006418:	af00      	add	r7, sp, #0
 800641a:	60f8      	str	r0, [r7, #12]
 800641c:	1d38      	adds	r0, r7, #4
 800641e:	e880 0006 	stmia.w	r0, {r1, r2}
 8006422:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8006424:	e012      	b.n	800644c <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	7818      	ldrb	r0, [r3, #0]
 800642a:	78fb      	ldrb	r3, [r7, #3]
 800642c:	1d3a      	adds	r2, r7, #4
 800642e:	ca06      	ldmia	r2, {r1, r2}
 8006430:	f7ff ff68 	bl	8006304 <ssd1306_WriteChar>
 8006434:	4603      	mov	r3, r0
 8006436:	461a      	mov	r2, r3
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	781b      	ldrb	r3, [r3, #0]
 800643c:	429a      	cmp	r2, r3
 800643e:	d002      	beq.n	8006446 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	781b      	ldrb	r3, [r3, #0]
 8006444:	e008      	b.n	8006458 <ssd1306_WriteString+0x44>
        }
        str++;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	3301      	adds	r3, #1
 800644a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	781b      	ldrb	r3, [r3, #0]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d1e8      	bne.n	8006426 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	781b      	ldrb	r3, [r3, #0]
}
 8006458:	4618      	mov	r0, r3
 800645a:	3710      	adds	r7, #16
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}

08006460 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8006460:	b480      	push	{r7}
 8006462:	b083      	sub	sp, #12
 8006464:	af00      	add	r7, sp, #0
 8006466:	4603      	mov	r3, r0
 8006468:	460a      	mov	r2, r1
 800646a:	71fb      	strb	r3, [r7, #7]
 800646c:	4613      	mov	r3, r2
 800646e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8006470:	79fb      	ldrb	r3, [r7, #7]
 8006472:	b29a      	uxth	r2, r3
 8006474:	4b05      	ldr	r3, [pc, #20]	; (800648c <ssd1306_SetCursor+0x2c>)
 8006476:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8006478:	79bb      	ldrb	r3, [r7, #6]
 800647a:	b29a      	uxth	r2, r3
 800647c:	4b03      	ldr	r3, [pc, #12]	; (800648c <ssd1306_SetCursor+0x2c>)
 800647e:	805a      	strh	r2, [r3, #2]
}
 8006480:	bf00      	nop
 8006482:	370c      	adds	r7, #12
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr
 800648c:	20000a54 	.word	0x20000a54

08006490 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8006490:	b580      	push	{r7, lr}
 8006492:	b084      	sub	sp, #16
 8006494:	af00      	add	r7, sp, #0
 8006496:	4603      	mov	r3, r0
 8006498:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800649a:	2381      	movs	r3, #129	; 0x81
 800649c:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800649e:	7bfb      	ldrb	r3, [r7, #15]
 80064a0:	4618      	mov	r0, r3
 80064a2:	f7ff fdf3 	bl	800608c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80064a6:	79fb      	ldrb	r3, [r7, #7]
 80064a8:	4618      	mov	r0, r3
 80064aa:	f7ff fdef 	bl	800608c <ssd1306_WriteCommand>
}
 80064ae:	bf00      	nop
 80064b0:	3710      	adds	r7, #16
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}
	...

080064b8 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b084      	sub	sp, #16
 80064bc:	af00      	add	r7, sp, #0
 80064be:	4603      	mov	r3, r0
 80064c0:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80064c2:	79fb      	ldrb	r3, [r7, #7]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d005      	beq.n	80064d4 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80064c8:	23af      	movs	r3, #175	; 0xaf
 80064ca:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80064cc:	4b08      	ldr	r3, [pc, #32]	; (80064f0 <ssd1306_SetDisplayOn+0x38>)
 80064ce:	2201      	movs	r2, #1
 80064d0:	715a      	strb	r2, [r3, #5]
 80064d2:	e004      	b.n	80064de <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80064d4:	23ae      	movs	r3, #174	; 0xae
 80064d6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80064d8:	4b05      	ldr	r3, [pc, #20]	; (80064f0 <ssd1306_SetDisplayOn+0x38>)
 80064da:	2200      	movs	r2, #0
 80064dc:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80064de:	7bfb      	ldrb	r3, [r7, #15]
 80064e0:	4618      	mov	r0, r3
 80064e2:	f7ff fdd3 	bl	800608c <ssd1306_WriteCommand>
}
 80064e6:	bf00      	nop
 80064e8:	3710      	adds	r7, #16
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}
 80064ee:	bf00      	nop
 80064f0:	20000a54 	.word	0x20000a54

080064f4 <siprintf>:
 80064f4:	b40e      	push	{r1, r2, r3}
 80064f6:	b500      	push	{lr}
 80064f8:	b09c      	sub	sp, #112	; 0x70
 80064fa:	ab1d      	add	r3, sp, #116	; 0x74
 80064fc:	9002      	str	r0, [sp, #8]
 80064fe:	9006      	str	r0, [sp, #24]
 8006500:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006504:	4809      	ldr	r0, [pc, #36]	; (800652c <siprintf+0x38>)
 8006506:	9107      	str	r1, [sp, #28]
 8006508:	9104      	str	r1, [sp, #16]
 800650a:	4909      	ldr	r1, [pc, #36]	; (8006530 <siprintf+0x3c>)
 800650c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006510:	9105      	str	r1, [sp, #20]
 8006512:	6800      	ldr	r0, [r0, #0]
 8006514:	9301      	str	r3, [sp, #4]
 8006516:	a902      	add	r1, sp, #8
 8006518:	f000 f9a0 	bl	800685c <_svfiprintf_r>
 800651c:	9b02      	ldr	r3, [sp, #8]
 800651e:	2200      	movs	r2, #0
 8006520:	701a      	strb	r2, [r3, #0]
 8006522:	b01c      	add	sp, #112	; 0x70
 8006524:	f85d eb04 	ldr.w	lr, [sp], #4
 8006528:	b003      	add	sp, #12
 800652a:	4770      	bx	lr
 800652c:	20000060 	.word	0x20000060
 8006530:	ffff0208 	.word	0xffff0208

08006534 <memset>:
 8006534:	4402      	add	r2, r0
 8006536:	4603      	mov	r3, r0
 8006538:	4293      	cmp	r3, r2
 800653a:	d100      	bne.n	800653e <memset+0xa>
 800653c:	4770      	bx	lr
 800653e:	f803 1b01 	strb.w	r1, [r3], #1
 8006542:	e7f9      	b.n	8006538 <memset+0x4>

08006544 <__errno>:
 8006544:	4b01      	ldr	r3, [pc, #4]	; (800654c <__errno+0x8>)
 8006546:	6818      	ldr	r0, [r3, #0]
 8006548:	4770      	bx	lr
 800654a:	bf00      	nop
 800654c:	20000060 	.word	0x20000060

08006550 <__libc_init_array>:
 8006550:	b570      	push	{r4, r5, r6, lr}
 8006552:	4d0d      	ldr	r5, [pc, #52]	; (8006588 <__libc_init_array+0x38>)
 8006554:	4c0d      	ldr	r4, [pc, #52]	; (800658c <__libc_init_array+0x3c>)
 8006556:	1b64      	subs	r4, r4, r5
 8006558:	10a4      	asrs	r4, r4, #2
 800655a:	2600      	movs	r6, #0
 800655c:	42a6      	cmp	r6, r4
 800655e:	d109      	bne.n	8006574 <__libc_init_array+0x24>
 8006560:	4d0b      	ldr	r5, [pc, #44]	; (8006590 <__libc_init_array+0x40>)
 8006562:	4c0c      	ldr	r4, [pc, #48]	; (8006594 <__libc_init_array+0x44>)
 8006564:	f000 fc6a 	bl	8006e3c <_init>
 8006568:	1b64      	subs	r4, r4, r5
 800656a:	10a4      	asrs	r4, r4, #2
 800656c:	2600      	movs	r6, #0
 800656e:	42a6      	cmp	r6, r4
 8006570:	d105      	bne.n	800657e <__libc_init_array+0x2e>
 8006572:	bd70      	pop	{r4, r5, r6, pc}
 8006574:	f855 3b04 	ldr.w	r3, [r5], #4
 8006578:	4798      	blx	r3
 800657a:	3601      	adds	r6, #1
 800657c:	e7ee      	b.n	800655c <__libc_init_array+0xc>
 800657e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006582:	4798      	blx	r3
 8006584:	3601      	adds	r6, #1
 8006586:	e7f2      	b.n	800656e <__libc_init_array+0x1e>
 8006588:	080074dc 	.word	0x080074dc
 800658c:	080074dc 	.word	0x080074dc
 8006590:	080074dc 	.word	0x080074dc
 8006594:	080074e0 	.word	0x080074e0

08006598 <__retarget_lock_acquire_recursive>:
 8006598:	4770      	bx	lr

0800659a <__retarget_lock_release_recursive>:
 800659a:	4770      	bx	lr

0800659c <memcpy>:
 800659c:	440a      	add	r2, r1
 800659e:	4291      	cmp	r1, r2
 80065a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80065a4:	d100      	bne.n	80065a8 <memcpy+0xc>
 80065a6:	4770      	bx	lr
 80065a8:	b510      	push	{r4, lr}
 80065aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80065b2:	4291      	cmp	r1, r2
 80065b4:	d1f9      	bne.n	80065aa <memcpy+0xe>
 80065b6:	bd10      	pop	{r4, pc}

080065b8 <_free_r>:
 80065b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80065ba:	2900      	cmp	r1, #0
 80065bc:	d044      	beq.n	8006648 <_free_r+0x90>
 80065be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065c2:	9001      	str	r0, [sp, #4]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	f1a1 0404 	sub.w	r4, r1, #4
 80065ca:	bfb8      	it	lt
 80065cc:	18e4      	addlt	r4, r4, r3
 80065ce:	f000 f8df 	bl	8006790 <__malloc_lock>
 80065d2:	4a1e      	ldr	r2, [pc, #120]	; (800664c <_free_r+0x94>)
 80065d4:	9801      	ldr	r0, [sp, #4]
 80065d6:	6813      	ldr	r3, [r2, #0]
 80065d8:	b933      	cbnz	r3, 80065e8 <_free_r+0x30>
 80065da:	6063      	str	r3, [r4, #4]
 80065dc:	6014      	str	r4, [r2, #0]
 80065de:	b003      	add	sp, #12
 80065e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80065e4:	f000 b8da 	b.w	800679c <__malloc_unlock>
 80065e8:	42a3      	cmp	r3, r4
 80065ea:	d908      	bls.n	80065fe <_free_r+0x46>
 80065ec:	6825      	ldr	r5, [r4, #0]
 80065ee:	1961      	adds	r1, r4, r5
 80065f0:	428b      	cmp	r3, r1
 80065f2:	bf01      	itttt	eq
 80065f4:	6819      	ldreq	r1, [r3, #0]
 80065f6:	685b      	ldreq	r3, [r3, #4]
 80065f8:	1949      	addeq	r1, r1, r5
 80065fa:	6021      	streq	r1, [r4, #0]
 80065fc:	e7ed      	b.n	80065da <_free_r+0x22>
 80065fe:	461a      	mov	r2, r3
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	b10b      	cbz	r3, 8006608 <_free_r+0x50>
 8006604:	42a3      	cmp	r3, r4
 8006606:	d9fa      	bls.n	80065fe <_free_r+0x46>
 8006608:	6811      	ldr	r1, [r2, #0]
 800660a:	1855      	adds	r5, r2, r1
 800660c:	42a5      	cmp	r5, r4
 800660e:	d10b      	bne.n	8006628 <_free_r+0x70>
 8006610:	6824      	ldr	r4, [r4, #0]
 8006612:	4421      	add	r1, r4
 8006614:	1854      	adds	r4, r2, r1
 8006616:	42a3      	cmp	r3, r4
 8006618:	6011      	str	r1, [r2, #0]
 800661a:	d1e0      	bne.n	80065de <_free_r+0x26>
 800661c:	681c      	ldr	r4, [r3, #0]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	6053      	str	r3, [r2, #4]
 8006622:	440c      	add	r4, r1
 8006624:	6014      	str	r4, [r2, #0]
 8006626:	e7da      	b.n	80065de <_free_r+0x26>
 8006628:	d902      	bls.n	8006630 <_free_r+0x78>
 800662a:	230c      	movs	r3, #12
 800662c:	6003      	str	r3, [r0, #0]
 800662e:	e7d6      	b.n	80065de <_free_r+0x26>
 8006630:	6825      	ldr	r5, [r4, #0]
 8006632:	1961      	adds	r1, r4, r5
 8006634:	428b      	cmp	r3, r1
 8006636:	bf04      	itt	eq
 8006638:	6819      	ldreq	r1, [r3, #0]
 800663a:	685b      	ldreq	r3, [r3, #4]
 800663c:	6063      	str	r3, [r4, #4]
 800663e:	bf04      	itt	eq
 8006640:	1949      	addeq	r1, r1, r5
 8006642:	6021      	streq	r1, [r4, #0]
 8006644:	6054      	str	r4, [r2, #4]
 8006646:	e7ca      	b.n	80065de <_free_r+0x26>
 8006648:	b003      	add	sp, #12
 800664a:	bd30      	pop	{r4, r5, pc}
 800664c:	20000b9c 	.word	0x20000b9c

08006650 <sbrk_aligned>:
 8006650:	b570      	push	{r4, r5, r6, lr}
 8006652:	4e0e      	ldr	r6, [pc, #56]	; (800668c <sbrk_aligned+0x3c>)
 8006654:	460c      	mov	r4, r1
 8006656:	6831      	ldr	r1, [r6, #0]
 8006658:	4605      	mov	r5, r0
 800665a:	b911      	cbnz	r1, 8006662 <sbrk_aligned+0x12>
 800665c:	f000 fba6 	bl	8006dac <_sbrk_r>
 8006660:	6030      	str	r0, [r6, #0]
 8006662:	4621      	mov	r1, r4
 8006664:	4628      	mov	r0, r5
 8006666:	f000 fba1 	bl	8006dac <_sbrk_r>
 800666a:	1c43      	adds	r3, r0, #1
 800666c:	d00a      	beq.n	8006684 <sbrk_aligned+0x34>
 800666e:	1cc4      	adds	r4, r0, #3
 8006670:	f024 0403 	bic.w	r4, r4, #3
 8006674:	42a0      	cmp	r0, r4
 8006676:	d007      	beq.n	8006688 <sbrk_aligned+0x38>
 8006678:	1a21      	subs	r1, r4, r0
 800667a:	4628      	mov	r0, r5
 800667c:	f000 fb96 	bl	8006dac <_sbrk_r>
 8006680:	3001      	adds	r0, #1
 8006682:	d101      	bne.n	8006688 <sbrk_aligned+0x38>
 8006684:	f04f 34ff 	mov.w	r4, #4294967295
 8006688:	4620      	mov	r0, r4
 800668a:	bd70      	pop	{r4, r5, r6, pc}
 800668c:	20000ba0 	.word	0x20000ba0

08006690 <_malloc_r>:
 8006690:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006694:	1ccd      	adds	r5, r1, #3
 8006696:	f025 0503 	bic.w	r5, r5, #3
 800669a:	3508      	adds	r5, #8
 800669c:	2d0c      	cmp	r5, #12
 800669e:	bf38      	it	cc
 80066a0:	250c      	movcc	r5, #12
 80066a2:	2d00      	cmp	r5, #0
 80066a4:	4607      	mov	r7, r0
 80066a6:	db01      	blt.n	80066ac <_malloc_r+0x1c>
 80066a8:	42a9      	cmp	r1, r5
 80066aa:	d905      	bls.n	80066b8 <_malloc_r+0x28>
 80066ac:	230c      	movs	r3, #12
 80066ae:	603b      	str	r3, [r7, #0]
 80066b0:	2600      	movs	r6, #0
 80066b2:	4630      	mov	r0, r6
 80066b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066b8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800678c <_malloc_r+0xfc>
 80066bc:	f000 f868 	bl	8006790 <__malloc_lock>
 80066c0:	f8d8 3000 	ldr.w	r3, [r8]
 80066c4:	461c      	mov	r4, r3
 80066c6:	bb5c      	cbnz	r4, 8006720 <_malloc_r+0x90>
 80066c8:	4629      	mov	r1, r5
 80066ca:	4638      	mov	r0, r7
 80066cc:	f7ff ffc0 	bl	8006650 <sbrk_aligned>
 80066d0:	1c43      	adds	r3, r0, #1
 80066d2:	4604      	mov	r4, r0
 80066d4:	d155      	bne.n	8006782 <_malloc_r+0xf2>
 80066d6:	f8d8 4000 	ldr.w	r4, [r8]
 80066da:	4626      	mov	r6, r4
 80066dc:	2e00      	cmp	r6, #0
 80066de:	d145      	bne.n	800676c <_malloc_r+0xdc>
 80066e0:	2c00      	cmp	r4, #0
 80066e2:	d048      	beq.n	8006776 <_malloc_r+0xe6>
 80066e4:	6823      	ldr	r3, [r4, #0]
 80066e6:	4631      	mov	r1, r6
 80066e8:	4638      	mov	r0, r7
 80066ea:	eb04 0903 	add.w	r9, r4, r3
 80066ee:	f000 fb5d 	bl	8006dac <_sbrk_r>
 80066f2:	4581      	cmp	r9, r0
 80066f4:	d13f      	bne.n	8006776 <_malloc_r+0xe6>
 80066f6:	6821      	ldr	r1, [r4, #0]
 80066f8:	1a6d      	subs	r5, r5, r1
 80066fa:	4629      	mov	r1, r5
 80066fc:	4638      	mov	r0, r7
 80066fe:	f7ff ffa7 	bl	8006650 <sbrk_aligned>
 8006702:	3001      	adds	r0, #1
 8006704:	d037      	beq.n	8006776 <_malloc_r+0xe6>
 8006706:	6823      	ldr	r3, [r4, #0]
 8006708:	442b      	add	r3, r5
 800670a:	6023      	str	r3, [r4, #0]
 800670c:	f8d8 3000 	ldr.w	r3, [r8]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d038      	beq.n	8006786 <_malloc_r+0xf6>
 8006714:	685a      	ldr	r2, [r3, #4]
 8006716:	42a2      	cmp	r2, r4
 8006718:	d12b      	bne.n	8006772 <_malloc_r+0xe2>
 800671a:	2200      	movs	r2, #0
 800671c:	605a      	str	r2, [r3, #4]
 800671e:	e00f      	b.n	8006740 <_malloc_r+0xb0>
 8006720:	6822      	ldr	r2, [r4, #0]
 8006722:	1b52      	subs	r2, r2, r5
 8006724:	d41f      	bmi.n	8006766 <_malloc_r+0xd6>
 8006726:	2a0b      	cmp	r2, #11
 8006728:	d917      	bls.n	800675a <_malloc_r+0xca>
 800672a:	1961      	adds	r1, r4, r5
 800672c:	42a3      	cmp	r3, r4
 800672e:	6025      	str	r5, [r4, #0]
 8006730:	bf18      	it	ne
 8006732:	6059      	strne	r1, [r3, #4]
 8006734:	6863      	ldr	r3, [r4, #4]
 8006736:	bf08      	it	eq
 8006738:	f8c8 1000 	streq.w	r1, [r8]
 800673c:	5162      	str	r2, [r4, r5]
 800673e:	604b      	str	r3, [r1, #4]
 8006740:	4638      	mov	r0, r7
 8006742:	f104 060b 	add.w	r6, r4, #11
 8006746:	f000 f829 	bl	800679c <__malloc_unlock>
 800674a:	f026 0607 	bic.w	r6, r6, #7
 800674e:	1d23      	adds	r3, r4, #4
 8006750:	1af2      	subs	r2, r6, r3
 8006752:	d0ae      	beq.n	80066b2 <_malloc_r+0x22>
 8006754:	1b9b      	subs	r3, r3, r6
 8006756:	50a3      	str	r3, [r4, r2]
 8006758:	e7ab      	b.n	80066b2 <_malloc_r+0x22>
 800675a:	42a3      	cmp	r3, r4
 800675c:	6862      	ldr	r2, [r4, #4]
 800675e:	d1dd      	bne.n	800671c <_malloc_r+0x8c>
 8006760:	f8c8 2000 	str.w	r2, [r8]
 8006764:	e7ec      	b.n	8006740 <_malloc_r+0xb0>
 8006766:	4623      	mov	r3, r4
 8006768:	6864      	ldr	r4, [r4, #4]
 800676a:	e7ac      	b.n	80066c6 <_malloc_r+0x36>
 800676c:	4634      	mov	r4, r6
 800676e:	6876      	ldr	r6, [r6, #4]
 8006770:	e7b4      	b.n	80066dc <_malloc_r+0x4c>
 8006772:	4613      	mov	r3, r2
 8006774:	e7cc      	b.n	8006710 <_malloc_r+0x80>
 8006776:	230c      	movs	r3, #12
 8006778:	603b      	str	r3, [r7, #0]
 800677a:	4638      	mov	r0, r7
 800677c:	f000 f80e 	bl	800679c <__malloc_unlock>
 8006780:	e797      	b.n	80066b2 <_malloc_r+0x22>
 8006782:	6025      	str	r5, [r4, #0]
 8006784:	e7dc      	b.n	8006740 <_malloc_r+0xb0>
 8006786:	605b      	str	r3, [r3, #4]
 8006788:	deff      	udf	#255	; 0xff
 800678a:	bf00      	nop
 800678c:	20000b9c 	.word	0x20000b9c

08006790 <__malloc_lock>:
 8006790:	4801      	ldr	r0, [pc, #4]	; (8006798 <__malloc_lock+0x8>)
 8006792:	f7ff bf01 	b.w	8006598 <__retarget_lock_acquire_recursive>
 8006796:	bf00      	nop
 8006798:	20000b98 	.word	0x20000b98

0800679c <__malloc_unlock>:
 800679c:	4801      	ldr	r0, [pc, #4]	; (80067a4 <__malloc_unlock+0x8>)
 800679e:	f7ff befc 	b.w	800659a <__retarget_lock_release_recursive>
 80067a2:	bf00      	nop
 80067a4:	20000b98 	.word	0x20000b98

080067a8 <__ssputs_r>:
 80067a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067ac:	688e      	ldr	r6, [r1, #8]
 80067ae:	461f      	mov	r7, r3
 80067b0:	42be      	cmp	r6, r7
 80067b2:	680b      	ldr	r3, [r1, #0]
 80067b4:	4682      	mov	sl, r0
 80067b6:	460c      	mov	r4, r1
 80067b8:	4690      	mov	r8, r2
 80067ba:	d82c      	bhi.n	8006816 <__ssputs_r+0x6e>
 80067bc:	898a      	ldrh	r2, [r1, #12]
 80067be:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80067c2:	d026      	beq.n	8006812 <__ssputs_r+0x6a>
 80067c4:	6965      	ldr	r5, [r4, #20]
 80067c6:	6909      	ldr	r1, [r1, #16]
 80067c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80067cc:	eba3 0901 	sub.w	r9, r3, r1
 80067d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80067d4:	1c7b      	adds	r3, r7, #1
 80067d6:	444b      	add	r3, r9
 80067d8:	106d      	asrs	r5, r5, #1
 80067da:	429d      	cmp	r5, r3
 80067dc:	bf38      	it	cc
 80067de:	461d      	movcc	r5, r3
 80067e0:	0553      	lsls	r3, r2, #21
 80067e2:	d527      	bpl.n	8006834 <__ssputs_r+0x8c>
 80067e4:	4629      	mov	r1, r5
 80067e6:	f7ff ff53 	bl	8006690 <_malloc_r>
 80067ea:	4606      	mov	r6, r0
 80067ec:	b360      	cbz	r0, 8006848 <__ssputs_r+0xa0>
 80067ee:	6921      	ldr	r1, [r4, #16]
 80067f0:	464a      	mov	r2, r9
 80067f2:	f7ff fed3 	bl	800659c <memcpy>
 80067f6:	89a3      	ldrh	r3, [r4, #12]
 80067f8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80067fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006800:	81a3      	strh	r3, [r4, #12]
 8006802:	6126      	str	r6, [r4, #16]
 8006804:	6165      	str	r5, [r4, #20]
 8006806:	444e      	add	r6, r9
 8006808:	eba5 0509 	sub.w	r5, r5, r9
 800680c:	6026      	str	r6, [r4, #0]
 800680e:	60a5      	str	r5, [r4, #8]
 8006810:	463e      	mov	r6, r7
 8006812:	42be      	cmp	r6, r7
 8006814:	d900      	bls.n	8006818 <__ssputs_r+0x70>
 8006816:	463e      	mov	r6, r7
 8006818:	6820      	ldr	r0, [r4, #0]
 800681a:	4632      	mov	r2, r6
 800681c:	4641      	mov	r1, r8
 800681e:	f000 faab 	bl	8006d78 <memmove>
 8006822:	68a3      	ldr	r3, [r4, #8]
 8006824:	1b9b      	subs	r3, r3, r6
 8006826:	60a3      	str	r3, [r4, #8]
 8006828:	6823      	ldr	r3, [r4, #0]
 800682a:	4433      	add	r3, r6
 800682c:	6023      	str	r3, [r4, #0]
 800682e:	2000      	movs	r0, #0
 8006830:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006834:	462a      	mov	r2, r5
 8006836:	f000 fac9 	bl	8006dcc <_realloc_r>
 800683a:	4606      	mov	r6, r0
 800683c:	2800      	cmp	r0, #0
 800683e:	d1e0      	bne.n	8006802 <__ssputs_r+0x5a>
 8006840:	6921      	ldr	r1, [r4, #16]
 8006842:	4650      	mov	r0, sl
 8006844:	f7ff feb8 	bl	80065b8 <_free_r>
 8006848:	230c      	movs	r3, #12
 800684a:	f8ca 3000 	str.w	r3, [sl]
 800684e:	89a3      	ldrh	r3, [r4, #12]
 8006850:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006854:	81a3      	strh	r3, [r4, #12]
 8006856:	f04f 30ff 	mov.w	r0, #4294967295
 800685a:	e7e9      	b.n	8006830 <__ssputs_r+0x88>

0800685c <_svfiprintf_r>:
 800685c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006860:	4698      	mov	r8, r3
 8006862:	898b      	ldrh	r3, [r1, #12]
 8006864:	061b      	lsls	r3, r3, #24
 8006866:	b09d      	sub	sp, #116	; 0x74
 8006868:	4607      	mov	r7, r0
 800686a:	460d      	mov	r5, r1
 800686c:	4614      	mov	r4, r2
 800686e:	d50e      	bpl.n	800688e <_svfiprintf_r+0x32>
 8006870:	690b      	ldr	r3, [r1, #16]
 8006872:	b963      	cbnz	r3, 800688e <_svfiprintf_r+0x32>
 8006874:	2140      	movs	r1, #64	; 0x40
 8006876:	f7ff ff0b 	bl	8006690 <_malloc_r>
 800687a:	6028      	str	r0, [r5, #0]
 800687c:	6128      	str	r0, [r5, #16]
 800687e:	b920      	cbnz	r0, 800688a <_svfiprintf_r+0x2e>
 8006880:	230c      	movs	r3, #12
 8006882:	603b      	str	r3, [r7, #0]
 8006884:	f04f 30ff 	mov.w	r0, #4294967295
 8006888:	e0d0      	b.n	8006a2c <_svfiprintf_r+0x1d0>
 800688a:	2340      	movs	r3, #64	; 0x40
 800688c:	616b      	str	r3, [r5, #20]
 800688e:	2300      	movs	r3, #0
 8006890:	9309      	str	r3, [sp, #36]	; 0x24
 8006892:	2320      	movs	r3, #32
 8006894:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006898:	f8cd 800c 	str.w	r8, [sp, #12]
 800689c:	2330      	movs	r3, #48	; 0x30
 800689e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006a44 <_svfiprintf_r+0x1e8>
 80068a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80068a6:	f04f 0901 	mov.w	r9, #1
 80068aa:	4623      	mov	r3, r4
 80068ac:	469a      	mov	sl, r3
 80068ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80068b2:	b10a      	cbz	r2, 80068b8 <_svfiprintf_r+0x5c>
 80068b4:	2a25      	cmp	r2, #37	; 0x25
 80068b6:	d1f9      	bne.n	80068ac <_svfiprintf_r+0x50>
 80068b8:	ebba 0b04 	subs.w	fp, sl, r4
 80068bc:	d00b      	beq.n	80068d6 <_svfiprintf_r+0x7a>
 80068be:	465b      	mov	r3, fp
 80068c0:	4622      	mov	r2, r4
 80068c2:	4629      	mov	r1, r5
 80068c4:	4638      	mov	r0, r7
 80068c6:	f7ff ff6f 	bl	80067a8 <__ssputs_r>
 80068ca:	3001      	adds	r0, #1
 80068cc:	f000 80a9 	beq.w	8006a22 <_svfiprintf_r+0x1c6>
 80068d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80068d2:	445a      	add	r2, fp
 80068d4:	9209      	str	r2, [sp, #36]	; 0x24
 80068d6:	f89a 3000 	ldrb.w	r3, [sl]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	f000 80a1 	beq.w	8006a22 <_svfiprintf_r+0x1c6>
 80068e0:	2300      	movs	r3, #0
 80068e2:	f04f 32ff 	mov.w	r2, #4294967295
 80068e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80068ea:	f10a 0a01 	add.w	sl, sl, #1
 80068ee:	9304      	str	r3, [sp, #16]
 80068f0:	9307      	str	r3, [sp, #28]
 80068f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80068f6:	931a      	str	r3, [sp, #104]	; 0x68
 80068f8:	4654      	mov	r4, sl
 80068fa:	2205      	movs	r2, #5
 80068fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006900:	4850      	ldr	r0, [pc, #320]	; (8006a44 <_svfiprintf_r+0x1e8>)
 8006902:	f7f9 fc8d 	bl	8000220 <memchr>
 8006906:	9a04      	ldr	r2, [sp, #16]
 8006908:	b9d8      	cbnz	r0, 8006942 <_svfiprintf_r+0xe6>
 800690a:	06d0      	lsls	r0, r2, #27
 800690c:	bf44      	itt	mi
 800690e:	2320      	movmi	r3, #32
 8006910:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006914:	0711      	lsls	r1, r2, #28
 8006916:	bf44      	itt	mi
 8006918:	232b      	movmi	r3, #43	; 0x2b
 800691a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800691e:	f89a 3000 	ldrb.w	r3, [sl]
 8006922:	2b2a      	cmp	r3, #42	; 0x2a
 8006924:	d015      	beq.n	8006952 <_svfiprintf_r+0xf6>
 8006926:	9a07      	ldr	r2, [sp, #28]
 8006928:	4654      	mov	r4, sl
 800692a:	2000      	movs	r0, #0
 800692c:	f04f 0c0a 	mov.w	ip, #10
 8006930:	4621      	mov	r1, r4
 8006932:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006936:	3b30      	subs	r3, #48	; 0x30
 8006938:	2b09      	cmp	r3, #9
 800693a:	d94d      	bls.n	80069d8 <_svfiprintf_r+0x17c>
 800693c:	b1b0      	cbz	r0, 800696c <_svfiprintf_r+0x110>
 800693e:	9207      	str	r2, [sp, #28]
 8006940:	e014      	b.n	800696c <_svfiprintf_r+0x110>
 8006942:	eba0 0308 	sub.w	r3, r0, r8
 8006946:	fa09 f303 	lsl.w	r3, r9, r3
 800694a:	4313      	orrs	r3, r2
 800694c:	9304      	str	r3, [sp, #16]
 800694e:	46a2      	mov	sl, r4
 8006950:	e7d2      	b.n	80068f8 <_svfiprintf_r+0x9c>
 8006952:	9b03      	ldr	r3, [sp, #12]
 8006954:	1d19      	adds	r1, r3, #4
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	9103      	str	r1, [sp, #12]
 800695a:	2b00      	cmp	r3, #0
 800695c:	bfbb      	ittet	lt
 800695e:	425b      	neglt	r3, r3
 8006960:	f042 0202 	orrlt.w	r2, r2, #2
 8006964:	9307      	strge	r3, [sp, #28]
 8006966:	9307      	strlt	r3, [sp, #28]
 8006968:	bfb8      	it	lt
 800696a:	9204      	strlt	r2, [sp, #16]
 800696c:	7823      	ldrb	r3, [r4, #0]
 800696e:	2b2e      	cmp	r3, #46	; 0x2e
 8006970:	d10c      	bne.n	800698c <_svfiprintf_r+0x130>
 8006972:	7863      	ldrb	r3, [r4, #1]
 8006974:	2b2a      	cmp	r3, #42	; 0x2a
 8006976:	d134      	bne.n	80069e2 <_svfiprintf_r+0x186>
 8006978:	9b03      	ldr	r3, [sp, #12]
 800697a:	1d1a      	adds	r2, r3, #4
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	9203      	str	r2, [sp, #12]
 8006980:	2b00      	cmp	r3, #0
 8006982:	bfb8      	it	lt
 8006984:	f04f 33ff 	movlt.w	r3, #4294967295
 8006988:	3402      	adds	r4, #2
 800698a:	9305      	str	r3, [sp, #20]
 800698c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006a54 <_svfiprintf_r+0x1f8>
 8006990:	7821      	ldrb	r1, [r4, #0]
 8006992:	2203      	movs	r2, #3
 8006994:	4650      	mov	r0, sl
 8006996:	f7f9 fc43 	bl	8000220 <memchr>
 800699a:	b138      	cbz	r0, 80069ac <_svfiprintf_r+0x150>
 800699c:	9b04      	ldr	r3, [sp, #16]
 800699e:	eba0 000a 	sub.w	r0, r0, sl
 80069a2:	2240      	movs	r2, #64	; 0x40
 80069a4:	4082      	lsls	r2, r0
 80069a6:	4313      	orrs	r3, r2
 80069a8:	3401      	adds	r4, #1
 80069aa:	9304      	str	r3, [sp, #16]
 80069ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069b0:	4825      	ldr	r0, [pc, #148]	; (8006a48 <_svfiprintf_r+0x1ec>)
 80069b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80069b6:	2206      	movs	r2, #6
 80069b8:	f7f9 fc32 	bl	8000220 <memchr>
 80069bc:	2800      	cmp	r0, #0
 80069be:	d038      	beq.n	8006a32 <_svfiprintf_r+0x1d6>
 80069c0:	4b22      	ldr	r3, [pc, #136]	; (8006a4c <_svfiprintf_r+0x1f0>)
 80069c2:	bb1b      	cbnz	r3, 8006a0c <_svfiprintf_r+0x1b0>
 80069c4:	9b03      	ldr	r3, [sp, #12]
 80069c6:	3307      	adds	r3, #7
 80069c8:	f023 0307 	bic.w	r3, r3, #7
 80069cc:	3308      	adds	r3, #8
 80069ce:	9303      	str	r3, [sp, #12]
 80069d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069d2:	4433      	add	r3, r6
 80069d4:	9309      	str	r3, [sp, #36]	; 0x24
 80069d6:	e768      	b.n	80068aa <_svfiprintf_r+0x4e>
 80069d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80069dc:	460c      	mov	r4, r1
 80069de:	2001      	movs	r0, #1
 80069e0:	e7a6      	b.n	8006930 <_svfiprintf_r+0xd4>
 80069e2:	2300      	movs	r3, #0
 80069e4:	3401      	adds	r4, #1
 80069e6:	9305      	str	r3, [sp, #20]
 80069e8:	4619      	mov	r1, r3
 80069ea:	f04f 0c0a 	mov.w	ip, #10
 80069ee:	4620      	mov	r0, r4
 80069f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80069f4:	3a30      	subs	r2, #48	; 0x30
 80069f6:	2a09      	cmp	r2, #9
 80069f8:	d903      	bls.n	8006a02 <_svfiprintf_r+0x1a6>
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d0c6      	beq.n	800698c <_svfiprintf_r+0x130>
 80069fe:	9105      	str	r1, [sp, #20]
 8006a00:	e7c4      	b.n	800698c <_svfiprintf_r+0x130>
 8006a02:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a06:	4604      	mov	r4, r0
 8006a08:	2301      	movs	r3, #1
 8006a0a:	e7f0      	b.n	80069ee <_svfiprintf_r+0x192>
 8006a0c:	ab03      	add	r3, sp, #12
 8006a0e:	9300      	str	r3, [sp, #0]
 8006a10:	462a      	mov	r2, r5
 8006a12:	4b0f      	ldr	r3, [pc, #60]	; (8006a50 <_svfiprintf_r+0x1f4>)
 8006a14:	a904      	add	r1, sp, #16
 8006a16:	4638      	mov	r0, r7
 8006a18:	f3af 8000 	nop.w
 8006a1c:	1c42      	adds	r2, r0, #1
 8006a1e:	4606      	mov	r6, r0
 8006a20:	d1d6      	bne.n	80069d0 <_svfiprintf_r+0x174>
 8006a22:	89ab      	ldrh	r3, [r5, #12]
 8006a24:	065b      	lsls	r3, r3, #25
 8006a26:	f53f af2d 	bmi.w	8006884 <_svfiprintf_r+0x28>
 8006a2a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a2c:	b01d      	add	sp, #116	; 0x74
 8006a2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a32:	ab03      	add	r3, sp, #12
 8006a34:	9300      	str	r3, [sp, #0]
 8006a36:	462a      	mov	r2, r5
 8006a38:	4b05      	ldr	r3, [pc, #20]	; (8006a50 <_svfiprintf_r+0x1f4>)
 8006a3a:	a904      	add	r1, sp, #16
 8006a3c:	4638      	mov	r0, r7
 8006a3e:	f000 f879 	bl	8006b34 <_printf_i>
 8006a42:	e7eb      	b.n	8006a1c <_svfiprintf_r+0x1c0>
 8006a44:	080074a0 	.word	0x080074a0
 8006a48:	080074aa 	.word	0x080074aa
 8006a4c:	00000000 	.word	0x00000000
 8006a50:	080067a9 	.word	0x080067a9
 8006a54:	080074a6 	.word	0x080074a6

08006a58 <_printf_common>:
 8006a58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a5c:	4616      	mov	r6, r2
 8006a5e:	4699      	mov	r9, r3
 8006a60:	688a      	ldr	r2, [r1, #8]
 8006a62:	690b      	ldr	r3, [r1, #16]
 8006a64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	bfb8      	it	lt
 8006a6c:	4613      	movlt	r3, r2
 8006a6e:	6033      	str	r3, [r6, #0]
 8006a70:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006a74:	4607      	mov	r7, r0
 8006a76:	460c      	mov	r4, r1
 8006a78:	b10a      	cbz	r2, 8006a7e <_printf_common+0x26>
 8006a7a:	3301      	adds	r3, #1
 8006a7c:	6033      	str	r3, [r6, #0]
 8006a7e:	6823      	ldr	r3, [r4, #0]
 8006a80:	0699      	lsls	r1, r3, #26
 8006a82:	bf42      	ittt	mi
 8006a84:	6833      	ldrmi	r3, [r6, #0]
 8006a86:	3302      	addmi	r3, #2
 8006a88:	6033      	strmi	r3, [r6, #0]
 8006a8a:	6825      	ldr	r5, [r4, #0]
 8006a8c:	f015 0506 	ands.w	r5, r5, #6
 8006a90:	d106      	bne.n	8006aa0 <_printf_common+0x48>
 8006a92:	f104 0a19 	add.w	sl, r4, #25
 8006a96:	68e3      	ldr	r3, [r4, #12]
 8006a98:	6832      	ldr	r2, [r6, #0]
 8006a9a:	1a9b      	subs	r3, r3, r2
 8006a9c:	42ab      	cmp	r3, r5
 8006a9e:	dc26      	bgt.n	8006aee <_printf_common+0x96>
 8006aa0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006aa4:	1e13      	subs	r3, r2, #0
 8006aa6:	6822      	ldr	r2, [r4, #0]
 8006aa8:	bf18      	it	ne
 8006aaa:	2301      	movne	r3, #1
 8006aac:	0692      	lsls	r2, r2, #26
 8006aae:	d42b      	bmi.n	8006b08 <_printf_common+0xb0>
 8006ab0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006ab4:	4649      	mov	r1, r9
 8006ab6:	4638      	mov	r0, r7
 8006ab8:	47c0      	blx	r8
 8006aba:	3001      	adds	r0, #1
 8006abc:	d01e      	beq.n	8006afc <_printf_common+0xa4>
 8006abe:	6823      	ldr	r3, [r4, #0]
 8006ac0:	6922      	ldr	r2, [r4, #16]
 8006ac2:	f003 0306 	and.w	r3, r3, #6
 8006ac6:	2b04      	cmp	r3, #4
 8006ac8:	bf02      	ittt	eq
 8006aca:	68e5      	ldreq	r5, [r4, #12]
 8006acc:	6833      	ldreq	r3, [r6, #0]
 8006ace:	1aed      	subeq	r5, r5, r3
 8006ad0:	68a3      	ldr	r3, [r4, #8]
 8006ad2:	bf0c      	ite	eq
 8006ad4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ad8:	2500      	movne	r5, #0
 8006ada:	4293      	cmp	r3, r2
 8006adc:	bfc4      	itt	gt
 8006ade:	1a9b      	subgt	r3, r3, r2
 8006ae0:	18ed      	addgt	r5, r5, r3
 8006ae2:	2600      	movs	r6, #0
 8006ae4:	341a      	adds	r4, #26
 8006ae6:	42b5      	cmp	r5, r6
 8006ae8:	d11a      	bne.n	8006b20 <_printf_common+0xc8>
 8006aea:	2000      	movs	r0, #0
 8006aec:	e008      	b.n	8006b00 <_printf_common+0xa8>
 8006aee:	2301      	movs	r3, #1
 8006af0:	4652      	mov	r2, sl
 8006af2:	4649      	mov	r1, r9
 8006af4:	4638      	mov	r0, r7
 8006af6:	47c0      	blx	r8
 8006af8:	3001      	adds	r0, #1
 8006afa:	d103      	bne.n	8006b04 <_printf_common+0xac>
 8006afc:	f04f 30ff 	mov.w	r0, #4294967295
 8006b00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b04:	3501      	adds	r5, #1
 8006b06:	e7c6      	b.n	8006a96 <_printf_common+0x3e>
 8006b08:	18e1      	adds	r1, r4, r3
 8006b0a:	1c5a      	adds	r2, r3, #1
 8006b0c:	2030      	movs	r0, #48	; 0x30
 8006b0e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006b12:	4422      	add	r2, r4
 8006b14:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006b18:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006b1c:	3302      	adds	r3, #2
 8006b1e:	e7c7      	b.n	8006ab0 <_printf_common+0x58>
 8006b20:	2301      	movs	r3, #1
 8006b22:	4622      	mov	r2, r4
 8006b24:	4649      	mov	r1, r9
 8006b26:	4638      	mov	r0, r7
 8006b28:	47c0      	blx	r8
 8006b2a:	3001      	adds	r0, #1
 8006b2c:	d0e6      	beq.n	8006afc <_printf_common+0xa4>
 8006b2e:	3601      	adds	r6, #1
 8006b30:	e7d9      	b.n	8006ae6 <_printf_common+0x8e>
	...

08006b34 <_printf_i>:
 8006b34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b38:	7e0f      	ldrb	r7, [r1, #24]
 8006b3a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006b3c:	2f78      	cmp	r7, #120	; 0x78
 8006b3e:	4691      	mov	r9, r2
 8006b40:	4680      	mov	r8, r0
 8006b42:	460c      	mov	r4, r1
 8006b44:	469a      	mov	sl, r3
 8006b46:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006b4a:	d807      	bhi.n	8006b5c <_printf_i+0x28>
 8006b4c:	2f62      	cmp	r7, #98	; 0x62
 8006b4e:	d80a      	bhi.n	8006b66 <_printf_i+0x32>
 8006b50:	2f00      	cmp	r7, #0
 8006b52:	f000 80d4 	beq.w	8006cfe <_printf_i+0x1ca>
 8006b56:	2f58      	cmp	r7, #88	; 0x58
 8006b58:	f000 80c0 	beq.w	8006cdc <_printf_i+0x1a8>
 8006b5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006b64:	e03a      	b.n	8006bdc <_printf_i+0xa8>
 8006b66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006b6a:	2b15      	cmp	r3, #21
 8006b6c:	d8f6      	bhi.n	8006b5c <_printf_i+0x28>
 8006b6e:	a101      	add	r1, pc, #4	; (adr r1, 8006b74 <_printf_i+0x40>)
 8006b70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006b74:	08006bcd 	.word	0x08006bcd
 8006b78:	08006be1 	.word	0x08006be1
 8006b7c:	08006b5d 	.word	0x08006b5d
 8006b80:	08006b5d 	.word	0x08006b5d
 8006b84:	08006b5d 	.word	0x08006b5d
 8006b88:	08006b5d 	.word	0x08006b5d
 8006b8c:	08006be1 	.word	0x08006be1
 8006b90:	08006b5d 	.word	0x08006b5d
 8006b94:	08006b5d 	.word	0x08006b5d
 8006b98:	08006b5d 	.word	0x08006b5d
 8006b9c:	08006b5d 	.word	0x08006b5d
 8006ba0:	08006ce5 	.word	0x08006ce5
 8006ba4:	08006c0d 	.word	0x08006c0d
 8006ba8:	08006c9f 	.word	0x08006c9f
 8006bac:	08006b5d 	.word	0x08006b5d
 8006bb0:	08006b5d 	.word	0x08006b5d
 8006bb4:	08006d07 	.word	0x08006d07
 8006bb8:	08006b5d 	.word	0x08006b5d
 8006bbc:	08006c0d 	.word	0x08006c0d
 8006bc0:	08006b5d 	.word	0x08006b5d
 8006bc4:	08006b5d 	.word	0x08006b5d
 8006bc8:	08006ca7 	.word	0x08006ca7
 8006bcc:	682b      	ldr	r3, [r5, #0]
 8006bce:	1d1a      	adds	r2, r3, #4
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	602a      	str	r2, [r5, #0]
 8006bd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006bd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006bdc:	2301      	movs	r3, #1
 8006bde:	e09f      	b.n	8006d20 <_printf_i+0x1ec>
 8006be0:	6820      	ldr	r0, [r4, #0]
 8006be2:	682b      	ldr	r3, [r5, #0]
 8006be4:	0607      	lsls	r7, r0, #24
 8006be6:	f103 0104 	add.w	r1, r3, #4
 8006bea:	6029      	str	r1, [r5, #0]
 8006bec:	d501      	bpl.n	8006bf2 <_printf_i+0xbe>
 8006bee:	681e      	ldr	r6, [r3, #0]
 8006bf0:	e003      	b.n	8006bfa <_printf_i+0xc6>
 8006bf2:	0646      	lsls	r6, r0, #25
 8006bf4:	d5fb      	bpl.n	8006bee <_printf_i+0xba>
 8006bf6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006bfa:	2e00      	cmp	r6, #0
 8006bfc:	da03      	bge.n	8006c06 <_printf_i+0xd2>
 8006bfe:	232d      	movs	r3, #45	; 0x2d
 8006c00:	4276      	negs	r6, r6
 8006c02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c06:	485a      	ldr	r0, [pc, #360]	; (8006d70 <_printf_i+0x23c>)
 8006c08:	230a      	movs	r3, #10
 8006c0a:	e012      	b.n	8006c32 <_printf_i+0xfe>
 8006c0c:	682b      	ldr	r3, [r5, #0]
 8006c0e:	6820      	ldr	r0, [r4, #0]
 8006c10:	1d19      	adds	r1, r3, #4
 8006c12:	6029      	str	r1, [r5, #0]
 8006c14:	0605      	lsls	r5, r0, #24
 8006c16:	d501      	bpl.n	8006c1c <_printf_i+0xe8>
 8006c18:	681e      	ldr	r6, [r3, #0]
 8006c1a:	e002      	b.n	8006c22 <_printf_i+0xee>
 8006c1c:	0641      	lsls	r1, r0, #25
 8006c1e:	d5fb      	bpl.n	8006c18 <_printf_i+0xe4>
 8006c20:	881e      	ldrh	r6, [r3, #0]
 8006c22:	4853      	ldr	r0, [pc, #332]	; (8006d70 <_printf_i+0x23c>)
 8006c24:	2f6f      	cmp	r7, #111	; 0x6f
 8006c26:	bf0c      	ite	eq
 8006c28:	2308      	moveq	r3, #8
 8006c2a:	230a      	movne	r3, #10
 8006c2c:	2100      	movs	r1, #0
 8006c2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006c32:	6865      	ldr	r5, [r4, #4]
 8006c34:	60a5      	str	r5, [r4, #8]
 8006c36:	2d00      	cmp	r5, #0
 8006c38:	bfa2      	ittt	ge
 8006c3a:	6821      	ldrge	r1, [r4, #0]
 8006c3c:	f021 0104 	bicge.w	r1, r1, #4
 8006c40:	6021      	strge	r1, [r4, #0]
 8006c42:	b90e      	cbnz	r6, 8006c48 <_printf_i+0x114>
 8006c44:	2d00      	cmp	r5, #0
 8006c46:	d04b      	beq.n	8006ce0 <_printf_i+0x1ac>
 8006c48:	4615      	mov	r5, r2
 8006c4a:	fbb6 f1f3 	udiv	r1, r6, r3
 8006c4e:	fb03 6711 	mls	r7, r3, r1, r6
 8006c52:	5dc7      	ldrb	r7, [r0, r7]
 8006c54:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006c58:	4637      	mov	r7, r6
 8006c5a:	42bb      	cmp	r3, r7
 8006c5c:	460e      	mov	r6, r1
 8006c5e:	d9f4      	bls.n	8006c4a <_printf_i+0x116>
 8006c60:	2b08      	cmp	r3, #8
 8006c62:	d10b      	bne.n	8006c7c <_printf_i+0x148>
 8006c64:	6823      	ldr	r3, [r4, #0]
 8006c66:	07de      	lsls	r6, r3, #31
 8006c68:	d508      	bpl.n	8006c7c <_printf_i+0x148>
 8006c6a:	6923      	ldr	r3, [r4, #16]
 8006c6c:	6861      	ldr	r1, [r4, #4]
 8006c6e:	4299      	cmp	r1, r3
 8006c70:	bfde      	ittt	le
 8006c72:	2330      	movle	r3, #48	; 0x30
 8006c74:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006c78:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006c7c:	1b52      	subs	r2, r2, r5
 8006c7e:	6122      	str	r2, [r4, #16]
 8006c80:	f8cd a000 	str.w	sl, [sp]
 8006c84:	464b      	mov	r3, r9
 8006c86:	aa03      	add	r2, sp, #12
 8006c88:	4621      	mov	r1, r4
 8006c8a:	4640      	mov	r0, r8
 8006c8c:	f7ff fee4 	bl	8006a58 <_printf_common>
 8006c90:	3001      	adds	r0, #1
 8006c92:	d14a      	bne.n	8006d2a <_printf_i+0x1f6>
 8006c94:	f04f 30ff 	mov.w	r0, #4294967295
 8006c98:	b004      	add	sp, #16
 8006c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c9e:	6823      	ldr	r3, [r4, #0]
 8006ca0:	f043 0320 	orr.w	r3, r3, #32
 8006ca4:	6023      	str	r3, [r4, #0]
 8006ca6:	4833      	ldr	r0, [pc, #204]	; (8006d74 <_printf_i+0x240>)
 8006ca8:	2778      	movs	r7, #120	; 0x78
 8006caa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006cae:	6823      	ldr	r3, [r4, #0]
 8006cb0:	6829      	ldr	r1, [r5, #0]
 8006cb2:	061f      	lsls	r7, r3, #24
 8006cb4:	f851 6b04 	ldr.w	r6, [r1], #4
 8006cb8:	d402      	bmi.n	8006cc0 <_printf_i+0x18c>
 8006cba:	065f      	lsls	r7, r3, #25
 8006cbc:	bf48      	it	mi
 8006cbe:	b2b6      	uxthmi	r6, r6
 8006cc0:	07df      	lsls	r7, r3, #31
 8006cc2:	bf48      	it	mi
 8006cc4:	f043 0320 	orrmi.w	r3, r3, #32
 8006cc8:	6029      	str	r1, [r5, #0]
 8006cca:	bf48      	it	mi
 8006ccc:	6023      	strmi	r3, [r4, #0]
 8006cce:	b91e      	cbnz	r6, 8006cd8 <_printf_i+0x1a4>
 8006cd0:	6823      	ldr	r3, [r4, #0]
 8006cd2:	f023 0320 	bic.w	r3, r3, #32
 8006cd6:	6023      	str	r3, [r4, #0]
 8006cd8:	2310      	movs	r3, #16
 8006cda:	e7a7      	b.n	8006c2c <_printf_i+0xf8>
 8006cdc:	4824      	ldr	r0, [pc, #144]	; (8006d70 <_printf_i+0x23c>)
 8006cde:	e7e4      	b.n	8006caa <_printf_i+0x176>
 8006ce0:	4615      	mov	r5, r2
 8006ce2:	e7bd      	b.n	8006c60 <_printf_i+0x12c>
 8006ce4:	682b      	ldr	r3, [r5, #0]
 8006ce6:	6826      	ldr	r6, [r4, #0]
 8006ce8:	6961      	ldr	r1, [r4, #20]
 8006cea:	1d18      	adds	r0, r3, #4
 8006cec:	6028      	str	r0, [r5, #0]
 8006cee:	0635      	lsls	r5, r6, #24
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	d501      	bpl.n	8006cf8 <_printf_i+0x1c4>
 8006cf4:	6019      	str	r1, [r3, #0]
 8006cf6:	e002      	b.n	8006cfe <_printf_i+0x1ca>
 8006cf8:	0670      	lsls	r0, r6, #25
 8006cfa:	d5fb      	bpl.n	8006cf4 <_printf_i+0x1c0>
 8006cfc:	8019      	strh	r1, [r3, #0]
 8006cfe:	2300      	movs	r3, #0
 8006d00:	6123      	str	r3, [r4, #16]
 8006d02:	4615      	mov	r5, r2
 8006d04:	e7bc      	b.n	8006c80 <_printf_i+0x14c>
 8006d06:	682b      	ldr	r3, [r5, #0]
 8006d08:	1d1a      	adds	r2, r3, #4
 8006d0a:	602a      	str	r2, [r5, #0]
 8006d0c:	681d      	ldr	r5, [r3, #0]
 8006d0e:	6862      	ldr	r2, [r4, #4]
 8006d10:	2100      	movs	r1, #0
 8006d12:	4628      	mov	r0, r5
 8006d14:	f7f9 fa84 	bl	8000220 <memchr>
 8006d18:	b108      	cbz	r0, 8006d1e <_printf_i+0x1ea>
 8006d1a:	1b40      	subs	r0, r0, r5
 8006d1c:	6060      	str	r0, [r4, #4]
 8006d1e:	6863      	ldr	r3, [r4, #4]
 8006d20:	6123      	str	r3, [r4, #16]
 8006d22:	2300      	movs	r3, #0
 8006d24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d28:	e7aa      	b.n	8006c80 <_printf_i+0x14c>
 8006d2a:	6923      	ldr	r3, [r4, #16]
 8006d2c:	462a      	mov	r2, r5
 8006d2e:	4649      	mov	r1, r9
 8006d30:	4640      	mov	r0, r8
 8006d32:	47d0      	blx	sl
 8006d34:	3001      	adds	r0, #1
 8006d36:	d0ad      	beq.n	8006c94 <_printf_i+0x160>
 8006d38:	6823      	ldr	r3, [r4, #0]
 8006d3a:	079b      	lsls	r3, r3, #30
 8006d3c:	d413      	bmi.n	8006d66 <_printf_i+0x232>
 8006d3e:	68e0      	ldr	r0, [r4, #12]
 8006d40:	9b03      	ldr	r3, [sp, #12]
 8006d42:	4298      	cmp	r0, r3
 8006d44:	bfb8      	it	lt
 8006d46:	4618      	movlt	r0, r3
 8006d48:	e7a6      	b.n	8006c98 <_printf_i+0x164>
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	4632      	mov	r2, r6
 8006d4e:	4649      	mov	r1, r9
 8006d50:	4640      	mov	r0, r8
 8006d52:	47d0      	blx	sl
 8006d54:	3001      	adds	r0, #1
 8006d56:	d09d      	beq.n	8006c94 <_printf_i+0x160>
 8006d58:	3501      	adds	r5, #1
 8006d5a:	68e3      	ldr	r3, [r4, #12]
 8006d5c:	9903      	ldr	r1, [sp, #12]
 8006d5e:	1a5b      	subs	r3, r3, r1
 8006d60:	42ab      	cmp	r3, r5
 8006d62:	dcf2      	bgt.n	8006d4a <_printf_i+0x216>
 8006d64:	e7eb      	b.n	8006d3e <_printf_i+0x20a>
 8006d66:	2500      	movs	r5, #0
 8006d68:	f104 0619 	add.w	r6, r4, #25
 8006d6c:	e7f5      	b.n	8006d5a <_printf_i+0x226>
 8006d6e:	bf00      	nop
 8006d70:	080074b1 	.word	0x080074b1
 8006d74:	080074c2 	.word	0x080074c2

08006d78 <memmove>:
 8006d78:	4288      	cmp	r0, r1
 8006d7a:	b510      	push	{r4, lr}
 8006d7c:	eb01 0402 	add.w	r4, r1, r2
 8006d80:	d902      	bls.n	8006d88 <memmove+0x10>
 8006d82:	4284      	cmp	r4, r0
 8006d84:	4623      	mov	r3, r4
 8006d86:	d807      	bhi.n	8006d98 <memmove+0x20>
 8006d88:	1e43      	subs	r3, r0, #1
 8006d8a:	42a1      	cmp	r1, r4
 8006d8c:	d008      	beq.n	8006da0 <memmove+0x28>
 8006d8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006d92:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006d96:	e7f8      	b.n	8006d8a <memmove+0x12>
 8006d98:	4402      	add	r2, r0
 8006d9a:	4601      	mov	r1, r0
 8006d9c:	428a      	cmp	r2, r1
 8006d9e:	d100      	bne.n	8006da2 <memmove+0x2a>
 8006da0:	bd10      	pop	{r4, pc}
 8006da2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006da6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006daa:	e7f7      	b.n	8006d9c <memmove+0x24>

08006dac <_sbrk_r>:
 8006dac:	b538      	push	{r3, r4, r5, lr}
 8006dae:	4d06      	ldr	r5, [pc, #24]	; (8006dc8 <_sbrk_r+0x1c>)
 8006db0:	2300      	movs	r3, #0
 8006db2:	4604      	mov	r4, r0
 8006db4:	4608      	mov	r0, r1
 8006db6:	602b      	str	r3, [r5, #0]
 8006db8:	f7fa fad4 	bl	8001364 <_sbrk>
 8006dbc:	1c43      	adds	r3, r0, #1
 8006dbe:	d102      	bne.n	8006dc6 <_sbrk_r+0x1a>
 8006dc0:	682b      	ldr	r3, [r5, #0]
 8006dc2:	b103      	cbz	r3, 8006dc6 <_sbrk_r+0x1a>
 8006dc4:	6023      	str	r3, [r4, #0]
 8006dc6:	bd38      	pop	{r3, r4, r5, pc}
 8006dc8:	20000b94 	.word	0x20000b94

08006dcc <_realloc_r>:
 8006dcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dd0:	4680      	mov	r8, r0
 8006dd2:	4614      	mov	r4, r2
 8006dd4:	460e      	mov	r6, r1
 8006dd6:	b921      	cbnz	r1, 8006de2 <_realloc_r+0x16>
 8006dd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ddc:	4611      	mov	r1, r2
 8006dde:	f7ff bc57 	b.w	8006690 <_malloc_r>
 8006de2:	b92a      	cbnz	r2, 8006df0 <_realloc_r+0x24>
 8006de4:	f7ff fbe8 	bl	80065b8 <_free_r>
 8006de8:	4625      	mov	r5, r4
 8006dea:	4628      	mov	r0, r5
 8006dec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006df0:	f000 f81b 	bl	8006e2a <_malloc_usable_size_r>
 8006df4:	4284      	cmp	r4, r0
 8006df6:	4607      	mov	r7, r0
 8006df8:	d802      	bhi.n	8006e00 <_realloc_r+0x34>
 8006dfa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006dfe:	d812      	bhi.n	8006e26 <_realloc_r+0x5a>
 8006e00:	4621      	mov	r1, r4
 8006e02:	4640      	mov	r0, r8
 8006e04:	f7ff fc44 	bl	8006690 <_malloc_r>
 8006e08:	4605      	mov	r5, r0
 8006e0a:	2800      	cmp	r0, #0
 8006e0c:	d0ed      	beq.n	8006dea <_realloc_r+0x1e>
 8006e0e:	42bc      	cmp	r4, r7
 8006e10:	4622      	mov	r2, r4
 8006e12:	4631      	mov	r1, r6
 8006e14:	bf28      	it	cs
 8006e16:	463a      	movcs	r2, r7
 8006e18:	f7ff fbc0 	bl	800659c <memcpy>
 8006e1c:	4631      	mov	r1, r6
 8006e1e:	4640      	mov	r0, r8
 8006e20:	f7ff fbca 	bl	80065b8 <_free_r>
 8006e24:	e7e1      	b.n	8006dea <_realloc_r+0x1e>
 8006e26:	4635      	mov	r5, r6
 8006e28:	e7df      	b.n	8006dea <_realloc_r+0x1e>

08006e2a <_malloc_usable_size_r>:
 8006e2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e2e:	1f18      	subs	r0, r3, #4
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	bfbc      	itt	lt
 8006e34:	580b      	ldrlt	r3, [r1, r0]
 8006e36:	18c0      	addlt	r0, r0, r3
 8006e38:	4770      	bx	lr
	...

08006e3c <_init>:
 8006e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e3e:	bf00      	nop
 8006e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e42:	bc08      	pop	{r3}
 8006e44:	469e      	mov	lr, r3
 8006e46:	4770      	bx	lr

08006e48 <_fini>:
 8006e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e4a:	bf00      	nop
 8006e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e4e:	bc08      	pop	{r3}
 8006e50:	469e      	mov	lr, r3
 8006e52:	4770      	bx	lr
